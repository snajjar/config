import { $, env, UIComponent } from '@dualbox/dualbox';
var pkgDesc = require('../../package.json');

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('@dualbox/dualbox-lib-bootstrap-slider');
    require('./BootstrapSlider.css');
}

class BootstrapSlider extends UIComponent {
    constructor(pkgDesc, appDesc, attrs) {
        super(pkgDesc, appDesc, attrs)
        this.val = null;
        this.div = null;
    }

    registerEvents() {
        super.registerEvents();
        this.registerUIEvent("setAttr", this.setAttr.bind(this));
        this.registerUIEvent("setValue", this.setValue.bind(this));
    }

    setAttr(e) {
        var attr = e.args;
        var that = this;
        Object.keys(attr).forEach(function (key) {
           that.attr[key] = attr[key];
        });

        var preval = this.val;

        $(this.div).find('input').prop("min", attr.min );
        $(this.div).find('input').prop("max", attr.max );
        $(this.div).find('input').prop("step", attr.step );

        this.attr.min = attr.min;
        this.attr.max = attr.max;
        this.attr.step = attr.step;

        this.val = parseFloat($(this.div).find('input').bootstrapSlider('getValue'));

        if(preval !== this.val){
            this.onChange();
        }
    }

    setValue(data){
        if(data.args !== this.val){
            $(this.div).find('input').bootstrapSlider('setValue',data.args);
            this.onChange();
        }
    }

    onReady() {
        this.emit('data', { "result" : this.val });
    }

    disable() {
        $(this.div).prop('disabled', true);
        $(this.div).find('input').bootstrapSlider("disable");
    }

    enable() {
        $(this.div).prop('disabled', false);
        $(this.div).find('input').bootstrapSlider("enable");
    }

    hide() {
        $(this.div).hide();
    }

    show() {
        $(this.div).show();
    }

    import( value ) {
        this.val = value;
        $(this.div).find('input').bootstrapSlider('setValue', value);
        this.onChange();
    }

    buildTxtString(val){

        var perc_disp = this.val*100;
        if(this.attr.step/0.01 === Math.round(this.attr.step/0.01)){
            perc_disp = Math.round(perc_disp);
        }else if(this.attr.step/0.001 === Math.round(this.attr.step/0.001)){
            perc_disp = Math.round(perc_disp*10)/10;
        }else if(this.attr.step/0.0001 === Math.round(this.attr.step/0.0001)){
            perc_disp = Math.round(perc_disp*100)/100;
        }
        return this.attr.prefix +
            this.attr.format === "percent" ? perc_disp + "%": this.val.toString() +
            this.attr.suffix;

    }

    onChange(e, ui) {
        var old_val = this.val;
        if(ui){
            this.val = parseFloat(ui.value);
        }else{
            this.val = parseFloat($(this.div).find('input').bootstrapSlider('getValue'));
        }
        var txt = this.buildTxtString();
        $(this.div).find('.slider-val').text( txt );
        if(old_val !== this.val){
            this.trigger({ "result" : this.val });
        }
    }

    static attachTo(appDesc, attrs, div) {
        // build slider from package.json desc
        var slider = new BootstrapSlider(pkgDesc, appDesc, attrs);
        var input = $('<input/>', {
            id:    slider.attr.id
        });

        slider.val = parseFloat(slider.attr.value);
        var txt = slider.buildTxtString();

        // instanciate div from app.json parameters
        slider.div =
            $('<div/>', { class : "dualbox form-group db-slider-div" }).append(
                $('<label/>', { class: "dualbox", style: "width: 100%;" }).append(
                    $('<span/>', { class: "dualbox", text: slider.attr.label }),
                    $('<span/>', { class: 'dualbox slider-val', text: txt, style: "float: right;" })
                ),
                input
            );

        input.bootstrapSlider({
            min:   slider.attr.min,
            max:   slider.attr.max,
            step:  slider.attr.step,
            formatter: function(value) {
                return value;
            }
        }).on('slideStop', slider.onChange.bind(slider));

        if(slider.attr.triggerOnSlide){
            input.on('slide', slider.onChange.bind(slider));
        }
        input.bootstrapSlider('setValue', slider.attr.value)

        // append to param div and return the slider
        $(div).append(slider.div);
        if( slider.attr.hidden ) {
            $(slider.div).hide();
        }

        return slider;
    }
}

module.exports = BootstrapSlider;
