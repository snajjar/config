var description = require('./package.json');
var DualBox = require('@dualbox/dualbox');

var JSONObject = require('@dualbox/dualbox-type-json');
var JSZip = require('jszip');

var getFileInZip = function(file, callback){
    JSZip.loadAsync(file.toArrayBuffer()).then(
        function (zip) {
            // Auto find the file in zip.
            // Note that this module works on zip file only
            // if there is no more than 1 file.
            var fn = "";
            zip.forEach(function (relativePath, file){
                fn = relativePath;
            });
            var f = zip.file(fn);
            var fext = fn.split('.').pop().toLowerCase();
            if(fext === "json"){
                f.async("string").then(
                    function(data){
                        callback(data,"string",fext);
                    }
                );
            }else{
                throw new DualBox.errors.RuntimeError('Cannot read file in zip, the file found in the zip is not a supported format, please provide JSON file. Detected type is '+fext);
            }
        }
    ).catch(
        function(reason) {
            throw new DualBox.errors.RuntimeError('Cannot read zip file ('+ file.getName() + ') : Zip load has been rejected : '+reason+'.');
        }
    );
};

/**
 *  A simple parsing module for dualbox
 *  @constructor
 *  @extends {DualBox.Module}
 */
var FileToJSON = function(attrs){
    DualBox.Module.call(this, description, attrs);
    this.setParallel(false);
};

FileToJSON.prototype = Object.create(DualBox.Module.prototype);
FileToJSON.prototype.constructor = FileToJSON;

// [Abstract] See DualBox.Module
FileToJSON.prototype.compute = function(input, response){
    this.debug( "Computing output of FileToJSON" );

    var done = function(obj){
        response.send({
            json:new JSONObject(obj)
        });
    };

    if(input.file === null){
        done({});
    }else{
        switch(input.file.getExtension()){
            case "json":
                done(JSON.parse(input.file.toUTF8String()));
            break;
            case "zip":
                getFileInZip(input.file, function(data, type, ext){
                    switch(ext){
                        case "json":
                            done(JSON.parse(data));
                        break;
                        default:
                            throw new DualBox.errors.TypeError("Error in module " + this.id +" the file extension in the zip file. Please provide JSON file. Detected is : "+ext);
                        break;
                    };
                });
            break;
            default:
                throw new DualBox.errors.TypeError("Error in module " + this.id +" the file extension is not supported. Please provide JSON file.");
            break;
        };
    }
};

module.exports = FileToJSON;
