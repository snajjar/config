import mainVue from './templates/main.vue';
import graphNodeVue from './templates/graphNode.vue';
import addNodeVue from './templates/addNode.vue';
import editMainSettingsVue from './templates/editMainSettings.vue';
import editNodeSettingsVue from './templates/editNodeSettings.vue';
import debugNodeInfosVue from './templates/debugNodeInfos.vue';
import dbutils from '../m/DualboxUtils';

var templates = {
    "mainVue" : mainVue,
    "graphNodeVue" : graphNodeVue,
    "addNodeVue" : addNodeVue,
    "editMainSettingsVue" : editMainSettingsVue,
    "editNodeSettingsVue" : editNodeSettingsVue,
    "debugNodeInfosVue" : debugNodeInfosVue
}

/**
 *   Class that handle loading/reloading of templates
 */
class TemplateManager {
    constructor(view) {
        this.view = view;
        this.templates = {};
    }

    appendTemplate(container, templateName, templateData, cb) {
        if( !this.templates[templateName] ) {
            this.templates[templateName] = {
                "cssLoaded" : false
            }
        }

        // load the HTML
        var templateHTML = require('./templates/' + templateName + '.html');

        // load css if necessary
        if( !this.templates[templateName].cssLoaded ) {
            require('./templates/' + templateName + '.css'); // require is enough to inject css
            this.templates[templateName].cssLoaded = true;
        }

        // append the HTML to the selected container
        var div = $(templateHTML(templateData))
        container.append( div );
        container.ready(() => {
            // now load the .js file to bind behaviors
            var templateJs = require('./templates/' + templateName + '.js');
            templateJs(this.view, div, templateData); // run all the binds (give the view as parameter)

            if( cb ) cb(div);
        });
    }

    replaceTemplate(container, templateName, templateData, cb) {
        container.empty();
        this.appendTemplate(container, templateName, templateData, cb);
    }

    appendVue(div, template, data, cb) {
        var t = templates[template];
        var TemplateClass = Vue.extend(t); // create a class from our .vue template

        // create the element to give to vue.js (vue will replace it)
        var id = "db" + dbutils.randomString(8);
        div.append($('<div/>', { "id" : id }));

        if( t ) {
            div.ready( () => {
                var v = new TemplateClass({
                    el: "#" + id,
                    data: data,
                    mounted: cb
                });
                return v;
            })
        }
        else {
            console.error('Could not find template: ' + template);
        }
        cb();
    }

    remplaceVueTemplate() {

    }
}

export default TemplateManager;
