var Dualbox = require('@dualbox/dualbox');

import { _ } from 'lodash';

// return all the needed functions for Object
// cloning, serializing, matching json and deserializing
var generate = function( struct ) {
    return {
        name: 'Object',
        native : true,
        jsClass: Object,
        desc: "The native javascript object type",

        clone: (o) => {
            var cloned = {};
            _.each(o, (val, key) => {
                cloned[key] = struct.clone(val);
            });
            return cloned;
        },

        toJSON: (o) => {
            // serialize our values
            var serialized = {};
            _.each(o, (val, key) => {
                serialized[key] = struct.serialize(val);
            });
            return serialized;
        },

        fromJSON: (json) => {
            var deserialized = {};
            _.each( json, (val, key) => {
                deserialized[key] = struct.deserialize(val);
            });
            return deserialized;
        },

        matchData: (o) => {
            return typeof o === "object" &&
                Object.prototype.toString.call(o) == '[object Object]' &&
                o.constructor && o.constructor.name == 'Object' &&
                !Array.isArray(o);
        },

        matchJSON: (json) => {
            // convention: no json.metadata => native object
            return json && typeof json == "object" && json.metadata === undefined && !Array.isArray(json);
        },
    }
}

Dualbox.registerType(generate(Dualbox.Type));

module.exports = Object;
