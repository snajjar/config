import { env, UIComponent, $} from '@dualbox/dualbox';
var pkgDesc = require('../package.json');

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('./BootstrapButtonToggle.css'); // for bundle compilation
}

/**
 *  Attributes in appDesc :
 *  text : text of the button
 *  id : html id
 */
class BootstrapButtonToggle extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.val = false;
    }

    onClick(e) {
        this.val = !this.val;
        this.trigger({ "result" : this.val });
    }

    disable() {
        $(this.div).prop('disabled', true);
    }

    enable() {
        $(this.div).prop('disabled', false);
    }

    hide(){
        $(this.div).hide();
    }

    show(){
        $(this.div).show();
    }

    import( value ) {
        this.val = value;
        this.trigger({ "result" : this.val });
    }

    onReady() {
        this.emit('data', { 'result' : this.val });
    }

    static attachTo(appDesc, attrs, div) {
        // build slider from package.json desc
        var component = new BootstrapButtonToggle(pkgDesc, appDesc, attrs);

        var attr = component.attr;

        var buttonHTML = attr.text;
        if( attr.glyphicon ) {
            buttonHTML = "<i class='glyphicon " + attr.glyphicon + "'></i> " + buttonHTML;
        }
        if( attr.fontawesomeIcon ) {
            buttonHTML = "<i class='fa " + attr.fontawesomeIcon + "'></i> " + buttonHTML;
        }

        // instanciate div from app.json parameters
        component.div = $('<button/>', {
                'id':          appDesc.id,
                'type':        'text',
                'class':       'dualbox btn ' + attr.class + ' db-button-toggle',
                'data-toggle': 'button'
            })
            .click(component.onClick.bind(component))
            .append(buttonHTML)

        if( attr.checked ) {
            $(component.div).button('toggle') // toggles t/f
            component.val = true;
        }
        if(attr.disabled){
            component.disable();
        }
        if( attr.hidden ) {
            $(component.div).hide();
        }

        // append to param div and return the slider
        $(div).append(component.div);
        return component;
    }
}

module.exports = BootstrapButtonToggle;
