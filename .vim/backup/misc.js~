var _ = require('lodash');

/**
 * Convert a string to HTML entities
 */
var toHtmlEntities = function(str) {
    return str.replace(/./gm, function(s) {
        return "&#" + s.charCodeAt(0) + ";";
    });
};

/**
 * Create string from HTML entities
 */
var fromHtmlEntities = function(str) {
    return (str+"").replace(/&#\d+;/gm,function(s) {
        return String.fromCharCode(s.match(/\d+/gm)[0]);
    })
};

/*
 *  Swap key,value object to value,key
 */
var swap = function(o){
    var ret = {};
    for(var key in o){
        ret[o[key]] = key;
    }
    return ret;
}

var roughSizeOfObject = function(object) {
    var objectList = [];
    var stack = [ object ];
    var bytes = 0;

    while ( stack.length ) {
        var value = stack.pop();

        if ( typeof value === 'boolean' ) {
            bytes += 4;
        }
        else if ( typeof value === 'string' ) {
            bytes += value.length * 2;
        }
        else if ( typeof value === 'number' ) {
            bytes += 8;
        }
        else if
        (
            typeof value === 'object'
            && objectList.indexOf( value ) === -1
        )
        {
            objectList.push( value );

            for( var i in value ) {
                if( value.hasOwnProperty(i) ) {
                    stack.push( value[ i ] );
                }
            }
        }
    }
    return bytes;
}

var isRoughSizeOfObjectMoreThan = function(object, size) {
    var objectList = [];
    var stack = [ object ];
    var bytes = 0;

    while ( stack.length ) {
        if( bytes > size ) {
            return true;
        }

        var value = stack.pop();

        if ( typeof value === 'boolean' ) {
            bytes += 4;
        }
        else if ( typeof value === 'string' ) {
            bytes += value.length * 2;
        }
        else if ( typeof value === 'number' ) {
            bytes += 8;
        }
        else if
        (
            typeof value === 'object'
            && objectList.indexOf( value ) === -1
        )
        {
            objectList.push( value );

            for( var i in value ) {
                if( value.hasOwnProperty(i) ) {
                    stack.push( value[ i ] );
                }
            }
        }
    }
    return false;
}

_.mixin({
    'sortKeysBy': function (obj, comparator) {
        var keys = _.sortBy(_.keys(obj), function (key) {
            return comparator ? comparator(obj[key], key) : key;
        });

        return _.object(keys, _.map(keys, function (key) {
            return obj[key];
        }));
    }
});

module.exports = {
    toHtmlEntities : toHtmlEntities,
    fromHtmlEntities : fromHtmlEntities,
    roughSizeOfObject : roughSizeOfObject,
    isRoughSizeOfObjectMoreThan: isRoughSizeOfObjectMoreThan,
    swap: swap
}
