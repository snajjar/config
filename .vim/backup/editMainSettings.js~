const swal = require('sweetalert2');
const _ = require('lodash');

const JSONEditor = require('@dualbox/dualbox-lib-jsoneditor');

var TemplateBinds = function(view, div, data) {
    var editor = null;

    div.ready(() => {
        // bind the json editor
        editor = new JSONEditor(div.find('.json-editor')[0], { modes: ['tree', 'code', 'text' ]});
        editor.set({});


        div.find('.btn-edit-event-description').click(function(e) {

        });

        div.find('.btn-remove-app-event').click(function(e) {

        });

        div.find('.btn-rename-app-event').click(function(e) {

        });

        div.find('.event-if').change(function(e) {

        });

        div.find('.event-data').change(function(e) {

        });

        div.find('.select-event-target').change(function(e) {

        });

        div.find('.select-event-name').change(function(e) {

        });

        div.find('.btn-add-app-event').click(function(e) {

        });

        div.find('.btn-remove-in-event').click(function(e) {
            var eventName = $(this).attr('data-event');
            var index = parseInt($(this).attr('data-index'));
            view.c.removeAppInEvent(eventName, index);
        });

        div.find('.btn-remove-out-event').click(function(e) {
            var eventName = $(this).attr('data-event');
            view.c.removeAppOutEvent(eventName);
        });

        div.find('.btn-add-subevent').click(function(e) {
            var eventName = $(this).attr('data-event');
            view.c.addSubEvent(eventName);
        });

        div.find('.btn-add-callback').click(function(e) {
            var eventName = $(this).attr('data-event');
            view.c.addCallback(eventName);
        });

        div.find('.setValue').click(function(e) {
            e.preventDefault();
            e.stopPropagation();

            var modal = div.find('.edit-value-modal');
            modal.modal('show');

            // set the link data on the modal
            modal.attr('data-id', $(this).attr('data-id'));
            modal.attr('data-type', $(this).attr('data-type'));
            modal.attr('data-name', $(this).attr('data-name'));
            modal.attr('data-value', $(this).attr('data-value'));
            modal.attr('data-valueType', $(this).attr('data-valueType'));

            // choose the right settings according to the link data
            if( $(this).attr('data-undefined') ) {
                modal.find('.unset-value').prop('checked', true);
            }
            else if( $(this).attr('data-null') ) {
                modal.find('.set-value-null').prop('checked', true);
            }
            else {
                modal.find('.set-value-type').prop('checked', true);
                modal.find('.has-value').show();
            }

            var valueType = $(this).attr('data-valueType');
            if( valueType ) {
                modal.find('.choose-value-type').val( valueType );
                modal.find('.define-value').hide();
                modal.find('.define-' + valueType).show();

                // set the existing value
                var value = $(this).attr('data-value');
                switch(valueType) {
                case "string":  val = modalSetValue.find('.text-value').val(value); break;
                case "number":  val = modalSetValue.find('.number-value').val(parseFloat(value)); break;
                case "boolean": val = modalSetValue.find('.bool-value').val(value); break;
                case "object":  val = editor.set((value && JSON.parse(value)) || {}); break;
                default:
                    console.log('couldnt find value type: ' + valueType);
                }
            }
        });

        // set up the modal control (for setting a value)
        var modalSetValue = div.find('.edit-value-modal');
        modalSetValue.find('.set-value-type').change(function(e) {
            if( $(this).is(':checked') ) {
                modalSetValue.find('.has-value').show();
            }
            else {
                modalSetValue.find('.has-value').hide();
            }

            var valueType = modalSetValue.find('.choose-value-type').val();
            modalSetValue.find('.define-value.define-' + valueType).show();
        });

        modalSetValue.find('.choose-value-type').change(function(e) {
            var valueType = $(this).val();
            modalSetValue.find('.define-value').hide();
            modalSetValue.find('.define-' + valueType).show();
        });

        modalSetValue.find('.btn-save').click(function(e) {
            var val;
            if( modalSetValue.find('.unset-value').is(':checked') ) {
                // remove default value
                val = undefined;
            }
            else if( modalSetValue.find('.set-value-null').is(':checked') ) {
                val = null;
            }
            else {
                var type = modalSetValue.find('.choose-value-type').val();
                switch( type ) {
                case "string":  val = modalSetValue.find('.text-value').val(); break;
                case "number":  val = parseFloat(modalSetValue.find('.number-value').val()); break;
                case "boolean": val = modalSetValue.find('.bool-value').val() == "true"; break;
                case "object":  val = editor.get(); break;
                default:
                    throw "cant recognize type: " + type;
                }
            }

            // set the new value
            var destId =   modalSetValue.attr('data-id');
            var destName = modalSetValue.attr('data-name');
            var destType = modalSetValue.attr('data-type'); // "attr" or "input"

            /* TODO
            if(val !== undefined){
                view.m.getNode(destId).val( destType, destName, val );
            }else{
                view.m.getNode(destId).deleteVal( destType, destName );
            }
            */
            modalSetValue.modal('hide');

            var field = $('.' + destType + '-' + destId + '-' + destName); // the display field
            if( val === undefined ) {
                field.text("");
            }
            else if ( val === null ) {
                field.text("null");
            }
            else {
                switch(type) {
                case "string":  field.text( '"' + val + '"'); break;
                case "number":  field.text(val); break;
                case "boolean": field.text(val ? "true" : "false"); break;
                case "object":  field.text('[Object]'); break;
                default:
                    throw "cant recognize type: " + type;
                }
            }
        });
    });
};

module.exports = TemplateBinds;
