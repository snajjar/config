var description = require('./package.json');
var DualBox = require('@dualbox/dualbox');
var DualboxTypesAll3D = require('@dualbox/dualbox-type-all3d');

var File = require('@dualbox/dualbox-type-file');
var JSZip = require('@dualbox/dualbox-lib-jszip');

/**
 *  A simple parsing module for dualbox
 *  @constructor
 *  @extends {DualBox.Module}
 */
var ZipFiles = function(attrs){
    DualBox.Module.call(this, description, attrs);
    this.setParallel(false);
};

ZipFiles.prototype = Object.create(DualBox.Module.prototype);
ZipFiles.prototype.constructor = ZipFiles;

// [Abstract] See DualBox.Module
ZipFiles.prototype.compute = function(input, response){
    this.debug( "Computing output of ZipFiles" );

    var zip = new JSZip();

    var file_names = {};
    for(var i=0; i<input.files.length; ++i){
        var f = input.files[i];
        var name = f.getName() + "." + f.getExtension();
        if(file_names[name]){
            throw "Error in zip-files module "+this.id+" : several files to save in this zip have the same name... concerned name : " + name;
        }
        zip.file(name,f.toArrayBuffer());
        file_names[name] = true;
    }
    zip.generateAsync({type : "arraybuffer", compression: "DEFLATE"}).then(function(ab){
        var zfile = new File(ab, "zip", input.filename);

        var output = {
            file:zfile
        };
        response.send(output);
    });
};

module.exports = ZipFiles;
