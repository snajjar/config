import { ReactiveVar } from 'meteor/reactive-var';



{ //AdaptPatientSole
    Template.AdaptPatientSole.onCreated( function() {
        var self = this;
        self.modeSelected = new ReactiveVar(false);
        self.mode = null;
        self.subscriptionsReady = new ReactiveVar(false);
        this.autorun(function() {
            self.subs=[
            subMgr.subscribe('FinalInsoles',{consultationId:self.data.consultationId})
            ];

            subMgr.onReady(function(){

                var insole = FinalInsoles.findOne({consultationId:self.data.consultationId});

                if(insole!=null)
                {
                    self.mode = insole.mode;
                }
                self.modeSelected.set(insole!=null);
                self.subscriptionsReady.set(true);
            });
        });

    });


    Template.AdaptPatientSole.helpers({
        modeSelected : function() {
            return Template.instance().modeSelected.get();
        },
        subscriptionsReady:function()
        {
            return Template.instance().subscriptionsReady.get();
        },
    });
}

{ // AdaptSolePresets
    Template.AdaptSolePresets.onCreated(function()
    {
        var self = this;
        self.subscriptionsReady = new ReactiveVar(false);
        this.mode = this.findParent('AdaptPatientSole').mode;
        this.features3Dplus = ["anteroThick", "activeAntero", "anteroPos01", "anteroPos02", "anteroPos03", "anteroPos04",
                    "anteroPos05", "degAngle", "eltHeight", "reliefElt"];


        this.autorun(function() {
            self.subs = [subMgr.subscribe('InsolePresets')];
            subMgr.onReady(function()
            {
                self.subscriptionsReady.set(true);
            });
        });

        this.savePreset = function(name) {
            window.insoleApp.readOutput('preset', (p) => {
                // Hack bugfix
                // This can be removed once we switched to sole-adapt 1.8.0
                if( p && p.get && typeof p.get == "function" ) p = p.get();

                if( this.mode == "normal" ) {
                    _.each(this.features3Dplus, (name) => {
                        delete p[name];
                    });
                }
                InsolePresets.insert({"name": name, "settings": p}, (err) => {
                    if( err ) {
                        swal(TAPi18n.__("Erreur"), err, "error");
                    }
                    else {
                        swal(TAPi18n.__("Préconfiguration sauvegardée !"), "", "success");
                    }
                });
            });
        }
    });

    Template.AdaptSolePresets.helpers({
        "getPresets" : function() {
            return InsolePresets.find({ 'ownerId' : Meteor.userId() });
        }
    });

    Template.AdaptSolePresets.events({
        "click .btn-save-preset" : function(e, t) {
            var name = $('.preset-name').val();

            // check if we already have a config with that name
            var preset = InsolePresets.findOne({ 'ownerId' : Meteor.userId(), 'name': name });
            if( preset ) {
                swal({
                    title: TAPi18n.__("La préconfiguration '") + name + TAPi18n.__("' existe déjà !"),
                    text: TAPi18n.__("Voulez vous la remplacer ?"),
                    type: "warning",
                    showCancelButton: true,
                    cancelButtonText: TAPi18n.__("Annuler"),
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: TAPi18n.__("Oui"),
                    closeOnConfirm: true,
                    showLoaderOnConfirm: true,
                }, function(){
                    InsolePresets.remove(preset._id, () => {
                        $('.adapt-sole-configurations').modal('hide');
                        t.savePreset(name);
                    });
                });
            }
            else {
                $('.adapt-sole-configurations').modal('hide');
                t.savePreset(name);
            }
        },

        "click .btn-load-preset" : function(e, t) {
            var name = $('.preset-select').val();
            if( name === "preconfig_default" ) {
                // load default settings
                window.insoleApp.setInput("anteroThick", null);
                window.insoleApp.setInput("activeAntero", false);
                window.insoleApp.setInput("anteroPos01",  null);
                window.insoleApp.setInput("anteroPos02",  null);
                window.insoleApp.setInput("anteroPos03",  null);
                window.insoleApp.setInput("anteroPos04",  null);
                window.insoleApp.setInput("anteroPos05",  null);
                window.insoleApp.setInput("degAngle",     "0");
                window.insoleApp.setInput("eltHeight",    "0");
                window.insoleApp.setInput("heelAdjust",   "none");
                window.insoleApp.setInput("recess",       false);
                window.insoleApp.setInput("reliefElt",    "none");
                window.insoleApp.setInput("rigidities", {
                    "E" : 2,
                    "Dx" : 2,
                    "Dy" : 2,
                    "Dz" : 2,
                    "C" : 2,
                    "Fx" : 2,
                    "Fy" : 2,
                    "CenterH" : 2,
                    "Bx" : 2,
                    "By" : 2,
                    "Bz" : 2,
                    "G" : 2,
                    "CenterB" : 2,
                    "A" : 2
                });
            }
            else {
                var preset = InsolePresets.findOne({ "name": name });
                if( preset ) {
                    var allParamsRestored = true;
                    _.each( preset.settings, (val, name) => {
                        if( t.mode === "normal" && t.features3Dplus.indexOf(name) !== -1 ) {
                            allParamsRestored = false;
                        }
                        else if( t.mode === "normal" && name == "heelAdjust" && val === "stabiliser" ) {
                            allParamsRestored = false;
                        }
                        else {
                            window.insoleApp.setInput(name, val);
                        }
                    });

                    if( !allParamsRestored ) {
                        swal(TAPi18n.__("Tous les paramètres n'ont pas été restaurés."), TAPi18n.__('Votre configuration a été chargée, mais certains paramètres ne sont pas disponibles en mode 3D (stabilisateur, antéros, ARC, etc.). Si vous souhaitez quand même les ajouter, supprimez les semelles puis passez en mode 3D+ ou Enfant.'), 'warning')
                    }

                    $('.preset-name').val(name); // load name if we want to re-save this preset later
                }
                else {
                    console.error('Couldnt find preset named: ' + name);
                }
            }

            $('.adapt-sole-configurations').modal('hide');
        },
    });
}

{ //AdaptSoleChooseMode
    Template.AdaptSoleChooseMode.onCreated(function()
    {
        var self = this;
        self.subscriptionsReady = new ReactiveVar(false);

        this.autorun(function() {
            self.subs = [subMgr.subscribe('Products',{countryCode:Meteor.user().profile.countryCode})];
            subMgr.onReady(function()
            {
                self.subscriptionsReady.set(true);
            });
        });
    });
    Template.AdaptSoleChooseMode.helpers(
    {
        subscriptionsReady:function()
        {
            return Template.instance().subscriptionsReady.get();
        },
        getProductInsoleChildren:function()
        {
            return Products.findOne({name:"Semelles Enfant",countryCode:Meteor.user().profile.countryCode});
        },
        getProductInsole3D:function()
        {
            return Products.findOne({name:"Semelles 3D",countryCode:Meteor.user().profile.countryCode});
        },
        getProductInsole3DP:function()
        {
            return Products.findOne({name:"Semelles 3D+",countryCode:Meteor.user().profile.countryCode});
        },
    });

    Template.AdaptSoleChooseMode.events({
        "click .insoleChildren" : function(e, t) {
            var parent = Template.instance().findParent('AdaptPatientSole');
            parent.mode = "child";
            parent.modeSelected.set(true);
            return false;
        },
        "click .insole3D" : function(e, t) {
            var parent = Template.instance().findParent('AdaptPatientSole');
            parent.mode = "normal";
            parent.modeSelected.set(true);
            return false;
        },
        "click .insole3Dplus" : function(e, t) {
            var parent = Template.instance().findParent('AdaptPatientSole');
            parent.mode = "therapeutic";
            parent.modeSelected.set(true);
            return false;
        }
    });

}

{ //AdaptSole (contains ShapeX)

    Template.AdaptSole.onCreated( function() {
        var self = this;
        self.subscriptionsReady = new ReactiveVar(false);
        // ShapeX App
        this.app = null;

        var parent = Template.instance().findParent('AdaptPatientSole');
        var mode = parent.mode;

        this.getDatabaseInfos = function() {
            if( !self.data )
            {
                console.log('Missing data');
                return {};
            };
            var consultation = Consultations.findOne(self.data.consultationId);

            // first, clean the old data
            return {
                "patientId"       : self.data['patientId'],
                "consultationId"  : self.data['consultationId'],
                "footside"        : self.data['footside'],
                "mode"            : mode,
                "patient"         : Patients.findOne(self.data.patientId),
                "consultation"    : consultation,
                "footprint"       : Footprints.findOne({ consultationId : self.data.consultationId, footside: self.data.footside }),
                "insole"          : FinalInsoles.findOne({ consultationId : self.data.consultationId, footside : self.data.footside }),
                "otherFootInsole" : FinalInsoles.findOne({ consultationId : self.data.consultationId, footside : ( self.data.footside == "left" ? "right" : "left" ) })
            }
        }

        // set the application inputs from given parameters, and start it
        this.loadParamsAndStart = function(app, dbInfos, footprintJSON, otherInsoleJSON) {
            // if we don't have a footprint, that's an error
            self.app.setInput("coverframe", false);
            self.app.setInput("coverSize", "40"); // we don't care actually which size here
            self.app.setInput("initials", dbInfos.patient.initials());

            // if we have another insole in the consultation, load parameters from it
            // (symmetry)
            if( otherInsoleJSON ) {
                var m = THREE.Matrix4.fromJSON(otherInsoleJSON.input.adjustMatrix);
                m.elements[1]*=-1;
                m.elements[4]*=-1;
                m.elements[13]*=-1;
                self.app.setInput("adjustMatrix", m.toJSON());

                self.app.setInput("activeAntero", otherInsoleJSON.input.activeAntero);
                self.app.setInput("anteroPos01",  otherInsoleJSON.input.anteroPos01);
                self.app.setInput("anteroPos02",  otherInsoleJSON.input.anteroPos02);
                self.app.setInput("anteroPos03",  otherInsoleJSON.input.anteroPos03);
                self.app.setInput("anteroPos04",  otherInsoleJSON.input.anteroPos04);
                self.app.setInput("anteroPos05",  otherInsoleJSON.input.anteroPos05);
                self.app.setInput("degAngle",     otherInsoleJSON.input.degAngle);
                self.app.setInput("eltHeight",    otherInsoleJSON.input.eltHeight);
                self.app.setInput("footsizeStr",  otherInsoleJSON.input.footsizeStr);
                self.app.setInput("footwidthStr", otherInsoleJSON.input.footwidthStr);
                self.app.setInput("heelAdjust",   otherInsoleJSON.input.heelAdjust);
                self.app.setInput("recess",       otherInsoleJSON.input.recess);
                self.app.setInput("reliefElt",    otherInsoleJSON.input.reliefElt);
                self.app.setInput("rigidities",   otherInsoleJSON.input.rigidities);
                self.app.setInput("thicknessStr", otherInsoleJSON.input.thicknessStr);
                if(otherInsoleJSON.input.anteroThick){
                    self.app.setInput("anteroThick", otherInsoleJSON.input.anteroThick);
                }
                self.app.trigger('setOtherInsoleData', {
                    footside:( self.data.footside == "left" ? "right" : "left" ),
                    footsize:parseInt(otherInsoleJSON.input.footsizeStr),
                    footwidth:otherInsoleJSON.input.footwidthStr,
                    thickness:parseFloat(otherInsoleJSON.input.thicknessStr),
                    recess:otherInsoleJSON.input.recess,
                    rigidities:otherInsoleJSON.input.rigidities
                });
                // self.app.setInput("adArchHeight", json.input.adArchHeight); // do not load arch adjustment
            }else{
                // check if we have a default footwidth on the patient
                if( dbInfos.patient.footwidth ) {
                    self.app.setInput('footsizeStr', dbInfos.patient.footwidth.toString());
                }
            }
            self.app.setInput('patientName', dbInfos.patient.lastname+" "+dbInfos.patient.firstname);

            // if not admin, reset all admin elements
            if(isAdmin())
            {
                self.app.setInput("productionId", " ");
            }
            else
            {
                if(Roles.userIsInRole(Meteor.userId(), 'decathlon', 'podometric'))
                {
                    var firstname = dbInfos.patient.firstname.toUpperCase();
                    var lastname = dbInfos.patient.lastname.toUpperCase();
                    var now = new Date();
                    var factoryCode = dbInfos.patient.footwidth+"-"+ getMoment(now).week() + now.getFullYear().toString().substring(2)+"-"+firstname.substring(0,Math.min(firstname.length,4))+" "+lastname.substring(0,Math.min(lastname.length,4));
                    self.app.setInput("productionId", factoryCode);
                    var rigidities = {E:7,Dx:7,Dy:7,Dz:7,C:7,Fx:7,Fy:7,CenterH:7,Bx:7,By:7,Bz:7,G:7,CenterB:7,A:7};
                    self.app.setInput("rigidities", rigidities);
                    self.app.setInput("initials", "WEDZE");
                    self.app.setInput("heelAdjust", "flatheel50");
                    self.app.setInput("coverframe", true);
                }
                else
                {
                    self.app.setInput("initials", " ");
                    self.app.setInput("productionId", " ");
                    self.app.setInput("coverframe", false);
                }
            }

            // finally, setup the footprint file and start
            self.app.setInput("file", footprintJSON.file);
            self.app.start();
            self.app.trigger("setMode",dbInfos.mode);
            console.log("Setting mode " + dbInfos.mode);
            self.version.set(self.app.instanceData.version);
        }

        // no footprint to load, just instanciate the current ShapeX footprint-import app
        this.loadCurrentApplication = function() {
            var self = this;
            var dbInfos = this.getDatabaseInfos();

            ShapeX.load({
                "app"  : "sole-adapt",
                "phase": getShapeXPhase(),
                "loaderDiv": $('#application'),
                "endpoint" : SHAPEX_ENDPOINT,
                "startingMsg" : SHAPEX_STARTMSG,
                "loadingMsg"  : SHAPEX_LOADMSG
            }, function() {
                self.app = ShapeX.start({
                    "logLevel": "warn",
                    "profiler": "false",
                    "div" : $('#application'),
                    "ui" : getInsoleInterface(),
                    "translations" : require('./../../i18n/dualbox.json'),
                    "lang": TAPi18n.getLanguage()
                });
                window.insoleApp = self.app;

                self.app.interfaceHelper();

                // add the needed callbacks to the application buttons
                self.addButtonsCallbacks(self.app);


                // put the application in loading state until we did setup all inputs
                // so we don't see the interface glitching at each input set
                self.app.trigger('setStep', 'loading');


                // load footprint and set it as input
                if( dbInfos.footprint ) {
                    dbInfos.footprint.load(function(err, footprintJSON) {
                        if( dbInfos.otherFootInsole ) {
                            dbInfos.otherFootInsole.load( function(err, otherInsoleJSON) {
                                self.loadParamsAndStart(self.app, dbInfos, footprintJSON, otherInsoleJSON);
                            });
                        }
                        else {
                            self.loadParamsAndStart(self.app, dbInfos, footprintJSON, null);
                        }
                    });
                }
                else {
                    console.error('No footprint found');
                }
            });
        }

        this.startApplication = function() {
            var self = this;
            if( self.app ) { return; }

            var dbInfos = self.getDatabaseInfos();
            if( dbInfos.insole ) {
                loadInsole( $('#application'), dbInfos.insole, function(app) {
                    self.addButtonsCallbacks(app);
                    self.app = app;
                    window.insoleApp = app;

                    // if not admin, reset all admin elements
                    if(isAdmin())
                    {
                        self.app.setInput("productionId", " ");
                    }
                    else
                    {
                        if(Roles.userIsInRole(Meteor.userId(), 'decathlon', 'podometric'))
                        {
                            var firstname = dbInfos.patient.firstname.toUpperCase();
                            var lastname = dbInfos.patient.lastname.toUpperCase();
                            var now = new Date();
                            var factoryCode = dbInfos.patient.footwidth+"-"+ getMoment(now).week() + now.getFullYear().toString().substring(2)+"-"+firstname.substring(0,Math.min(firstname.length,4))+" "+lastname.substring(0,Math.min(lastname.length,4));
                            self.app.setInput("productionId", factoryCode);
                            var rigidities = {E:7,Dx:7,Dy:7,Dz:7,C:7,Fx:7,Fy:7,CenterH:7,Bx:7,By:7,Bz:7,G:7,CenterB:7,A:7};
                            self.app.setInput("rigidities", rigidities);
                            self.app.setInput("coverframe", true);
                        }
                        else
                        {
                            self.app.setInput("initials", " ");
                            self.app.setInput("productionId", " ");
                            self.app.setInput("coverframe", false);
                        }
                    }

                    app.start();
                    console.log("Setting mode " + dbInfos.mode);
                    self.app.trigger("setMode",dbInfos.mode);

                    self.app.trigger('setStep', 'verify');
                    self.version.set(self.app.instanceData.version);
                });
            }
            else {
                self.loadCurrentApplication();
            }
        }

        this.addButtonsCallbacks = function( app ) {
            var self = this;

            // the "Terminate" button
            app.trigger('setTerminateButtonCallback', function(cb) {
                var db = self.getDatabaseInfos();

                self.saveInsole(db, function() {
                    self.loadedApp = false;
                    Router.go('PatientView', {
                        '_id'  : db.patient._id,
                    });
                });
            });

            try
            {
                app.trigger('setConfigurationButtonCallback', function(cb) {
                    $('.adapt-sole-configurations').modal('toggle');
                });
            }
            catch(ex){
                
            }
        }

        this.saveInsole = function(dbInfos, cb) {
            var self = this;
            // show the app loader spinner before we begin
            self.app.trigger('showLoader');

            self.app.trigger("getFlags",{}, function(appData){

                // first, get a screenshot
                self.app.readOutput("dataURL", function(dataURL){
                    // screenshot
                    var screenshotBlob = dataURItoBlob(dataURL);
                    var appExport = self.app.export();
                    // Insole modifiers
                    var modifiers = {
                        footside       : dbInfos.footside,
                        mode           : appData.mode,
                        patientId      : dbInfos.patient._id,
                        consultationId : dbInfos.consultation._id,
                        integratedFile : true, // true if ShapeX file
                        footprintId    : dbInfos.footprint._id,
                        settings       : appExport,
                        ownerId        : dbInfos.patient.ownerId,
                        createdAt      : new Date()
                    };

                    FinalInsoles.save(screenshotBlob, appExport, modifiers, { onCompleted: function() {
                        self.app.trigger('hideLoader');
                        cb();
                    }});
                });
            });
        };

        self.data = Template.currentData();
        var patientId = self.data.patientId;
        var consultationId = self.data.consultationId;

        this.autorun(function() {
            self.subs=[
            subMgr.subscribe('Patients', { "_id": patientId }),
            subMgr.subscribe('Consultations', { "_id": consultationId }),
            subMgr.subscribe('Footprints', { "patientId": patientId, "consultationId": consultationId }),
            subMgr.subscribe('FinalInsoles', { "consultationId" : consultationId }),
            subMgr.subscribe('FootprintFiles', { "metadata.consultationId": consultationId })
            ]

        });
    });

    Template.AdaptSole.onRendered( function() {
        var self = Template.instance();
        self.version = new ReactiveVar("...");
        subMgr.onReady(function()
            {
                self.subscriptionsReady.set(true);
                // before load, check first if we didnt clean data
                if(self.data !=null && self.data.length !== 0 ) {
                    loadShapeX(function() {
                        self.startApplication();
                    });
                }
                else
                {
                    console.error("No data to load ShapeX");
                }
            });
        chromeHackLayoutFix();
    });

    Template.AdaptSole.onDestroyed(function() {
        if( this.app ) {
            this.app.kill();
        }
        delete window.insoleApp;
    });
}

{ // left menu (back button)

    Template.AdaptSoleMenu.events({
        "click .btn-patient" : function(e, t) {
            Router.go('/patient/' + this.patientId + '/view/');
            return false;
        }
    });
}
