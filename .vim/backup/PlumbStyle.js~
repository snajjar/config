
/**
 *   Style of JSPlumb
 */

class GraphStyle {
    constructor(parent) {
        this.parent = parent;

        this.eventConnectorData = {
            connector: [
                "Straight",//"Flowchart",
                { curviness:60, stub: 5, gap: 0, cornerRadius: 5, alwaysRespectStubs: false }
            ],
            paintStyle : {
                lineWidth: 2,
                strokeStyle: "#004d00",
                joinstyle: "round",
                outlineWidth: 0
            },
            hoverStyle :{
                lineWidth: 2,
                strokeStyle: "#003300"
            },
            overlays:[
                //[ "Arrow", { width:10, length:30, location:1, id:"arrow" } ],
            ]
        }

        // This should be all put in a connector type, but I don't manage to
        // make it work in plumb..
        this.connectorData = {
            connector: [
                "Bezier",//"Flowchart",
                { curviness:60, stub: 5, gap: 0, cornerRadius: 5, alwaysRespectStubs: false }
            ],
            paintStyle : {
                lineWidth: 4,
                strokeStyle: "#88898a",
                joinstyle: "round",
                outlineWidth: 0
            },
            hoverStyle :{
                lineWidth: 4,
                strokeStyle: "#0079bf"
            }
        };

        this.splittedConnectorData = {
            connector: [
                "Straight",//"Flowchart",
                { curviness:60, stub: 5, gap: 0, cornerRadius: 5, alwaysRespectStubs: false }
            ],
            paintStyle : {
                lineWidth: 4,
                strokeStyle: "#88898a",
                joinstyle: "round",
                outlineWidth: 0
            },
            hoverStyle :{
                lineWidth: 4,
                strokeStyle: "#0079bf"
            }
        }

        this.endpointData = {
            hoverStyle : {
                fillStyle: "#c2c2c2",
                strokeStyle: "#727272"
            }
        };

        this.eventEndpointData = {
            hoverStyle : {
                fillStyle: "#c2c2c2",
                strokeStyle: "#003300"
            }
        };

        this.inputEndpoint = {
            endpoint: "Dot",
            paintStyle: {
                fillStyle: "#ffffff",
                radius: 5,
                strokeStyle: "#727272",
                lineWidth: 2
            },
            //connector: this.connectorData.connector,
            connectorOverlays:this.connectorData.overlays,
            connectorStyle: this.connectorData.paintStyle,
            connectorHoverStyle: this.connectorData.hoverStyle,
            hoverPaintStyle: this.endpointData.hoverStyle,
            connectorClass: 'data-connection',
            cssClass: 'data-connection',
            maxConnections: 1,
            dropOptions: { hoverClass: "hover", activeClass: "active" },
            overlays: [
                [   "Label",
                    {   location: [1, 1],
                        id:"tip",
                        label: "Type : -type- /n Descrpition : -desc-",
                        cssClass: "alert alert-warning fade show inoutEndpointLabel",
                        visible:false
                    }
                ]
            ]
        };

        this.outputEndpoint = {
            endpoint: "Dot",
            paintStyle: {
                fillStyle: "#ffffff",
                radius: 5,
                strokeStyle: "#727272",
                lineWidth: 2
            },
            //connector: this.connectorData.connector,
            connectorOverlays:this.connectorData.overlays,
            connectorStyle: this.connectorData.paintStyle,
            connectorHoverStyle: this.connectorData.hoverStyle,
            connectorClass: 'data-connection',
            cssClass: 'data-connection',
            hoverPaintStyle: this.endpointData.hoverStyle,
            maxConnections: -1,
            dragOptions: {},
            overlays: [
                [   "Label",
                    {   location: [1, 1],
                        id:"tip",
                        label: "Type : -type- /n Descrpition : -desc-",
                        cssClass: "alert alert-warning fade show inoutEndpointLabel",
                        visible:false
                    }
                ]
            ]
        };

        this.eventEndpoint = {
            endpoint: "Dot",
            anchors: [ "Perimeter", { shape:"Square" } ],
            paintStyle: {
                fillStyle: "#fff",
                radius: 5,
                strokeStyle: "#004d00",
                lineWidth: 2
            },
            connector: this.eventConnectorData.connector,
            connectorOverlays:this.eventConnectorData.overlays,
            connectorStyle: this.eventConnectorData.paintStyle,
            connectorHoverStyle: this.eventConnectorData.hoverStyle,
            connectorClass: 'endpoint-connection',
            cssClass: 'endpoint-connection',
            hoverPaintStyle: this.eventEndpointData.hoverStyle,
            maxConnections: -1,
            dragOptions: {},
            overlays: [
                [   "Label",
                    {   location: [1, 1],
                        id:"tip",
                        label: "Type : -type- /n Descrpition : -desc-",
                        cssClass: "alert alert-warning fade show inoutEndpointLabel",
                        visible:false
                    }
                ]
            ]
        }

        this.dataLineSplitterEndpoint = {
            endpoint: "Dot",
            paintStyle: {
                fillStyle: "#727272",
                radius: 3,
                strokeStyle: "#727272",
                lineWidth: 2
            },
            hoverPaintStyle: this.endpointData.hoverStyle,
            maxConnections: 1,
        };

        this.eventLineSplitterEndpoint = {
            endpoint: "Dot",
            paintStyle: {
                fillStyle: "#004d00",
                radius: 3,
                strokeStyle: "#004d00",
                lineWidth: 2
            },
            hoverPaintStyle: this.eventEndpointData.hoverStyle,
            maxConnections: 1,
        }

    }

    // default settings for jsPlumb
    setDefault() {
        this.parent.jsPlumbInstance.importDefaults({
            Connector: [
                "Bezier",//"Flowchart",
                { curviness:50, stub: 5, gap: 0, cornerRadius: 5, alwaysRespectStubs: false }
            ],
        });
    }

    hideType( arg ) {
        if( typeof arg === "string" ) {
            var endpoint = this.parent.jsPlumbInstance.getEndpoint(arg);
        }
        else {
            var endpoint = arg;
        }

        if( endpoint === undefined ) {
            console.log('Endpoint ' + arg + ' is undefined');
            throw "nique";
        }

        // show source output type
        var divId, type, key; [divId, type, key] = endpoint.getUuid().split('#');
        if( endpoint.isSource ) {
            $('#' + divId + ' .box-outputs .type[data-key="' + key + '"]').addClass('opacity0');
        }
        else {
            $('#' + divId + ' .box-inputs .type[data-key="' + key + '"]').addClass('opacity0');
        }
    }

    showType( arg ) {
        if( typeof arg === "string" ) {
            var endpoint = this.parent.jsPlumbInstance.getEndpoint(arg);
        }
        else {
            var endpoint = arg;
        }

        // show source output type
        var divId, type, key; [divId, type, key] = endpoint.getUuid().split('#');
        if( endpoint.isSource ) {
            $('#' + divId + ' .box-outputs .type[data-key="' + key + '"]').removeClass('opacity0');
        }
        else {
            $('#' + divId + ' .box-inputs .type[data-key="' + key + '"]').removeClass('opacity0');
        }
    }

    showEventName( ep ) {
        ep.getOverlay("label").setLabel( ep.getParameters().event );
    }

    hideEventName( ep ) {
        ep.getOverlay("label").setLabel("");
    }
}

export default GraphStyle;
