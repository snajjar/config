import { env, UIComponent, $, errors, Type} from '@dualbox/dualbox';
import { _ } from '@dualbox/dualbox-lib-lodash';

const JSONObject = require('@dualbox/dualbox-type-json');

var pkgDesc = require('../../package.json');

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('./RigiditiesBox.css'); // for bundle compilation
}

/**
 *  Attributes in appDesc :
 *  text : text of the button
 *  id : html id
 */
class RigiditiesBox extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.attr = {};
        this.val = {};
        this.zoneDef = ["E","Dx","Dy","Dz","C","Fx","Fy","CenterH","Bx","By","Bz","G","CenterB","A"];
        this.otherInsoleData = null;
        this.overrideInput = false; // true when user changed a rigidity

        var that = this;
        var attr = appDesc.attr || {};
        Object.keys(pkgDesc.dualbox.attr).forEach(function (key) {
            that.attr[key] = attr[key] !== undefined ? attr[key]  : pkgDesc.dualbox.attr[key].value;
        });

        this.attr.footSizeStr = this.attr.footSizeStr || "Pointure";
        this.attr.footWidthStr = this.attr.footWidthStr || "Gabarit";
        this.attr.widthStr = this.attr.widthStr || "Epaisseur";
        this.attr.recessStr = this.attr.recessStr || "Evidem. talon";
        this.attr.linkTxt = this.attr.linkTxt || "Voir l'autre semelle";

        this.svgCode = `
            <svg version="1.1" id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                 width="100%" viewBox="183.94 155.602 227.813 515.825"
                 enable-background="new 183.94 155.602 227.813 515.825" xml:space="preserve">

            <g id="rigidities">
                <g id="rigidities-zones">
                    <g id="CenterB">
                        <path id="path-CenterB" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M307.091,671.224c-1.506-0.096-3.016-0.229-4.522-0.398
                            l-0.245-0.27c-39.997-75.682-35.757-111.766-31.61-152.85c0.26-2.574,0.52-5.17,0.791-7.658l0.246,0.27
                            c16.145-2.814,32.355-5.158,48.631-7.031l-0.246-0.27c9.168,26.984,20.123,48.059,25.271,75.369
                            c5.834,30.949,4.211,69.91-38.564,92.568"/>
                    </g>
                    <g id="CenterH">
                        <path id="path-CenterH" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M320.134,503.017c-16.274,1.871-32.485,4.217-48.63,7.031
                            l0.246,0.27c3.037-28.633,5.922-57.354,4.202-85.777c-0.566-9.361-1.632-18.689-3.357-27.972
                            c-2.868-15.438-7.557-30.746-13.911-52.122c7.694-2.78,15.371-5.396,23.029-7.845c7.014-2.243,14.012-4.349,20.996-6.314
                            c6.135-1.729,12.26-3.351,18.373-4.864c-3.291,10.891-6.313,21.003-8.66,30.949c-2.535,10.739-4.28,21.282-5.367,31.56
                            c-2.199,20.805-1.697,40.519,0.433,58.55c1.856,15.723,4.952,30.164,8.575,42.936c1.374,4.844,2.824,9.447,4.318,13.869"/>
                    </g>
                    <g id="G">
                        <path id="path-G" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M271.75,510.318c-0.271,2.488-0.531,5.084-0.791,7.656
                            c-4.146,41.086-8.386,77.17,31.609,152.852c-15.055-1.691-30.109-7.043-42.412-17.254c-15.353-12.744-26.419-33.059-33.242-61.5
                            c-2.521-10.51-4.462-22.129-7.087-39.355c-1.358-8.91-2.899-19.322-4.536-30.607C243.648,515.576,262.468,511.644,271.75,510.318z"
                            />
                    </g>
                    <g id="Fy">
                        <path id="path-Fy" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M275.705,424.271c1.721,28.426-1.165,57.145-4.201,85.777
                            c-9.282,1.326-27.855,5.527-56.212,12.061l0,0c-3.359-23.156-7.124-49.998-10.547-75.131
                            c33.301-11.828,57.037-19.309,71.208-22.438"/>
                    </g>
                    <g id="Fx">
                        <path id="path-Fx" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M258.438,344.176c6.354,21.375,11.043,36.686,13.91,52.122
                            c1.725,9.283,2.791,18.611,3.357,27.973c-14.17,3.131-37.66,10.879-70.961,22.707l0,0c-2.095-15.379-4.063-30.118-5.731-42.981
                            c-1.504-11.597-2.973-22.63-4.364-32.988c29.111-13.149,50.456-22.004,64.035-26.562"/>
                    </g>
                    <g id="E">
                        <path id="path-E" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M194.402,370.738c29.111-13.15,50.456-22.004,64.035-26.563
                            c-7.619-25.632-17.388-59.718-29.53-113.473l0,0c-0.963,1.692-1.891,3.237-2.784,4.583c-5.188,7.819-9.209,8.931-14.572,10.557
                            c-5.362,1.626-12.065,3.765-17.036,7.451c-4.97,3.686-8.208,8.918-9.671,15.997c-1.463,7.079-1.149,16.003,0.93,34.114
                            c1.843,16.051,5.074,39.316,8.874,67.603"/>
                    </g>
                    <g id="Dz">
                        <path id="path-Dz" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M258.438,344.176c7.694-2.78,15.371-5.395,23.028-7.844
                            c-0.011-0.125-0.021-0.249-0.03-0.373c-0.398-4.843-0.813-9.708-1.225-14.535c-0.826-9.653-1.643-19.125-2.511-28.534
                            c-0.868-9.409-1.787-18.742-2.778-28.123c-2.901-27.435-6.195-54.774-10.703-85.587l0,0c-7.259,6.304-13.144,13.424-18.265,21.207
                            c-6.899,10.485-12.413,22.174-17.046,30.316c12.142,53.755,22.157,88.11,29.776,113.742"/>
                    </g>
                    <g id="Dy">
                        <path id="path-Dy" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M281.466,336.332c7.014-2.244,14.013-4.349,20.995-6.315
                            c0.252-2.125,0.502-4.25,0.746-6.377c0.584-5.063,1.142-10.145,1.658-15.218c1.037-10.146,1.928-20.236,2.596-30.34
                            c0.67-10.104,1.121-20.197,1.355-30.351c0.678-29.424-0.254-58.66-2.805-90.004l0,0c-9.074,2.243-18.374,6.076-26.356,10.592
                            c-5.787,3.274-10.882,6.907-15.436,10.861c4.508,30.813,8.048,58.422,10.949,85.857c0.992,9.38,1.91,18.714,2.779,28.123
                            c0.869,9.409,1.685,18.88,2.51,28.534c0.413,4.826,0.827,9.691,1.225,14.534c0.01,0.124,0.021,0.249,0.031,0.373"/>
                    </g>
                    <g id="Dx">
                        <path id="path-Dx" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M302.46,330.017c6.138-1.729,12.263-3.35,18.373-4.863
                            c11.09-36.711,25.207-82.263,26.646-160.067l0.247,0.27c-5.414-4.008-11.505-7.925-19.319-9.239
                            c-6.591-1.108-14.406-0.365-22.396,1.61c2.552,31.344,3.729,60.85,3.051,90.274c-0.232,10.154-0.686,20.248-1.354,30.351
                            s-1.56,20.194-2.597,30.34c-0.519,5.072-1.075,10.153-1.657,15.218c-0.246,2.127-0.494,4.252-0.746,6.377"/>
                    </g>
                    <g id="C">
                        <path id="path-C" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M397.729,311.683c-25.418,2.578-51.051,7.068-76.896,13.472
                            l0.248,0.27c11.088-36.711,25.205-82.263,26.646-160.067c4.335,3.209,8.235,6.475,12.243,8.51
                            c9.012,4.576,18.554,2.92,25.619,2.371c7.064-0.549,11.652,0.009,15.593,1.996c3.938,1.987,7.231,5.403,9.098,9.391
                            s2.304,8.549-0.741,31.954c-2.688,20.662-8.088,56.01-10.795,85.321c-0.201,2.171-0.396,4.521-0.582,7.034"/>
                    </g>
                    <g id="Bz">
                        <path id="path-Bz" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M393.945,373.923c-28.908,2.396-57.953,6.978-87.139,13.739
                            c1.088-10.278,2.834-20.821,5.367-31.561c2.348-9.945,5.371-20.058,8.66-30.948l0.246,0.27
                            c25.844-6.402,51.477-10.893,76.896-13.471l0.187-0.02c-1.182,15.854-2.097,38.139-2.722,62.157"/>
                    </g>
                    <g id="By">
                        <path id="path-By" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M394.191,374.192c-28.908,2.396-57.953,6.977-87.138,13.738
                            l-0.247-0.27c-2.199,20.804-1.697,40.518,0.434,58.549c28.742-5.287,57.506-8.744,86.287-10.369l0.971,0.23
                            c0.094-19.997,0.414-41.613,0.942-61.983"/>
                    </g>
                    <g id="Bx">
                        <path id="path-Bx" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M394.363,497.765c-24.891,0.674-49.635,2.424-74.229,5.252
                            c-1.496-4.424-2.945-9.025-4.32-13.869c-3.623-12.771-6.719-27.215-8.574-42.938l0.246,0.271
                            c28.743-5.287,57.506-8.744,86.288-10.369l0.724-0.039c-0.041,8.723-0.039,17.137,0.006,25.006
                            c0.082,13.789,0.299,25.902,0.619,36.943"/>
                    </g>
                    <g id="A">
                        <path id="path-A" fill="#273D43" stroke="#010202" stroke-miterlimit="10" d="M395.123,498.021c0.201,6.877,0.442,13.338,0.717,19.529
                            c1.16,26.121,2.916,47.463,1.982,65.037c-1.992,37.51-16.244,57.848-32.126,70.664c-15.883,12.816-33.396,18.113-51.973,18.174
                            c-2.199,0.008-4.413-0.059-6.634-0.201c42.773-22.658,44.396-61.619,38.563-92.568c-5.148-27.313-16.104-48.385-25.271-75.369
                            c24.595-2.828,49.339-4.58,74.229-5.252"/>
                    </g>
                </g>

                <g id="rigidities-texts" transform="translate(185,160)">
                    <text id="text-CenterH" pointer-events="none" transform="matrix(1 0 0 1 97.5271 274.0024)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-E" pointer-events="none" transform="matrix(1 0 0 1 24.1936 160.002)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Dz" pointer-events="none" transform="matrix(1 0 0 1 63.8606 117.335)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Dy" pointer-events="none" transform="matrix(1 0 0 1 97.5271 91.562)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Dx" pointer-events="none" transform="matrix(1 0 0 1 133.8606 82.3354)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-C" pointer-events="none" transform="matrix(1 0 0 1 177.8596 100.6685)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Bz" pointer-events="none" transform="matrix(1 0 0 1 160.5266 204.6685)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-By" pointer-events="none" transform="matrix(1 0 0 1 155.1936 262.269)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Bx" pointer-events="none" transform="matrix(1 0 0 1 160.5266 321.3345)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-A" pointer-events="none" transform="matrix(1 0 0 1 177.8596 425.3345)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-CenterB" pointer-events="none" transform="matrix(1 0 0 1 116.9065 438.0024)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-G" pointer-events="none" transform="matrix(1 0 0 1 56.5437 442.0024)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Fx" pointer-events="none" transform="matrix(1 0 0 1 41.8606 250.002)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                    <text id="text-Fy" pointer-events="none" transform="matrix(1 0 0 1 51.2375 330.0024)" font-family="'Helvetica Neue',Helvetica,Arial,sans-serif" font-size="30">2</text>
                </g>
            </g>
            </svg>
        `;
    }

    registerEvents() {
        super.registerEvents();
        this.registerUIEvent("setOtherInsoleData", this.setOtherInsoleData.bind(this));
        //this.registerUIEvent("setInsoleData", this.setInsoleData.bind(this));
    }

    disable() {
        $(this.div).prop('disabled', true);
    }

    enable() {
        $(this.div).prop('disabled', false);
    }

    hide(){
        $(this.div).hide();
    }

    show(){
        $(this.div).show();
    }

    /*
    setInsoleData(data){
        this.insoleData = data.args;
        this.addInsoleInfos(data.args);
    }
    */

    generateInsoleDataTable(data) {
        var table = $('<table/>', { 'class' : 'rigidity-widget-table insole-data-table', 'style' : 'user-select: none;' });
        table.append(`<tr><td nowrap>${this.attr.footSizeStr}</td><td style='text-align: right;'>${data.footsizeStr}</td></tr>`);
        table.append(`<tr><td nowrap>${this.attr.footWidthStr}</td><td style='text-align: right;'>${data.footwidthStr}</td></tr>`);
        table.append(`<tr><td nowrap>${this.attr.widthStr}</td><td style='text-align: right;'>${data.thicknessStr}</td></tr>`);
        table.append(`<tr><td nowrap>${this.attr.recessStr}</td><td style='text-align: right;'>${data.recess}</td></tr>`);

        var anteroStr = data.activeAntero ? "OUI" : "NON";
        table.append(`<tr><td nowrap>${this.attr.anteroLabel}</td><td style='text-align: right;'>${anteroStr}</td></tr>`);

        var angle = parseInt(data.degAngle);
        var str = angle > 0 ? "varus" : (angle < 0 ? "valgus" : "");
        var angleStr = str + " " + Math.abs(angle) + "°";
        table.append(`<tr><td nowrap>${this.attr.angleLabel}</td><td style='text-align: right;'>${angleStr}</td></tr>`);

        var heelAdjustStr = "";
        switch(data.heelAdjust) {
        case "none":        heelAdjustStr = this.attr.heelAdjustOptionNone; break;
        case "stabiliser":  heelAdjustStr = this.attr.heelAdjustOptionStabilizer; break;
        case "flatheel50":  heelAdjustStr = this.attr.heelAdjustOptionFlatHeel50; break;
        case "flatheel100": heelAdjustStr = this.attr.heelAdjustOptionFlatHeel100; break;
        case "angulation": heelAdjustStr = this.attr.heelAdjustOptionAngulation; break;
        default: return     heelAdjustStr = this.attr.heelAdjustOptionNone; break;
        }
        table.append(`<tr><td nowrap>${this.attr.heelAdjustLabel}</td><td style='text-align: right;'>${heelAdjustStr}</td></tr>`);

        var reliefStr = "";
        switch(data.reliefElt) {
        case "none":  reliefStr = this.attr.reliefOptionNone; break;
        case "arc":   reliefStr = "ARC"; break;
        case "arc23": reliefStr = "ARC 2/3"; break;
        case "arc34": reliefStr = "ARC 3/4"; break;
        case "brc":   reliefStr = "BRC"; break;
        default:      reliefStr = this.attr.reliefOptionNone; break;
        }
        table.append(`<tr><td nowrap>${this.attr.reliefLabel}</td><td style='text-align: right;'>${reliefStr}</td></tr>`);

        if( data.reliefElt !== "none" ) {
            table.append(`<tr><td nowrap>${this.attr.reliefHeightLabel}</td><td style='text-align: right;'>${data.eltHeight}</td></tr>`);
        }

        if( data.activeAntero ) {
            table.append(`<tr><td nowrap>${this.attr.anteroWidthLabel}</td><td style='text-align: right;'>${data.anteroThick} mm</td></tr>`);
        }

        if( data.archHeight ) {
            table.append(`<tr><td nowrap>${this.attr.archHeightLabel}</td><td style='text-align: right;'>${data.archHeight} mm</td></tr>`);
        }

        if( data.heelHeight ) {
            table.append(`<tr><td nowrap>${this.attr.heelHeightLabel}</td><td style='text-align: right;'>${data.heelHeight} mm</td></tr>`);
        }
        if( data.archExtHeight ) {
            table.append(`<tr><td nowrap>${this.attr.archExtHeightLabel}</td><td style='text-align: right;'>${data.archExtHeight} mm</td></tr>`);
        }

        var adHeelHeight = data.adHeelHeight ? data.adHeelHeight : 0;
        var adArchExtHeight = data.adArchExtHeight ? data.adArchExtHeight : 0;
        table.append(`<tr><td nowrap>${this.attr.archCorrectionLabel}</td><td style='text-align: right;'>${data.adArchHeight} mm</td></tr>`);
        table.append(`<tr><td nowrap>${this.attr.heelCorrectionLabel}</td><td style='text-align: right;'>${adHeelHeight} mm</td></tr>`);
        table.append(`<tr><td nowrap>${this.attr.archExtCorrectionLabel}</td><td style='text-align: right;'>${adArchExtHeight} mm</td></tr>`);

        return table;
    }

    setOtherInsoleData(data){
        this.otherInsoleData = data.args;
        this.addOtherInsoleInfos(data.args);
    }

    addOtherInsoleInfos(data) {
        if(!data.footside){
            throw new errors.RuntimeError("Error : to setup other insole data in the rigidity widget you need to send the footside.");
        }

        // build the svg graph to display
        var svg = $(this.svgCode);
        svg.css('max-width', this.attr.svgMaxWidth);
        svg.css('padding-left', this.attr.svgPaddingLeft);
        svg.css('padding-right', this.attr.svgPaddingRight);
        _.each(this.zoneDef, (zone) => {
            // initialize zones default values
            this.setWidgetValue(svg, zone, 2);
        });
        _.each(data.rigidities, (val, zone) => {
            this.setWidgetValue(svg, zone, val);
        });
        if( data.footside === "left" ) {
            // set text in the right reading direction (re-symmetrise them) by modifying original transform
            svg.find('#rigidities-texts').find('text').each(function() {
                var originalTransform = $(this).attr('transform');
                $(this).attr('transform', originalTransform + " translate(15, 0) scale(-1, 1)");
            });
        }

        var content = `
            <div class="dualbox dualbox-rigidities-tooltip">
                <div class="row">
                    <div class="rigidity-widget rigidity-widget-${data.footside}" style="max-width: 190px; padding-left: 15px; padding-right: 15px;">
                        ${svg[0].outerHTML}
                    </div>
                </div>
                <div class="row" style="margin-top: 20px;">
                    <div style="padding-left: 10px; padding-right: 10px; width: 100%;">
                        <table class="rigidity-widget-table">
                            <tr><td nowrap="">${this.attr.footSizeStr}</td><td style="text-align: right;">${data.footsize}</td></tr>
                            <tr><td nowrap="">${this.attr.footWidthStr}</td><td style="text-align: right;">${data.footwidth}</td></tr>
                            <tr><td nowrap="">${this.attr.widthStr}</td><td style="text-align: right;">${data.thickness}</td></tr>
                            <tr><td nowrap="">${this.attr.recessStr}</td><td style="text-align: right;">${data.recess}</td></tr>
                        </table>
                    </div>
                </div>
            </div>`;

        var otherInsoleInfos = $('<div/>', {
            "class": "dualbox other-insole-infos",
            "style": "text-align: center;"
        }).append($('<hr/>'))
          .append(
              $('<a/>', {
                  "role"  : "button",
                  "href"  : "#",
                  "class" : "other-insole-link",
                  "style" : "text-align: center; cursor: pointer; white-space: nowrap;",
                  "title" : this.attr.linkTxt,

                  /* bootstrap popover stuff */
                  "data-toggle" : "popover",
                  "data-placement" : "left",
                  "data-trigger" : "focus",
                  "data-container" : "body",
                  "data-html" : true,
                  "data-original-title" : this.attr.linkTxt,
                  "data-content" : content,
              }).append(this.attr.linkTxt)
          );

        $(this.div).find('.other-insole-infos').remove();
        $(this.div).append(otherInsoleInfos);
        $('a.other-insole-link').popover({ 'container' : 'body' }); // initialize the popover button
    }

    import( rig ) {
        this.val = this.getJson(rig);
        _.each( this.zoneDef, (zone) =>  {
            // initialize zones default values
            this.setWidgetValue(this.svg, zone, this.val[zone]);
        });
        this.overrideInput = true; // as if user changed them
    }

    // show the symmetric svg (left foot)
    applySymmetry() {
        if( this.rigidityWidget.is('.rigidity-widget-right') ) {
            // set class rigidity-widget-left to symmetrise svg
            this.rigidityWidget.removeClass('rigidity-widget-right').addClass('rigidity-widget-left');

            // set text in the right reading direction (re-symmetrise them) by modifying original transform
            this.svg.find('#rigidities-texts').find('text').each(function() {
                var originalTransform = $(this).attr('transform');
                $(this).attr('transform', originalTransform + " translate(15, 0) scale(-1, 1)");
            });
        }
    }

    // show the normal svg (right foot)
    removeSymmetry() {
        if( this.rigidityWidget.is('.rigidity-widget-left') ) {
            // set class rigidity-widget-right for normal svg
            this.rigidityWidget.removeClass('rigidity-widget-left').addClass('rigidity-widget-right');
        }
    }

    // support all formats (pre and post json migration)
    getJson( obj ) {
        if( obj instanceof JSONObject ) {
            return obj.get(); // obj is a JSONObject
        }
        else if( Type.matchJSON(obj) && Type.matchJSON(obj).name == "json" )  {
            var json = Type.deserialize(obj);
            return json.get(); // obj is a serialized JSONObject
        }
        else {
            return obj;
        }
    }

    onReady() {
        // check our inputs to see if we're on the right or the left foot
        var side = this.inputValue['footSide'];
        if( side == "left" ) {
            this.applySymmetry();
        }
        else {
            this.removeSymmetry();
        }

        // apply our input rigidities
        var rigidities = !this.overrideInput && this.inputValid["rigidities"] && this.getJson(this.inputValue["rigidities"]);
        if( rigidities ) {
            _.each(rigidities, (val, zone) => {
                this.setWidgetValue(this.svg, zone, val);
            });
        }

        var insoleData = this.inputValid["insoleData"] && this.inputValue["insoleData"] !== null && this.getJson(this.inputValue["insoleData"]);
        if( insoleData ) {
            $(this.div).find('.insole-data-table').remove();
            $(this.div).append( this.generateInsoleDataTable(insoleData) );
        }

        // send data
        this.emit('data', { "rigidities" : new JSONObject(this.val) });
    }

    setZoneValue( zone, val ) {
        // check limits
        val = parseInt(val);
        if( isNaN(val) ) val = 2;
        if( val > 7 ) val = 2;
        if( val < 2 ) val = 7;
        this.val[zone] = val;
    }

    setWidgetValue( svg, zone, val ) {
        // set the val
        var zoneDiv = svg.find('#' + zone);
        var pathDiv = zoneDiv.find('path');
        var textDiv = svg.find('#text-' + zone);

        // set the right color and number
        textDiv.text(val);
        switch(val) {
            case 2: pathDiv.attr('fill', '#d3d9db'); textDiv.attr('fill', '#000'); break;
            case 3: pathDiv.attr('fill', '#b1babd'); textDiv.attr('fill', '#000'); break;
            case 4: pathDiv.attr('fill', '#8f9b9f'); textDiv.attr('fill', '#000'); break;
            case 5: pathDiv.attr('fill', '#6d7c81'); textDiv.attr('fill', '#fff'); break;
            case 6: pathDiv.attr('fill', '#4b5d63'); textDiv.attr('fill', '#fff'); break;
            case 7: pathDiv.attr('fill', '#273d43'); textDiv.attr('fill', '#fff'); break;
        }
    }

    onIncrease(zone, e) {
        e.preventDefault();
        e.stopPropagation();
        this.overrideInput = true;
        this.setZoneValue( zone, this.val[zone]+1 );
        this.setWidgetValue( this.svg, zone, this.val[zone] );
        this.trigger({ "rigidities" : this.val });
    }

    onDecrease(zone, e) {
        e.preventDefault();
        e.stopPropagation();
        this.overrideInput = true;
        this.setZoneValue( zone, this.val[zone]-1 );
        this.setWidgetValue( this.svg, zone, this.val[zone] );
        this.trigger({ "rigidities" : this.val });
    }

    static attachTo(appDesc, attrs, div) {
        // build slider from package.json desc
        var component = new RigiditiesBox(pkgDesc, appDesc, attrs);

        var attr = appDesc.attr || {};
        var svg = $(component.svgCode);
        svg.css('max-width', attr.svgMaxWidth);
        svg.css('padding-left', attr.svgPaddingLeft);
        svg.css('padding-right', attr.svgPaddingRight);

        // if not readonly, bind left click and right click
        if( attr.readonly !== true ) {
            $(svg).find('#rigidities-zones').find('g').each(function() {
                $(this).on('click', component.onIncrease.bind(component, $(this).attr('id')));
                $(this).on('contextmenu', component.onDecrease.bind(component, $(this).attr('id')));
            });
        }

        component.rigidityWidget = $('<div/>', {
            class: 'rigidity-widget rigidity-widget-right',
        }).append(svg);

        component.svg = component.rigidityWidget.find('svg');

        // instanciate div from app.json parameters
        component.div = $('<div>').append(component.rigidityWidget);

        // initialize
        _.each(component.zoneDef, function (zone) {
            // init our value to 2 for this zone
            component.setZoneValue( zone, 2 );
            component.setWidgetValue(component.svg, zone, 2);
        });

        // append to param div and return the slider
        $(div).append(component.div);
        return component;
    }
}

module.exports = RigiditiesBox;
