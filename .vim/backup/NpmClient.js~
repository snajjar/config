var cp = require('child_process');
var _ = require('lodash');
var colors = require('colors');
var dpmJson = require('@dualbox/dualbox-dpm/package.json');

// shortcut
var registry = dpmJson.registry;

function execSync(cmd, options) {
    if( !options ) options = {};

    var output = cp.execSync(cmd, options);
    if( output ) {
        var outputStr = output.toString('utf8');
        outputStr = outputStr.substr(0, outputStr.length-1); // remove the \n
        return outputStr;
    }
    else {
        return null;
    }
}

class NpmClient {
    constructor( path ) {
        this.path = path;
        this.infos = null;
    }

    execSync(cmd, options) {
        if( !options ) options = {};

        // set path for the command
        if( !options.cwd ) {
            options.cwd = this.path;
        }

        //console.log('exec ' + cmd.green + ' from ' + options.cwd.yellow);
        return execSync(cmd, options);
    }

    // version is optional
    install( name, version ) {
        var versionStr = version ? "@" + version : "";
        this.execSync('npm install ' + name + versionStr + ' -s --registry ' + registry);
    }

    remove( name ) {
        this.execSync('npm remove ' + name + ' -s --registry ' + registry);
    }

    link( name ) {
        this.execSync('npm link ' + name + ' -s --registry ' +  registry);
    }

    unlink( name ) {
        this.execSync('npm remove ' + name + ' -s --registry ' +  registry);
    }

    // p: (optional) link folder
    publishLink( p ) {
        if( p ) {
            this.execSync('npm link -s --registry ' + registry, { cwd: p });
        }
        else {
            this.execSync('npm link -s --registry ' + registry);
        }
    }

    // p: (optional) link folder
    unpublishLink( p ) {
        if( p ) {
            this.execSync('npm remove -s --registry ' + registry, { cwd: p });
        }
        else {
            this.execSync('npm remove -s --registry ' + registry);
        }
    }

    whoami() {
        try {
            return this.execSync("npm whoami --registry " + dpmJson.registry, { stdio: ['pipe', 'pipe', 'ignore'] });
        }
        catch(e) {
            return null;
        }
    }

    build() {
        this.execSync("npm run build");
    }

    info() {
        if( !this.infos ) {
            var jsonStr = this.execSync('npm view --json --registry ' +  dpmJson.registry, {
                stdio: ['pipe', 'pipe', 'ignore'] });
            this.infos = JSON.parse(jsonStr).data;
        }
        return this.infos;
    }

    versionInfo( name, version ) {
        var jsonStr = this.execSync('npm view ' + name + '@' + version + ' --json --registry ' +  dpmJson.registry, {
                stdio: ['pipe', 'pipe', 'ignore'] });
        return JSON.parse(jsonStr).data;
    }

    getPrefix() {
        return this.execSync('npm config get prefix');
    }
}

module.exports = NpmClient;
