var description = require('./package.json');
var DualBox = require('@dualbox/dualbox');
var XTHREE = require('@dualbox/dualbox-lib-xthree');
var DualboxTypesAll3D = require('@dualbox/dualbox-type-all3d');

var JSZip = require('jszip');

/**
 *  A simple conditional module for DualBox.
 *  @constructor
 *  @extends {DualBox.Module}
 */
var PBRCubeMapLoader = function(attrs){
    DualBox.Module.call(this, description, attrs);
    this.setParallel(false);
};

PBRCubeMapLoader.prototype = Object.create(DualBox.Module.prototype);
PBRCubeMapLoader.prototype.constructor = PBRCubeMapLoader;

// [Abstract] See DualBox.Module
PBRCubeMapLoader.prototype.compute = function(input, response){
    this.debug( "Computing output of PBRCubeMapLoader" );

    var that = this;

    // Get the images out of the zip file
    var dataUrls = {
        specular:[{}, {}, {}, {}, {}, {}],
        diffuse:{}
    };
    var names = ['px','nx','py','ny','pz','nz'];
    var checkCompletion = function(){
        var res = Object.keys(dataUrls.specular[0]).length === names.length &&
            Object.keys(dataUrls.specular[1]).length === names.length &&
            Object.keys(dataUrls.specular[2]).length === names.length &&
            Object.keys(dataUrls.specular[3]).length === names.length &&
            Object.keys(dataUrls.specular[4]).length === names.length &&
            Object.keys(dataUrls.specular[5]).length === names.length &&
            Object.keys(dataUrls.diffuse).length === names.length;
        return res;
    };

    // Callback when all zipped images are loaded.
    var buildCubeTextures = function(){

        var cubeMapMip = [null, null, null, null, null, null];
        var loaded_cubes = 0;
        var loadFunc = function(texture){
            var dismiss = true;
            for(var i=0; i<cubeMapMip.length; ++i){
                if(cubeMapMip[i].uuid === texture.uuid){
                    dismiss = false;
                    break;
                }
            }
            if(!dismiss){
                loaded_cubes++;
                if(loaded_cubes === 7){
                    var output = {
                        specular0:cubeMapMip[0],
                        specular1:cubeMapMip[1],
                        specular2:cubeMapMip[2],
                        specular3:cubeMapMip[3],
                        specular4:cubeMapMip[4],
                        specular5:cubeMapMip[5],
                        diffuse:cubeMapMip[6]
                    };
                    response.send(output);
                }
            }
        };
        for(var i=0; i<7;++i){
            var set = null;
            if(i<6){
                set = dataUrls.specular[i];
            }else{
                set = dataUrls.diffuse;
            }
            var format = '.'+input.imageFormat;
            var urls = [
                set.px, set.nx,
                set.py, set.ny,
                set.pz, set.nz
            ];
            var loader = new XTHREE.CubeTextureLoader();
            cubeMapMip[i] = loader.load(
                urls,
                loadFunc
            );
        }
    };


    var that = this;
    JSZip.loadAsync(input.zip).then(
        function (zip) {
            for(var i=0; i<names.length; ++i){
                var img_name = "diffuse/"+names[i]+"."+input.imageFormat;
                var f = zip.file(img_name);
                if(f === undefined || f === null){
                    that.error('The zip file loaded by '+that.id+' has no file '+img_name);
                }
                f.async("base64").then(
                    (function(){
                        var ii = i;
                        return function(data){
                            dataUrls.diffuse[names[ii]] = "data:image/"+input.imageFormat+";base64,"+data;
                            if(checkCompletion()){
                                buildCubeTextures();
                            }
                        }
                    })()
                );
            }
            for(var k=0; k<6; ++k){
                for(var i=0; i<names.length; ++i){
                    var img_name = "specular/0"+k+"_"+names[i]+"."+input.imageFormat;
                    var f = zip.file(img_name);
                    if(f === undefined || f === null){
                        that.error('The zip file loaded by '+that.id+' has no file '+img_name);
                    }
                    f.async("base64").then(
                        (function(){
                            var ii = i;
                            var kk = k;
                            return function(data){

                                dataUrls.specular[kk][names[ii]] = "data:image/"+input.imageFormat+";base64,"+data;

                                var completed = checkCompletion();
                                if(completed){
                                    buildCubeTextures();
                                }
                            }
                        })()
                    );
                }
            }
        }
    ).catch(
        function(reason) {
            that.error('Cannot read zip file : Zip load has been rejected (PBRCubeMapLoader : '+reason+').');
        }
    );
};

module.exports = PBRCubeMapLoader;

