var DualBox = require('@dualbox/dualbox');
var description = require('./package.json');

var File = require('@dualbox/dualbox-type-file');

var JSZip = require('jszip');

/**
 *  Module to get the file content in a zip.
 *  This module is smart and will return :
 *  @constructor
 *  @extends {DualBox.Module}
 */
var ZipExtractFiles = function(attrs){
    DualBox.Module.call(this, description, attrs);
};
ZipExtractFiles.prototype = Object.create(DualBox.Module.prototype);
ZipExtractFiles.prototype.constructor = ZipExtractFiles;

// [Abstract] See DualBox.Module
ZipExtractFiles.prototype.compute = function(input, response){
    this.debug( "Computing output of ZipExtractFiles" );

    var that = this;
    JSZip.loadAsync(input.zip.toArrayBuffer()).then(
        function (zip) {
            var names = [];
            zip.forEach(function (relativePath, file){
                // push in the list if it is not a folder
                if(relativePath[relativePath.length-1] !== "/"){
                    names.push(relativePath);
                }
            });
            var files = [];
            for(var i=0; i<names.length; ++i){
                var fn = names[i];
                var fext = fn.split('.').pop();
                var f = zip.file(fn);
                if(f === null){
                    // check for jpeg shit.
                    if(fext === "jpeg"){
                        f = zip.file(fn.slice(0,fn.length-4)+"jpg");
                    }else if(fext === "jpg"){
                        f = zip.file(fn.slice(0,fn.length-3)+"jpeg");
                    }
                }
                if(f === null){
                    throw "Cannot find the requested file in the zip. Module concerned : "+that.id+" File concerned : "+fn;
                }

                fn = fn.slice(0,fn.length-fext.length-1);
                var closure = function(){
                        var filename = fn;
                        var extension = fext;
                        return function(data){
                            files.push(new File(data,extension,filename));
                            if(files.length === names.length){
                                files.sort(function(a,b){
                                    return a.getName().localeCompare(b.getName());
                                });
                                var output = {
                                    files:files
                                };
                                response.send(output);
                            }
                        };
                };
                f.async("arraybuffer").then(
                    closure()
                );
            }
        }
    ).catch(
        function(reason) {
            console.error('Cannot read zip file ('+ input.filename+ ') : Zip load has been rejected : '+reason+'.');
        }
    );
};

module.exports = ZipExtractFiles;

