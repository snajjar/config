/* eslint-env es6 */
var css = require('css');
var fs = require('fs-extra');
var path = require('path');

var cssDir = "./dist/css";
var fontAwesomePath = path.dirname(require.resolve('@fortawesome/fontawesome-free/package.json'));

// copy css
console.log("Copying css files...");
fs.copySync(path.join(fontAwesomePath,'css/all.min.css'), 'dist/css/font-awesome.min.css');

// copy the fonts
console.log("Copying font files...");
fs.copySync(path.join(fontAwesomePath, 'webfonts/'), 'dist/webfonts/');

// now, inline the font into css using base64
var inlineFont = function( filePath ) {
    // read binary data
    var bitmap = fs.readFileSync(filePath);

    // convert binary data to base64 encoded string
    var base64 = new Buffer(bitmap).toString('base64');

    return "url(data:font/truetype;charset=utf-8;base64," + base64 + ")";
};

var getFontPath = function( urlFontPath ) {
    var fontFilePath = urlFontPath;
    if( fontFilePath.indexOf('?') !== -1 ) {
        fontFilePath = fontFilePath.split('?')[0];
    }
    if( fontFilePath.indexOf('#') !== -1 ) {
        fontFilePath = fontFilePath.split('#')[0];
    }
    fontFilePath = "./" + path.join(cssDir, fontFilePath);
    return fontFilePath;
};

// for each css file
fs.readdir(cssDir, (err, files) => {
    files.forEach(file => {
        var cssFilePath = path.join(cssDir, file);
        var fileContent = fs.readFileSync(cssFilePath, "utf8");
        console.log('Base64 inlining fonts in css file: ' + cssFilePath);

        // find the url() definitions
        var regexpString = new String(fileContent);
        var urlRegexp = /url\((.*?)\)*/g;
        var match = urlRegexp.exec(regexpString);
        var nbMatch = 0;
        while (match != null) {
            console.log('Analyzing url: ' + match[1]);

            // find the font file
            var originalUrl = match[0];

            // get the font file path (clean path)
            var fontFilePath = getFontPath( match[1] );

            // convert them to dataURI
            var fontDataURI = inlineFont( fontFilePath );

            // replace it in the original string
            console.log('   replacing ' + originalUrl + ' with inlined version');
            fileContent = fileContent.replace(originalUrl, fontDataURI);

            nbMatch += 1;
            match = urlRegexp.exec(fileContent);
        }

        if( nbMatch == 0 ) {
            console.error('Error: no url() tag found. No fonts were inlined.');
        }
        else {
            console.log('End of url() matching');
        }

        // when done, overwrite the css file
        fs.writeFile(cssFilePath, fileContent);
    });
})
