var description = require('./package.json');
var DualBox = require('@dualbox/dualbox');
var XTHREE = require('@dualbox/dualbox-lib-xthree');
var DualboxTypesAll3D = require('@dualbox/dualbox-type-all3d');

var JSZip = require('jszip');

var getFileInZip = function(file, callback){
    JSZip.loadAsync(file.getData()).then(
        function (zip) {
            // Auto find the file in zip.
            // Note that this module works on zip file only
            // if there is no more than 1 file.
            var fn = "";
            zip.forEach(function (relativePath, file){
                fn = relativePath;
            });
            var f = zip.file(fn);
            var fext = fn.split('.').pop().toLowerCase();
            if(fext === "obj"){
                f.async("string").then(
                    function(data){
                        callback(data,"string",fext);
                    }
                );
            }else{
                throw new DualBox.errors.RuntimeError('Cannot read file in zip, the file found in the zip is not a supported format, please provide OBJ or STL (not binary). Detected type is '+fext);
            }
        }
    ).catch(
        function(reason) {
            throw new DualBox.errors.RuntimeError('Cannot read zip file ('+ file.getName() + ') : Zip load has been rejected : '+reason+'.');
        }
    );
};


/**
 *  A simple conditional module for DualBox.
 *  @constructor
 *  @extends {DualBox.Module}
 */
var FileToBezierPaths = function(attrs){
    DualBox.Module.call(this, description, attrs);
    this.setParallel(false);
};

FileToBezierPaths.prototype = Object.create(DualBox.Module.prototype);
FileToBezierPaths.prototype.constructor = FileToBezierPaths;

// [Abstract] See DualBox.Module
FileToBezierPaths.prototype.compute = function(input, response){
    this.debug( "Computing output of FileToBezierPaths" );

    var done = function(g){

        var output = {
            beziers:g
        };
        response.send(output);
    };


    var arr_b = [];
    if(input.file === null){
        done(arr_b);
    }else{
        switch(input.file.getExtension()){
            case "obj":
                arr_b = XTHREE.BezierPath.fromOBJ(input.file.toUTF8String());
                done(arr_b);
            break;
            case "zip":
                getFileInZip(input.file, function(data, type, ext){
                    switch(ext){
                        case "obj":
                            arr_b = XTHREE.BezierPath.fromOBJ(data);
                            done(arr_b);
                        break;
                        default:
                            throw new DualBox.errors.TypeError("Error in module " + this.id +" the file extension in the zip file. Please provide OBJ file. Detected is : "+ext);
                        break;
                    };
                });
            break;
            default:
                throw new DualBox.errors.TypeError("Error in module " + this.id +" the file extension is not supported. Please provide OBJ file.");
            break;
        };
    }
};

module.exports = FileToBezierPaths;

