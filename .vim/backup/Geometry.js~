var Dualbox = require('@dualbox/dualbox');

import { BufferTriGeometry } from '@dualbox/dualbox-lib-xthree';

var name = "Geometry";

var inheritedToJSON = BufferTriGeometry.prototype.toJSON;
BufferTriGeometry.prototype.toJSON = function(options){
    var res = inheritedToJSON.call(this, options);
    res.metadata.__dualbox = {
        type:name
    };
    return res;
};

var inheritedFromJSON = BufferTriGeometry.prototype.fromJSON;
BufferTriGeometry.prototype.fromJSON = function(json){
    if(json.metadata && Object.keys(json).length === 1 || json.data && Object.keys(json).length === 0){
        return new BufferTriGeometry();
    }else{
        return inheritedFromJSON.call(this, json);
    }
};

var inheritedToWorkerData = BufferTriGeometry.prototype.toWorkerData;
BufferTriGeometry.prototype.toWorkerData = function(options){
    var res = inheritedToWorkerData.call(this, options);
    res.metadata.__dualbox = {
        type:name
    };
    return res;
};

var inheritedFromWorkerData = BufferTriGeometry.prototype.fromWorkerData;
BufferTriGeometry.prototype.fromWorkerData = function(json){
    if(json.metadata && Object.keys(json).length === 1 || json.data && Object.keys(json).length === 0){
        return new BufferTriGeometry();
    }else{
        return inheritedFromJSON.call(this, json);
    }
};

Dualbox.registerType({
    name:name,
    jsClass:BufferTriGeometry,
    desc:"This type defines a classic triangular geometry.",
    matchJSON:function(json){
        var db_check = json && json.metadata && ((json.metadata.__dualbox && json.metadata.__dualbox.type === name) || (!json.metadata.__dualbox && json.metadata.type === name));
        var old_check = json && json.metadata && json.metadata.type === "BufferTriGeometry";
        var three_check = json && json.metadata && json.metadata.type === "BufferGeometry" && !json.metadata.__xthree;
        return db_check || old_check || three_check;
    }
});

module.exports = BufferTriGeometry;

