<style>
    .node-result {
        border-bottom: 1px solid rgba(0,0,0,0.1);
        padding-top: 10px;
        padding-left: 5px;
        padding-right: 5px;
        padding-bottom: 5px;
        cursor: pointer;
    }

    .node-result:hover {
        background-color: #eee;
    }

    .node-result.selected {
        background-color: #ddd;
    }

    .node-result.selected {
        background-color: #eee;
    }

    .node-name {
        display: block;
        width: 100%;
        margin: 0;
    }

    .node-desc {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        display: inline-block;
        max-width: 100%;
    }

    .search-nodes-results {
        max-height: 100%;
        overflow-y: scroll;
        overflow-x: hidden;
        padding-right: 15px;
    }

    .badge-node {
        width: 70px;
        text-align: center;
    }

    .noselect {
        pointer-events: none;
    }
</style>

<template>
    <div v-if="err" class="text-danger">{{err}}</p>
    <div v-else>
        <div class="row node-result" v-for="r in getDisplayableResults" v-bind:data-package="r.name" v-bind:data-short-name="displayName(r.name)">
            <div class="col noselect">
                <p class="node-name" style="margin: 0;">
                    <span>{{displayType(r.name)}}</span>
                    <b>{{displayName(r.name)}}</b>
                </p>
                <small class="node-desc"><i>{{r.description}}</i></small>
            </div>
        </div>
    </div>
</template>

<script>
import _ from 'lodash';
import swal from 'sweetalert2';

export default {
    props: [
        "view", "results",
    ],
    data: function () {
        return {
            results: null,
        };
    },
    created: function() {

    },
    mounted: function() {

    },
    methods: {
        getDisplayableResults: function() {
            return this.results.filter( function(r) {
                return !r.name.startsWith('dualbox-lib');
            });
        },

        displayName: function(n) {
            return n
                .replace('@dualbox/', '')
                .replace('dualbox-core-', '')
                .replace('dualbox-lib-', '')
                .replace('dualbox-ui-', '')
                .replace('dualbox-module-', '')
        },

        displayType: function ( name ) {
            var str = name.replace('@dualbox/', '');
            if( str.indexOf("dualbox-core") !== -1 || str.indexOf("dualbox-module") !== -1 ) {
                return '<span class="badge badge-secondary">compute</span>';
            }
            else if( str.indexOf("dualbox-ui") !== -1 ) {
                return '<span class="badge badge-success">ui</span>';
            }
        }
    }
}
</script>
