{
  "dualbox-core-if": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-if",
      "version": "*",
      "description": "If cond is true, result is ifTrue, else result is ifFalse",
      "dualbox": {
        "input": {
          "cond": {
            "type": "boolean",
            "const": true
          },
          "ifTrue": {
            "type": "*",
            "const": true
          },
          "ifFalse": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "result": {
            "type": "*"
          }
        }
      }
    }
  },
  "dualbox-core-value": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-value",
      "version": "*",
      "description": "Simple module that transmit a value",
      "dualbox": {
        "input": {
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      }
    }
  },
  "dualbox-core-from-json": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-from-json",
      "version": "*",
      "description": "Module that deserialize a DualBox structure saved in JSON",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "res": {
            "type": "*"
          }
        }
      }
    }
  },
  "dualbox-core-to-json": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-to-json",
      "version": "*",
      "description": "Module that serialize a DualBox structure to a JSON equivalent",
      "dualbox": {
        "input": {
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      }
    }
  },
  "dualbox-core-script": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-script",
      "version": "*",
      "description": "Executes the fonction provide in attrs.script. The function takes a json as a parameter and returns a json",
      "dualbox": {
        "input": {
          "json": {
            "type": "json"
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        },
        "attr": {
          "script": {
            "type": "String",
            "desc": "The string of the function to be executed"
          }
        }
      }
    }
  },
  "@dualbox/dualbox-lib-canvas": {
    "hash": "453d597e1f2e95e5c161c7630e4ede8e9a348a66",
    "pkg": {
      "name": "@dualbox/dualbox-lib-canvas",
      "version": "1.0.1",
      "description": "Safe canvas to use on browser/node, based on mathisonian/safe-canvas",
      "main": "node.js",
      "browser": "browser.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "license": "MIT",
      "optionalDependencies": {
        "canvas": "^1.5.0"
      },
      "hash": "453d597e1f2e95e5c161c7630e4ede8e9a348a66"
    }
  },
  "@dualbox/dualbox-lib-jquery": {
    "hash": "0c0da7442c5b2970b8d5c18e6b5707310c28597b",
    "pkg": {
      "_args": [
        [
          {
            "raw": "dualbox-lib-jquery@*",
            "scope": null,
            "escapedName": "dualbox-lib-jquery",
            "name": "dualbox-lib-jquery",
            "rawSpec": "*",
            "spec": "*",
            "type": "range"
          },
          "/home/home/seb/dev/test/recup"
        ]
      ],
      "_from": "dualbox-lib-jquery@*",
      "_id": "dualbox-lib-jquery@0.0.1",
      "_inCache": true,
      "_installable": true,
      "_location": "/dualbox-lib-jquery",
      "_nodeVersion": "5.3.0",
      "_npmUser": {},
      "_npmVersion": "3.10.5",
      "_phantomChildren": {},
      "_requested": {
        "raw": "dualbox-lib-jquery@*",
        "scope": null,
        "escapedName": "dualbox-lib-jquery",
        "name": "dualbox-lib-jquery",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "_requiredBy": [
        "/",
        "/dualbox-lib-bootstrap"
      ],
      "_resolved": "http://139.59.140.50:4873/dualbox-lib-jquery/-/dualbox-lib-jquery-0.0.1.tgz",
      "_shasum": "cf4424f19c1bd7a77a8bbe5eaf19b54512fc948b",
      "_shrinkwrap": null,
      "_spec": "dualbox-lib-jquery@*",
      "_where": "/home/home/seb/dev/test/recup",
      "author": {
        "name": "Sebastien Najjar",
        "email": "sebastien.najjar@gmail.com"
      },
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "jquery": "^3.2.1"
      },
      "description": "jquery for DualBox UI Components",
      "dist": {
        "shasum": "cf4424f19c1bd7a77a8bbe5eaf19b54512fc948b",
        "tarball": "http://139.59.140.50:4873/dualbox-lib-jquery/-/dualbox-lib-jquery-0.0.1.tgz"
      },
      "license": "ISC",
      "main": "import.js",
      "name": "@dualbox/dualbox-lib-jquery",
      "optionalDependencies": {},
      "readme": "ERROR: No README data found!",
      "scripts": {
        "lint": "eslint --env node --env browser **.js",
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "version": "1.0.3",
      "hash": "0c0da7442c5b2970b8d5c18e6b5707310c28597b"
    }
  },
  "@dualbox/dualbox-lib-stats": {
    "hash": "e81976fe9d2186252ac84f412a76baca72449600",
    "pkg": {
      "name": "@dualbox/dualbox-lib-stats",
      "version": "1.0.3",
      "description": "Some function around statisctics like linear regression, etc...",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "e81976fe9d2186252ac84f412a76baca72449600"
    }
  },
  "@dualbox/dualbox-lib-pure-css-loader": {
    "hash": "b54d6c839aebb0e9cefc2359746405f499d93377",
    "pkg": {
      "name": "@dualbox/dualbox-lib-pure-css-loader",
      "version": "1.0.1",
      "description": "a nice and pure css loader",
      "main": "export.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "eslint": "^4.11.0"
      },
      "devDependencies": {
        "eslint": "^4.11.0"
      },
      "optionalDependencies": {
        "browserify": "^13.0.1"
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "hash": "b54d6c839aebb0e9cefc2359746405f499d93377"
    }
  },
  "@dualbox/dualbox-lib-interpolants": {
    "hash": "c9a0108e6956766b8770629d01d4fb4edaf10b4c",
    "pkg": {
      "name": "@dualbox/dualbox-lib-interpolants",
      "version": "1.0.4",
      "description": "Interpolation utils.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "c9a0108e6956766b8770629d01d4fb4edaf10b4c"
    }
  },
  "@dualbox/dualbox-lib-three": {
    "hash": "396053985f6ac4bbffca66a81d70c37edd217971",
    "pkg": {
      "name": "@dualbox/dualbox-lib-three",
      "version": "1.0.4",
      "description": "Three js imported and packaged for Dualbox.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/exports.js --standalone THREE -o standalone/three.js && uglifyjs standalone/three.js -o standalone/three.min.js"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "396053985f6ac4bbffca66a81d70c37edd217971"
    }
  },
  "@dualbox/dualbox-lib-htmltool": {
    "hash": "952ee809ceeccc740bfa538acd62b5a663001803",
    "pkg": {
      "name": "@dualbox/dualbox-lib-htmltool",
      "version": "1.0.1",
      "description": "simple tool to convert html to json and back",
      "main": "dist/htmltool.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "prepublish": "npm run build",
        "standalone": "browserify src/htmltool.js -o standalone/htmltool.js --standalone htmltool && uglifyjs standalone/htmltool.js -o standalone/htmltool.min.js"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "himalaya": "^1.0.0",
        "html": "^1.0.0",
        "lodash": "^4.17.4",
        "paul": "^0.0.3",
        "rollupify": "^0.4.0",
        "uglifyjs": "^2.4.11",
        "x2js": "^3.1.1"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "browserify": "^14.5.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "lodash": "^4.17.4",
        "uglifyjs": "^2.4.11"
      },
      "browserify": {
        "transform": [
          [
            "rollupify",
            {}
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "hash": "952ee809ceeccc740bfa538acd62b5a663001803"
    }
  },
  "@dualbox/dualbox-lib-abb64": {
    "hash": "97517fc31522db5067170aab2207c6fe7a55d4b0",
    "pkg": {
      "name": "@dualbox/dualbox-lib-abb64",
      "version": "1.0.12",
      "description": "Convert ArrrayBuffer to base64 strings and vice versa.",
      "main": "src/ABb64.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "97517fc31522db5067170aab2207c6fe7a55d4b0"
    }
  },
  "@dualbox/dualbox-lib-font-awesome": {
    "hash": "732a557cb22c55f0312f07042fdec7d7bf946be5",
    "pkg": {
      "name": "@dualbox/dualbox-lib-font-awesome",
      "version": "5.6.4",
      "description": "A library to include font awesome 5",
      "main": "import.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "node generate-font",
        "lint": "eslint --env node --env browser --env es6 **.js"
      },
      "files": [
        "package.json",
        "import.js",
        "dist/css/*"
      ],
      "author": "",
      "license": "ISC",
      "hash": "732a557cb22c55f0312f07042fdec7d7bf946be5",
      "dependencies": {
        "@fortawesome/fontawesome-free": "^5.6.3",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "css": "^2.2.1"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "css": "^2.2.1",
        "fs-extra": "^4.0.2"
      }
    }
  },
  "@dualbox/dualbox-lib-sweetalert": {
    "hash": "58aad452dd2710bbb5a713aac0e071b2c6ab7ead",
    "pkg": {
      "name": "@dualbox/dualbox-lib-sweetalert",
      "version": "1.0.3",
      "description": "SweetAlert to be used in DualBox",
      "main": "export.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "eslint": "^4.12.1",
        "shelljs": "^0.7.8",
        "sweetalert": "^2.0.8"
      },
      "devDependencies": {
        "browserify": "^14.5.0",
        "shelljs": "^0.7.8"
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "hash": "58aad452dd2710bbb5a713aac0e071b2c6ab7ead"
    }
  },
  "@dualbox/dualbox-lib-upng": {
    "hash": "cc98a73953cf36436f5860e1477db6cf08b6c29a",
    "pkg": {
      "name": "@dualbox/dualbox-lib-upng",
      "version": "1.0.1",
      "description": "PNG encoder/decoder",
      "main": "UPNG.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "pako": "^1.0.6"
      },
      "keywords": [
        "UPNG"
      ],
      "author": "",
      "license": "ISC",
      "hash": "cc98a73953cf36436f5860e1477db6cf08b6c29a"
    }
  },
  "@dualbox/dualbox-lib-appparser": {
    "hash": "561bf25b9baab04841688f107299097aa67db4d6",
    "pkg": {
      "name": "@dualbox/dualbox-lib-appparser",
      "version": "1.0.2",
      "description": "Lib to parse a Dualbox application json file",
      "main": "dist/AppParser.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "prepublish": "npm run build",
        "standalone": "browserify src/htmltool.js -o standalone/htmltool.js --standalone htmltool && uglifyjs standalone/htmltool.js -o standalone/htmltool.min.js"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "lodash": "^4.17.4",
        "rollupify": "^0.4.0",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox-lib-htmltool": "^1.0.1"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "browserify": "^14.5.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "lodash": "^4.17.4",
        "uglifyjs": "^2.4.11"
      },
      "browserify": {
        "transform": [
          [
            "rollupify",
            {}
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "hash": "561bf25b9baab04841688f107299097aa67db4d6"
    }
  },
  "@dualbox/dualbox-lib-blobtree": {
    "hash": "41e360dc48e8fc2cc45a2a419f67e23cbbc85fd6",
    "pkg": {
      "name": "@dualbox/dualbox-lib-blobtree",
      "version": "1.0.38",
      "description": "Library to handle implicit surfaces in dualbox-3d using a blobtree.",
      "main": "dist/dualbox-blobtree.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/blobtree.js --standalone Blobtree -o standalone/blobtree.js && uglifyjs standalone/blobtree.js -o standalone/blobtree.min.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-three": "^1.0.4",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "41e360dc48e8fc2cc45a2a419f67e23cbbc85fd6",
      "dualbox": {
        "object": "Library"
      }
    }
  },
  "@dualbox/dualbox-lib-dualbox-3d-ex-postprocess": {
    "hash": "a7f85b28458f741ea7d3082c1a0cd8a3a6efd81f",
    "pkg": {
      "name": "@dualbox/dualbox-lib-dualbox-3d-ex-postprocess",
      "version": "1.0.16",
      "description": "This is a lib containing all postprocessing code that can be found in THREE repository under examples/",
      "main": "dist/dualbox-3d-ex-postprocess.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/dualbox-3d-ex-postprocess.js --standalone DualBoxPostProcess -o standalone/dualbox-3d-ex-postprocess.js && uglifyjs standalone/dualbox-3d-ex-postprocess.js -o standalone/dualbox-3d-ex-postprocess.min.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-dualbox-3d": "^1.0.39",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "a7f85b28458f741ea7d3082c1a0cd8a3a6efd81f"
    }
  },
  "@dualbox/dualbox-lib-scientifeet-podo3d": {
    "hash": "5ed7c43109591e34ada9534b6671ed7e918c8e4f",
    "pkg": {
      "name": "@dualbox/dualbox-lib-scientifeet-podo3d",
      "version": "1.0.59",
      "description": "Wrapping of podo3d into a npm lib in order to be used on DualBox.",
      "main": "src/Podo3D.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-canvas": "^1.0.1",
        "@dualbox/dualbox-lib-stats": "^1.0.3",
        "@dualbox/dualbox-lib-imagedata": "^1.0.6",
        "@dualbox/dualbox-lib-interpolants": "^1.0.4"
      },
      "devDependencies": {
        "eslint": "^4.11.0"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "5ed7c43109591e34ada9534b6671ed7e918c8e4f",
      "dualbox": {
        "object": "Library"
      }
    }
  },
  "@dualbox/dualbox-lib-bootstrap-slider": {
    "hash": "1b9fe14421bb872cfbca35e678105289e6664f4d",
    "pkg": {
      "name": "@dualbox/dualbox-lib-bootstrap-slider",
      "version": "1.0.8",
      "description": "bootstrap-slider to be used in DualBox",
      "main": "bootstrap-slider.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-jquery": "^1.0.3",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "shelljs": "^0.7.8"
      },
      "devDependencies": {
        "eslint": "^4.12.1",
        "browserify": "^14.5.0",
        "shelljs": "^0.7.8"
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "1b9fe14421bb872cfbca35e678105289e6664f4d"
    }
  },
  "@dualbox/dualbox-lib-bootstrap": {
    "hash": "20682e646a3bd262e8872195695f9a907509d555",
    "pkg": {
      "_args": [
        [
          {
            "raw": "dualbox-lib-bootstrap@*",
            "scope": null,
            "escapedName": "dualbox-lib-bootstrap",
            "name": "dualbox-lib-bootstrap",
            "rawSpec": "*",
            "spec": "*",
            "type": "range"
          },
          "/home/home/seb/dev/test/recup"
        ]
      ],
      "_from": "dualbox-lib-bootstrap@*",
      "_id": "dualbox-lib-bootstrap@0.0.1",
      "_inCache": true,
      "_installable": true,
      "_location": "/dualbox-lib-bootstrap",
      "_nodeVersion": "5.3.0",
      "_npmUser": {},
      "_npmVersion": "3.10.5",
      "_phantomChildren": {},
      "_requested": {
        "raw": "dualbox-lib-bootstrap@*",
        "scope": null,
        "escapedName": "dualbox-lib-bootstrap",
        "name": "dualbox-lib-bootstrap",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "_requiredBy": [
        "/"
      ],
      "_resolved": "http://139.59.140.50:4873/dualbox-lib-bootstrap/-/dualbox-lib-bootstrap-0.0.1.tgz",
      "_shasum": "aff215581a170f55b323f5105050fa335794ccf6",
      "_shrinkwrap": null,
      "_spec": "dualbox-lib-bootstrap@*",
      "_where": "/home/home/seb/dev/test/recup",
      "author": {
        "name": "Sebastien Najjar",
        "email": "sebastien.najjar@gmail.com"
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "files": [
        "package.json",
        "dist/*"
      ],
      "dependencies": {
        "@dualbox/dualbox-lib-jquery": "^1.0.3",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "bootstrap": "^3.3.7",
        "browserify-css": "^0.14.0"
      },
      "description": "bootstrap component for DualBox UI Components",
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "fs-extra": "^4.0.2"
      },
      "dist": {
        "shasum": "aff215581a170f55b323f5105050fa335794ccf6",
        "tarball": "http://139.59.140.50:4873/dualbox-lib-bootstrap/-/dualbox-lib-bootstrap-0.0.1.tgz"
      },
      "license": "ISC",
      "main": "import.js",
      "name": "@dualbox/dualbox-lib-bootstrap",
      "optionalDependencies": {},
      "readme": "ERROR: No README data found!",
      "scripts": {
        "lint": "eslint --env node --env browser --env es6 **.js",
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "node generate-dualbox-bootstrap.js"
      },
      "version": "1.0.14",
      "hash": "20682e646a3bd262e8872195695f9a907509d555"
    }
  },
  "@dualbox/dualbox-lib-xthree": {
    "hash": "e92aec3d5b9234077ea7549ccb3a67c0cbbf7e26",
    "pkg": {
      "name": "@dualbox/dualbox-lib-xthree",
      "version": "1.0.15",
      "description": "Classes and algorithm extending THREE js.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/exports.js --standalone THREE -o standalone/xthree.js && uglifyjs standalone/xthree.js -o standalone/xthree.min.js"
      },
      "dependencies": {
        "@babel/core": "^7.1.6",
        "@dualbox/dualbox-lib-interpolants": "^1.0.4",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "cdt2d": "^1.0.0",
        "concat-files": "^0.1.1",
        "rollup": "^0.67.3",
        "rollup-plugin-babel": "^4.0.3",
        "rollup-plugin-commonjs": "^9.2.0",
        "rollup-plugin-node-resolve": "^3.4.0",
        "rollup-plugin-terser": "^3.0.0",
        "rollupify": "^0.5.1",
        "three-full": "^11.3.2",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "rollupify",
            {}
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "e92aec3d5b9234077ea7549ccb3a67c0cbbf7e26"
    }
  },
  "@dualbox/dualbox-lib-file": {
    "hash": "aeae1d1fd293b021a9ac11d1e50d073f805baca3",
    "pkg": {
      "name": "@dualbox/dualbox-lib-file",
      "version": "1.0.16",
      "description": "A File class to manipulate files in Dualbox.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-abb64": "^1.0.12",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "aeae1d1fd293b021a9ac11d1e50d073f805baca3"
    }
  },
  "@dualbox/dualbox-type-array": {
    "hash": "883e97a450cf9aaddc7398e1e5a56f2029cc1083",
    "pkg": {
      "name": "@dualbox/dualbox-type-array",
      "version": "1.0.13",
      "description": "Dualbox type array",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "883e97a450cf9aaddc7398e1e5a56f2029cc1083",
      "dualbox": {
        "type": {
          "name": "Array",
          "desc": "An array of elements."
        }
      }
    }
  },
  "@dualbox/dualbox-lib-imagedata": {
    "hash": "122e73e6f0b45b7ada08a41eff124a94fe013649",
    "pkg": {
      "name": "@dualbox/dualbox-lib-imagedata",
      "version": "1.0.6",
      "description": "An ImageData class to manipulate images using raw arrays of pixels.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-upng": "^1.0.1",
        "@dualbox/dualbox-lib-interpolants": "^1.0.4",
        "jpeg-js": "^0.3.3",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "122e73e6f0b45b7ada08a41eff124a94fe013649"
    }
  },
  "@dualbox/dualbox-type-bezierpath": {
    "hash": "6315143873440177115fb9ae5afcf54e0651920f",
    "pkg": {
      "name": "@dualbox/dualbox-type-bezierpath",
      "version": "1.0.20",
      "description": "Dualbox type BezierPath.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "6315143873440177115fb9ae5afcf54e0651920f",
      "dualbox": {
        "type": {
          "name": "BezierPath",
          "desc": "A curve created from a Bezier definition."
        }
      }
    }
  },
  "@dualbox/dualbox-type-blending": {
    "hash": "e5d5bc866243b47efc3c235b070ec5a9b8bede59",
    "pkg": {
      "name": "@dualbox/dualbox-type-blending",
      "version": "1.0.20",
      "description": "Dualbox type Blending.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "e5d5bc866243b47efc3c235b070ec5a9b8bede59",
      "dualbox": {
        "type": {
          "name": "Blending",
          "desc": "This type defines some parameters for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-boolean": {
    "hash": "b701b138ccf6e4cab77b690bc07bf6c0d86fe92b",
    "pkg": {
      "name": "@dualbox/dualbox-type-boolean",
      "version": "1.0.13",
      "description": "Dualbox type boolean",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "b701b138ccf6e4cab77b690bc07bf6c0d86fe92b",
      "dualbox": {
        "type": {
          "name": "Boolean",
          "desc": "Type to handle standard javascript booleans."
        }
      }
    }
  },
  "@dualbox/dualbox-type-box2": {
    "hash": "2a781274299893aa8a87f4669dc944685cecfcc0",
    "pkg": {
      "name": "@dualbox/dualbox-type-box2",
      "version": "1.0.20",
      "description": "Dualbox type Box2.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "2a781274299893aa8a87f4669dc944685cecfcc0",
      "dualbox": {
        "type": {
          "name": "Box2",
          "desc": "This type defines a 2 dimensional box using two Vector2."
        }
      }
    }
  },
  "@dualbox/dualbox-type-box3": {
    "hash": "96343b393f9784e0be9df63ec189a48959a94989",
    "pkg": {
      "name": "@dualbox/dualbox-type-box3",
      "version": "1.0.20",
      "description": "Dualbox type Box3.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "96343b393f9784e0be9df63ec189a48959a94989",
      "dualbox": {
        "type": {
          "name": "Box3",
          "desc": "This type defines a 3 dimensional box using two Vector3."
        }
      }
    }
  },
  "@dualbox/dualbox-lib-dualbox-3d": {
    "hash": "3e39c0bb6f35c13803efaab200becb266418e2b1",
    "pkg": {
      "name": "@dualbox/dualbox-lib-dualbox-3d",
      "version": "1.0.39",
      "description": "DualBox-3d defines all classes and functions related to 3D processing. It's THREE.js extended to fit DualBox API.",
      "main": "dist/dualbox3d.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/dualbox3d.js --standalone THREE -o standalone/dualbox3d.js && uglifyjs standalone/dualbox3d.js -o standalone/dualbox3d.min.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-svg-intersections-modified": "^1.0.2",
        "@dualbox/dualbox-lib-upng": "^1.0.1",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "cdt2d": "^1.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "jpeg-js": "^0.3.3",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "3e39c0bb6f35c13803efaab200becb266418e2b1"
    }
  },
  "@dualbox/dualbox-type-camera": {
    "hash": "2b99120de1fdbb14a99b727116b01b53cd3c2b53",
    "pkg": {
      "name": "@dualbox/dualbox-type-camera",
      "version": "1.0.20",
      "description": "Dualbox type Camera.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "2b99120de1fdbb14a99b727116b01b53cd3c2b53",
      "dualbox": {
        "type": {
          "name": "Camera",
          "desc": "This type defines a Camera."
        }
      }
    }
  },
  "@dualbox/dualbox-lib-svg-intersections-modified": {
    "hash": "c01c0e36978ad0e5c673016c09156310e27c1c63",
    "pkg": {
      "name": "@dualbox/dualbox-lib-svg-intersections-modified",
      "version": "1.0.2",
      "description": "A library of intersection algorithms covering all SVG shape types, forked from svg-intersection 0.3.0",
      "license": "BSD",
      "repository": {
        "type": "git",
        "url": "git://github.com/effektif/svg-intersections.git"
      },
      "main": "dist/index.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "lint": "eslint --env node --env browser --env es6 **.js"
      },
      "files": [
        "dist/*"
      ],
      "keywords": [
        "intersection",
        "bezier",
        "circle",
        "ellipse",
        "line",
        "polygon",
        "rectangle",
        "path"
      ],
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "kld-affine": "^2.0.4",
        "kld-polynomial": "^0.1.3",
        "mathjs": "^3.17.0"
      },
      "engines": {
        "node": ">= 0.10.4"
      },
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "hash": "c01c0e36978ad0e5c673016c09156310e27c1c63",
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0"
      }
    }
  },
  "@dualbox/dualbox-type-cameraman": {
    "hash": "6e9b6c3727ad0c2fb08563c7b0ebe47d8cec1089",
    "pkg": {
      "name": "@dualbox/dualbox-type-cameraman",
      "version": "1.0.20",
      "description": "Dualbox type CameraMan.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "6e9b6c3727ad0c2fb08563c7b0ebe47d8cec1089",
      "dualbox": {
        "type": {
          "name": "CameraMan",
          "desc": "An advanced type to manipulate cameras."
        }
      }
    }
  },
  "@dualbox/dualbox-lib-react-uicomponent": {
    "hash": "ab76f8f180f514f4f272eca0f5a4256f00b45e50",
    "pkg": {
      "name": "@dualbox/dualbox-lib-react-uicomponent",
      "version": "1.0.62",
      "description": "Add dualbox UI element as react components",
      "main": "ReactComponent.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-jquery": "^1.0.3",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "bootstrap": "^3.3.7",
        "react": "^16.2.0",
        "react-dom": "^16.2.0"
      },
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "hash": "ab76f8f180f514f4f272eca0f5a4256f00b45e50"
    }
  },
  "@dualbox/dualbox-type-buffer": {
    "hash": "fcc43e06fe81c5dc09d1f330a0d5862da69c2d51",
    "pkg": {
      "name": "@dualbox/dualbox-type-buffer",
      "version": "1.0.12",
      "description": "Dualbox type Buffer",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "fcc43e06fe81c5dc09d1f330a0d5862da69c2d51",
      "dualbox": {
        "type": {
          "name": "Buffer",
          "desc": ""
        }
      }
    }
  },
  "@dualbox/dualbox-type-color": {
    "hash": "c4baa816c503749e4e181a636df43e69df556632",
    "pkg": {
      "name": "@dualbox/dualbox-type-color",
      "version": "1.0.20",
      "description": "Dualbox type Color.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "c4baa816c503749e4e181a636df43e69df556632",
      "dualbox": {
        "type": {
          "name": "Color",
          "desc": "This type defines a color using 3 RGB value ranging from 0 to 1."
        }
      }
    }
  },
  "@dualbox/dualbox-type-cubetexture": {
    "hash": "50011b345b490e0021ddfc9910d7087a364a8228",
    "pkg": {
      "name": "@dualbox/dualbox-type-cubetexture",
      "version": "1.0.20",
      "description": "Dualbox type CubeTexture.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "50011b345b490e0021ddfc9910d7087a364a8228",
      "dualbox": {
        "type": {
          "name": "CubeTexture",
          "desc": "A texture to be used in a 3D scene."
        }
      }
    }
  },
  "@dualbox/dualbox-type-cylindrical": {
    "hash": "206ee16d56af8c51e08bc2e33f9d70708efd8655",
    "pkg": {
      "name": "@dualbox/dualbox-type-cylindrical",
      "version": "1.0.20",
      "description": "Dualbox type Cylindrical.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "206ee16d56af8c51e08bc2e33f9d70708efd8655",
      "dualbox": {
        "type": {
          "name": "Cylindrical",
          "desc": "This type defines a position in cylindrical coordinate system : a radius, an angle theta and a y coordinate."
        }
      }
    }
  },
  "@dualbox/dualbox-type-euler": {
    "hash": "34210092443de6434037cff27292d09a9ef24697",
    "pkg": {
      "name": "@dualbox/dualbox-type-euler",
      "version": "1.0.20",
      "description": "Dualbox type Euler.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "34210092443de6434037cff27292d09a9ef24697",
      "dualbox": {
        "type": {
          "name": "Euler",
          "desc": "This type defines a 3D rotation in Euler coordinate system (x,y,z)."
        }
      }
    }
  },
  "@dualbox/dualbox-type-displacementmap": {
    "hash": "f70923a3a4327c082edf1b6b579cac3194ee4415",
    "pkg": {
      "name": "@dualbox/dualbox-type-displacementmap",
      "version": "1.0.20",
      "description": "Dualbox type DisplacementMap.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "f70923a3a4327c082edf1b6b579cac3194ee4415",
      "dualbox": {
        "type": {
          "name": "DisplacementMap",
          "desc": "This type defines a DisplacementMap."
        }
      }
    }
  },
  "@dualbox/dualbox": {
    "hash": "3ad1a314c2253455a5c98b6f5f8f6329574adc59",
    "pkg": {
      "name": "@dualbox/dualbox",
      "version": "1.0.62",
      "description": "DualBox core engine - will be renamed soon",
      "main": "dist/DualBox.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "prepublish": "npm run build",
        "lint": "eslint --env node --env browser --env es6 **.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-htmltool": "^1.0.1",
        "@dualbox/dualbox-lib-jquery": "^1.0.3",
        "@dualbox/dualbox-lib-appparser": "^1.0.2",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "colors": "^1.1.2",
        "console-group": "^0.3.3",
        "idx": "^2.4.0",
        "jszip": "^3.1.5",
        "localStorage": "^1.0.3",
        "lodash": "^4.17.4",
        "node-uuid": "^1.4.8",
        "rollupify": "^0.4.0",
        "semver": "^5.4.1",
        "sessionstorage": "^0.0.2",
        "webworker-threads": "^0.7.13"
      },
      "browserify-css": {
        "autoInject": true,
        "minify": true,
        "rootDir": "."
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ],
          [
            "rollupify",
            {}
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>, Sebastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-polyfill": "^6.26.0",
        "eslint": "^4.12.1",
        "lodash": "^4.17.4"
      },
      "hash": "3ad1a314c2253455a5c98b6f5f8f6329574adc59"
    }
  },
  "@dualbox/dualbox-type-file": {
    "hash": "0f54ba76bf8939419b6e15f77b31ebda8139be69",
    "pkg": {
      "name": "@dualbox/dualbox-type-file",
      "version": "1.0.18",
      "description": "Dualbox type File.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-file": "^1.0.16",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "0f54ba76bf8939419b6e15f77b31ebda8139be69",
      "dualbox": {
        "type": {
          "name": "File",
          "desc": "This type defines a a File with its name, extension and data"
        }
      }
    }
  },
  "@dualbox/dualbox-type-geometry": {
    "hash": "557b477f3225b46cbc01eba384de32ece0a04082",
    "pkg": {
      "name": "@dualbox/dualbox-type-geometry",
      "version": "1.0.20",
      "description": "Dualbox type Geometry.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "557b477f3225b46cbc01eba384de32ece0a04082",
      "dualbox": {
        "type": {
          "name": "Geometry",
          "desc": "This type defines a classic triangular geometry."
        }
      }
    }
  },
  "@dualbox/dualbox-type-heightmap": {
    "hash": "a948d2f3313a00a20b8dc1e72e504be3471856cd",
    "pkg": {
      "name": "@dualbox/dualbox-type-heightmap",
      "version": "1.0.21",
      "description": "Dualbox type HeightMap.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "a948d2f3313a00a20b8dc1e72e504be3471856cd",
      "dualbox": {
        "type": {
          "name": "HeightMap",
          "desc": "This type defines a HeightMap."
        }
      }
    }
  },
  "@dualbox/dualbox-type-imagedata": {
    "hash": "1ba7f5c4199805bf806f22f4859c89f31efb9308",
    "pkg": {
      "name": "@dualbox/dualbox-type-imagedata",
      "version": "1.0.17",
      "description": "Dualbox type ImageData.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-imagedata": "^1.0.6",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "1ba7f5c4199805bf806f22f4859c89f31efb9308",
      "dualbox": {
        "type": {
          "name": "ImageData",
          "desc": "This type defines a 2 dimensional box using two Vector2."
        }
      }
    }
  },
  "@dualbox/dualbox-lib-dualbox-csg": {
    "hash": "67ead870b11d67cfcfdfb3f20547c62f7d971bd6",
    "pkg": {
      "name": "@dualbox/dualbox-lib-dualbox-csg",
      "version": "1.0.36",
      "description": "Defines a few functions to perform csg operations on dualbox-3d BufferTriGeometry. CURRENTLY EXPERIMENTAL.",
      "main": "dist/dualbox-csg.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files",
        "standalone": "browserify src/dualbox-csg.js --standalone DualBoxCSG -o standalone/dualbox-csg.js && uglifyjs standalone/dualbox-csg.js -o standalone/dualbox-csg.min.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-dualbox-3d": "^1.0.39",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "cdt2d": "^1.0.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.12.1",
        "mathjs": "^3.17.0",
        "ray-triangle-intersection": "^1.0.3",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "67ead870b11d67cfcfdfb3f20547c62f7d971bd6"
    }
  },
  "@dualbox/dualbox-type-light": {
    "hash": "94344428913447a76d1efbfc225a9bed4b136a39",
    "pkg": {
      "name": "@dualbox/dualbox-type-light",
      "version": "1.0.20",
      "description": "Dualbox type Light.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "94344428913447a76d1efbfc225a9bed4b136a39",
      "dualbox": {
        "type": {
          "name": "Light",
          "desc": "This type defines a Light."
        }
      }
    }
  },
  "@dualbox/dualbox-type-line": {
    "hash": "cf9947d2c4e8bf2c82706a49b67376a8123f26fa",
    "pkg": {
      "name": "@dualbox/dualbox-type-line",
      "version": "1.0.20",
      "description": "Dualbox type Line.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "cf9947d2c4e8bf2c82706a49b67376a8123f26fa",
      "dualbox": {
        "type": {
          "name": "Line",
          "desc": "This type defines a Line for 3D rendering with a LineGeometry and a Material."
        }
      }
    }
  },
  "@dualbox/dualbox-type-linegeometry": {
    "hash": "9cb3fb69db0ef771b127252a4fc8e3e9af3dff16",
    "pkg": {
      "name": "@dualbox/dualbox-type-linegeometry",
      "version": "1.0.20",
      "description": "Dualbox type LineGeometry.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "9cb3fb69db0ef771b127252a4fc8e3e9af3dff16",
      "dualbox": {
        "type": {
          "name": "LineGeometry",
          "desc": "This type defines a classic linear geometry."
        }
      }
    }
  },
  "@dualbox/dualbox-type-json": {
    "hash": "ca8ab91d1da6062ff881877980e42b4e5bbc910c",
    "pkg": {
      "name": "@dualbox/dualbox-type-json",
      "version": "1.0.13",
      "description": "Dualbox type JSON",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "ca8ab91d1da6062ff881877980e42b4e5bbc910c",
      "dualbox": {
        "type": {
          "name": "json",
          "desc": "This type defines a JSON object."
        }
      }
    }
  },
  "@dualbox/dualbox-type-map": {
    "hash": "83f41a8ca6ee18d6816c977641c139ae51bbd74b",
    "pkg": {
      "name": "@dualbox/dualbox-type-map",
      "version": "1.0.13",
      "description": "Dualbox type Map",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "83f41a8ca6ee18d6816c977641c139ae51bbd74b",
      "dualbox": {
        "type": {
          "name": "Map",
          "desc": "An object mapping a key (for now only strings supported), to objects of the same type."
        }
      }
    }
  },
  "@dualbox/dualbox-type-mapping": {
    "hash": "b12003b5484aefdf488127e0e2d1ca9a7e547ee6",
    "pkg": {
      "name": "@dualbox/dualbox-type-mapping",
      "version": "1.0.20",
      "description": "Dualbox type Mapping.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "b12003b5484aefdf488127e0e2d1ca9a7e547ee6",
      "dualbox": {
        "type": {
          "name": "Mapping",
          "desc": "This type defines some texture options for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-material": {
    "hash": "b305e3677861ae4fb4c22496bf2cee78579e9c10",
    "pkg": {
      "name": "@dualbox/dualbox-type-material",
      "version": "1.0.20",
      "description": "Dualbox type Material.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "b305e3677861ae4fb4c22496bf2cee78579e9c10",
      "dualbox": {
        "type": {
          "name": "Material",
          "desc": "This type defines a Material."
        }
      }
    }
  },
  "@dualbox/dualbox-type-matrix3": {
    "hash": "c64281d639d0d79a875412bc27b13c071bc5ff36",
    "pkg": {
      "name": "@dualbox/dualbox-type-matrix3",
      "version": "1.0.20",
      "description": "Dualbox type Matrix3.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "c64281d639d0d79a875412bc27b13c071bc5ff36",
      "dualbox": {
        "type": {
          "name": "Matrix3",
          "desc": "This type defines a 3x3 Matrix."
        }
      }
    }
  },
  "@dualbox/dualbox-type-matrix4": {
    "hash": "60b46e173e7a85634b7283f312414ce57d10cda8",
    "pkg": {
      "name": "@dualbox/dualbox-type-matrix4",
      "version": "1.0.20",
      "description": "Dualbox type Matrix4.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "60b46e173e7a85634b7283f312414ce57d10cda8",
      "dualbox": {
        "type": {
          "name": "Matrix4",
          "desc": "This type defines a 4x4 Matrix."
        }
      }
    }
  },
  "@dualbox/dualbox-type-mesh": {
    "hash": "bb2b608433387bb79d2e99e2e619f8898ec4b5d9",
    "pkg": {
      "name": "@dualbox/dualbox-type-mesh",
      "version": "1.0.20",
      "description": "Dualbox type Mesh.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "bb2b608433387bb79d2e99e2e619f8898ec4b5d9",
      "dualbox": {
        "type": {
          "name": "Mesh",
          "desc": "This type defines a Mesh."
        }
      }
    }
  },
  "@dualbox/dualbox-type-number": {
    "hash": "96b78d9eea4ae55b5f10178bc09038c2b65af44e",
    "pkg": {
      "name": "@dualbox/dualbox-type-number",
      "version": "1.0.12",
      "description": "Dualbox type Number.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "96b78d9eea4ae55b5f10178bc09038c2b65af44e",
      "dualbox": {
        "type": {
          "name": "Number",
          "desc": "Type to handle standard javascript booleans."
        }
      }
    }
  },
  "@dualbox/dualbox-type-pixeldatatype": {
    "hash": "ed1df6e9bb3e667b2476524cc530defe0486aa58",
    "pkg": {
      "name": "@dualbox/dualbox-type-pixeldatatype",
      "version": "1.0.20",
      "description": "Dualbox type PixelDataType.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "ed1df6e9bb3e667b2476524cc530defe0486aa58",
      "dualbox": {
        "type": {
          "name": "PixelDataType",
          "desc": "This type defines some texture options for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-pixelformat": {
    "hash": "18c0aebc9b9560cafa70c50cdd7a5e99b7e14e45",
    "pkg": {
      "name": "@dualbox/dualbox-type-pixelformat",
      "version": "1.0.20",
      "description": "Dualbox type PixelFormat.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "18c0aebc9b9560cafa70c50cdd7a5e99b7e14e45",
      "dualbox": {
        "type": {
          "name": "PixelFormat",
          "desc": "This type defines some pixel format when using textures and 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-nativearray": {
    "hash": "f4e91cea5f1827ffe15d9614a1dcc95476c5a49c",
    "pkg": {
      "name": "@dualbox/dualbox-type-nativearray",
      "version": "1.0.13",
      "description": "Dualbox type nativearray.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "f4e91cea5f1827ffe15d9614a1dcc95476c5a49c",
      "dualbox": {
        "type": {
          "name": "Float64Array",
          "desc": "Type for using javascript native array type : Float64Array"
        }
      }
    }
  },
  "@dualbox/dualbox-type-plane": {
    "hash": "552b3619587c18025bb9018d528ffdcebee3ec65",
    "pkg": {
      "name": "@dualbox/dualbox-type-plane",
      "version": "1.0.20",
      "description": "Dualbox type Plane.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "552b3619587c18025bb9018d528ffdcebee3ec65",
      "dualbox": {
        "type": {
          "name": "Plane",
          "desc": "This type defines a plane using a position and a normal."
        }
      }
    }
  },
  "@dualbox/dualbox-type-quaternion": {
    "hash": "ffbe0b1afd85b9bffdd70813eb82620f8db9a894",
    "pkg": {
      "name": "@dualbox/dualbox-type-quaternion",
      "version": "1.0.20",
      "description": "Dualbox type Quaternion.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "ffbe0b1afd85b9bffdd70813eb82620f8db9a894",
      "dualbox": {
        "type": {
          "name": "Quaternion",
          "desc": "This type defines a Quaternion."
        }
      }
    }
  },
  "@dualbox/dualbox-type-ray": {
    "hash": "3843c39537aba2c7ea8d1c40ed6c7454b3a66cb2",
    "pkg": {
      "name": "@dualbox/dualbox-type-ray",
      "version": "1.0.20",
      "description": "Dualbox type Ray.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "3843c39537aba2c7ea8d1c40ed6c7454b3a66cb2",
      "dualbox": {
        "type": {
          "name": "Ray",
          "desc": "This type defines a ray in 3 dimensions using an origin and a direction."
        }
      }
    }
  },
  "@dualbox/dualbox-type-object": {
    "hash": "9b7ab48b859910edf61d0c99c812e71b90f9b2fc",
    "pkg": {
      "name": "@dualbox/dualbox-type-object",
      "version": "1.0.13",
      "description": "Dualbox type object",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "lodash": "^4.17.4",
        "uglify-js": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "9b7ab48b859910edf61d0c99c812e71b90f9b2fc",
      "dualbox": {
        "type": {
          "name": "Object",
          "desc": "The native javascript object type"
        }
      }
    }
  },
  "@dualbox/dualbox-type-scenenode": {
    "hash": "ce7ec29efb708797e3fbac039d73ca2f86ef67a9",
    "pkg": {
      "name": "@dualbox/dualbox-type-scenenode",
      "version": "1.0.20",
      "description": "Dualbox type SceneNode.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "ce7ec29efb708797e3fbac039d73ca2f86ef67a9",
      "dualbox": {
        "type": {
          "name": "SceneNode",
          "desc": "This type defines a node in a scene graph."
        }
      }
    }
  },
  "@dualbox/dualbox-type-regexp": {
    "hash": "76490a998e41d9fc3288309a852e0810c1c43b77",
    "pkg": {
      "name": "@dualbox/dualbox-type-regexp",
      "version": "1.0.13",
      "description": "Dualbox type RegExp",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "76490a998e41d9fc3288309a852e0810c1c43b77",
      "dualbox": {
        "type": {
          "name": "RegExp",
          "desc": "Type to handle regular expression as in javascript."
        }
      }
    }
  },
  "@dualbox/dualbox-type-segment3": {
    "hash": "0d4d345470f78989c9ea015ec2fe15313e9cb4b1",
    "pkg": {
      "name": "@dualbox/dualbox-type-segment3",
      "version": "1.0.20",
      "description": "Dualbox type Segment3.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "0d4d345470f78989c9ea015ec2fe15313e9cb4b1",
      "dualbox": {
        "type": {
          "name": "Segment3",
          "desc": "This type defines a 3D segment using two Vector3."
        }
      }
    }
  },
  "@dualbox/dualbox-type-shading": {
    "hash": "2819896c5ea87f776e7c2fd00647268edc07e9d3",
    "pkg": {
      "name": "@dualbox/dualbox-type-shading",
      "version": "1.0.20",
      "description": "Dualbox type Shading.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "2819896c5ea87f776e7c2fd00647268edc07e9d3",
      "dualbox": {
        "type": {
          "name": "Shading",
          "desc": "This type defines different kind of shading for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-side": {
    "hash": "966ca5457813dc858d2194cbef8a4f3f7588571e",
    "pkg": {
      "name": "@dualbox/dualbox-type-side",
      "version": "1.0.20",
      "description": "Dualbox type Side.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "966ca5457813dc858d2194cbef8a4f3f7588571e",
      "dualbox": {
        "type": {
          "name": "Side",
          "desc": "This type defines which side(s) of triangles must be drawn when 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-sphere": {
    "hash": "e5a27bfdcdf0f92d8ac68ef9bfad5f619e5062ea",
    "pkg": {
      "name": "@dualbox/dualbox-type-sphere",
      "version": "1.0.20",
      "description": "Dualbox type Sphere.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "e5a27bfdcdf0f92d8ac68ef9bfad5f619e5062ea",
      "dualbox": {
        "type": {
          "name": "Sphere",
          "desc": "This type defines a Sphere using a center and a radius."
        }
      }
    }
  },
  "@dualbox/dualbox-type-spherical": {
    "hash": "70a43b1b285c33dfc6b448e6538f727c2dc5c33a",
    "pkg": {
      "name": "@dualbox/dualbox-type-spherical",
      "version": "1.0.20",
      "description": "Dualbox type Spherical.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "70a43b1b285c33dfc6b448e6538f727c2dc5c33a",
      "dualbox": {
        "type": {
          "name": "Spherical",
          "desc": "This type defines a position in a Spherical coordinate system."
        }
      }
    }
  },
  "@dualbox/dualbox-type-string": {
    "hash": "a03799baca5efb32e64ef9498d7685aeefc2f0d9",
    "pkg": {
      "name": "@dualbox/dualbox-type-string",
      "version": "1.0.13",
      "description": "Dualbox type string",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglify-js": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "a03799baca5efb32e64ef9498d7685aeefc2f0d9",
      "dualbox": {
        "type": {
          "name": "String",
          "desc": "Type to handle standard javascript strings."
        }
      }
    }
  },
  "@dualbox/dualbox-type-texture": {
    "hash": "8abf1d2ecc4202f46dd1bc80261e3e8e37fd4934",
    "pkg": {
      "name": "@dualbox/dualbox-type-texture",
      "version": "1.0.20",
      "description": "Dualbox type Texture.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "8abf1d2ecc4202f46dd1bc80261e3e8e37fd4934",
      "dualbox": {
        "type": {
          "name": "Texture",
          "desc": "A texture to be used in a 3D scene."
        }
      }
    }
  },
  "@dualbox/dualbox-type-textureconst": {
    "hash": "3d00e3f3181cc493f56faa475942d71e5cfb3762",
    "pkg": {
      "name": "@dualbox/dualbox-type-textureconst",
      "version": "1.0.20",
      "description": "Dualbox type TextureConst.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "3d00e3f3181cc493f56faa475942d71e5cfb3762",
      "dualbox": {
        "type": {
          "name": "TextureConst",
          "desc": "This type defines some texture options for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-texturefilter": {
    "hash": "7e092ccc7be29f6344b0cb3e444c7acc5d74d98c",
    "pkg": {
      "name": "@dualbox/dualbox-type-texturefilter",
      "version": "1.0.20",
      "description": "Dualbox type TextureFilter.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "7e092ccc7be29f6344b0cb3e444c7acc5d74d98c",
      "dualbox": {
        "type": {
          "name": "TextureFilter",
          "desc": "This type defines some texture options for texture filtering when 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-usedcolor": {
    "hash": "97932caab27a645f655ca5f8f5334bb1725ec4db",
    "pkg": {
      "name": "@dualbox/dualbox-type-usedcolor",
      "version": "1.0.20",
      "description": "Dualbox type UsedColor.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "97932caab27a645f655ca5f8f5334bb1725ec4db",
      "dualbox": {
        "type": {
          "name": "UsedColor",
          "desc": "This type defines which colors should be used when rendering in 3D."
        }
      }
    }
  },
  "@dualbox/dualbox-type-vector2": {
    "hash": "24d22dfa527791d2feb5be8fdaeebc4b8dc358c3",
    "pkg": {
      "name": "@dualbox/dualbox-type-vector2",
      "version": "1.0.20",
      "description": "Dualbox type Vector2.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "24d22dfa527791d2feb5be8fdaeebc4b8dc358c3",
      "dualbox": {
        "type": {
          "name": "Vector2",
          "desc": "This type defines a Vector2."
        }
      }
    }
  },
  "@dualbox/dualbox-type-vector3": {
    "hash": "3b0865d444bec2fcd01c37f29bf0eb51cdc611d1",
    "pkg": {
      "name": "@dualbox/dualbox-type-vector3",
      "version": "1.0.20",
      "description": "Dualbox type Vector3.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "3b0865d444bec2fcd01c37f29bf0eb51cdc611d1",
      "dualbox": {
        "type": {
          "name": "Vector3",
          "desc": "This type defines a Vector3."
        }
      }
    }
  },
  "@dualbox/dualbox-type-vector4": {
    "hash": "36383b23b2c6225ad3ffb91c69252ba98c363140",
    "pkg": {
      "name": "@dualbox/dualbox-type-vector4",
      "version": "1.0.20",
      "description": "Dualbox type Vector4.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "36383b23b2c6225ad3ffb91c69252ba98c363140",
      "dualbox": {
        "type": {
          "name": "Vector4",
          "desc": "This type defines a Vector4."
        }
      }
    }
  },
  "@dualbox/dualbox-type-vertexcolors": {
    "hash": "c0a0def4cba943b54224cb748937d47bb49c285a",
    "pkg": {
      "name": "@dualbox/dualbox-type-vertexcolors",
      "version": "1.0.20",
      "description": "Dualbox type VertexColors.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "c0a0def4cba943b54224cb748937d47bb49c285a",
      "dualbox": {
        "type": {
          "name": "VertexColors",
          "desc": "This type defines different kind of coloring regarding vertex colors for 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-type-wrapping": {
    "hash": "635d8294ffe395bf9533d47890f56cf43e71b3e9",
    "pkg": {
      "name": "@dualbox/dualbox-type-wrapping",
      "version": "1.0.20",
      "description": "Dualbox type Wrapping.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "635d8294ffe395bf9533d47890f56cf43e71b3e9",
      "dualbox": {
        "type": {
          "name": "Wrapping",
          "desc": "This type defines some texture options for texture wrapping when 3D rendering."
        }
      }
    }
  },
  "@dualbox/dualbox-ui-aggregator": {
    "hash": "9ac85b3d9bebb4ae438dae40e102e486e76f1d1a",
    "pkg": {
      "name": "@dualbox/dualbox-ui-aggregator",
      "version": "1.0.28",
      "description": "Utility to aggregate a set of events into one box. Useful for implementing steps or avoiding multiplication of events",
      "main": "dist/aggregator.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "desc": "Utility to aggregate a set of events into one box. Useful for implementing steps or avoiding multiplication of events",
        "input": {},
        "output": {},
        "events": {
          "trigger": {
            "desc": "Send all events in this aggregator"
          }
        }
      },
      "hash": "9ac85b3d9bebb4ae438dae40e102e486e76f1d1a"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-button": {
    "hash": "f872de6ab029062b72b9db61b69d53258e0aef05",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-button",
      "version": "1.0.60",
      "description": "Simple button with bootstrap",
      "main": "dist/BootstrapButton.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "text": {
            "type": "String",
            "desc": "The text to display on the button",
            "value": "Go !"
          },
          "glyphicon": {
            "type": "String",
            "desc": "If the text should be replaced by a glyphicon it should be setup here. Example : glyphicon-play",
            "value": null
          },
          "fontawesomeIcon": {
            "type": "String",
            "desc": "If the text should be replaced by a font awesome icon it should be setup here.",
            "value": null
          },
          "class": {
            "type": "String",
            "desc": "The classes of the button. Usually bootstrap btn-primary, btn-success... Default is btn-success. db-button class specific to this ui will be applied after.",
            "value": "btn-success"
          },
          "disabled": {
            "type": "Boolean",
            "desc": "Setup the starting state of the button. It can be enabled using events later.",
            "value": false
          },
          "hidden": {
            "type": "Boolean",
            "value": false
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "String"
          }
        }
      },
      "hash": "f872de6ab029062b72b9db61b69d53258e0aef05"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-button-callback": {
    "hash": "c8eed58f779c0592c2a51ca7d71cf01f9a37cecc",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-button-callback",
      "version": "1.0.61",
      "description": "Button that can be augmented with a callback that will define the output",
      "main": "dist/BootstrapButtonCb.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "text": {
            "type": "String",
            "desc": "The text to display on the button",
            "value": "Go !"
          },
          "glyphicon": {
            "type": "String",
            "desc": "If the text should be replaced by a glyphicon it should be setup here. Example : glyphicon-play",
            "value": null
          },
          "fontawesomeIcon": {
            "type": "String",
            "desc": "If the text should be replaced by a font awesome icon it should be setup here.",
            "value": null
          },
          "class": {
            "type": "String",
            "desc": "The classes of the button. Usually bootstrap btn-primary, btn-success... Default is btn-success. db-button-callback class specific to this ui will be applied after.",
            "value": "btn-success"
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "*"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide the button"
          },
          "show": {
            "desc": "Show the button"
          },
          "enable": {
            "desc": "enable the button"
          },
          "disable": {
            "desc": "disable the button"
          },
          "setCallback": {
            "desc": "Set this event's data as the callback to be triggered when this button is pressed"
          },
          "clearValue": {
            "desc": "clean the button's value"
          }
        }
      },
      "hash": "c8eed58f779c0592c2a51ca7d71cf01f9a37cecc"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-dynamic-slider": {
    "hash": "4c147bf62c90e2e36d13b6836126ba0d16cd01ca",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-dynamic-slider",
      "version": "1.0.44",
      "description": "Slider with bootstrap and buttons to make it slide automatically, pause, resume, etc...",
      "main": "dist/BootstrapDynamicSlider.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "@dualbox/dualbox-lib-bootstrap-slider": "^1.0.8"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "format": {
            "type": "String",
            "value": "standard",
            "desc": "If set to 'percent', the value will be displayed as a percentage."
          },
          "triggerOnSlide": {
            "desc": "If true, will trigger on slide. Else, will only trigger when a point has been moved and the position released.",
            "type": "Boolean",
            "value": true
          },
          "min": {
            "type": "Number",
            "value": 0
          },
          "max": {
            "type": "Number",
            "value": 1
          },
          "step": {
            "type": "Number",
            "value": 0.1
          },
          "value": {
            "type": "Number",
            "value": 1
          },
          "label": {
            "type": "String",
            "value": "Slider"
          },
          "prefix": {
            "type": "String",
            "value": ""
          },
          "suffix": {
            "type": "String",
            "value": ""
          },
          "interval": {
            "type": "Number",
            "value": 41,
            "desc": "Value in ms defining how fast the slider will automatically slide. Every interval (in ms), the slider will perform 1 step."
          },
          "repeatTip": {
            "type": "String",
            "value": "Repeat",
            "desc": "Will be used as a tooltip on hiver of the repeat button. Use null if you don't want any tooltip."
          },
          "hidden": {
            "type": "Boolean",
            "value": false
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "Number"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "screenshot": {
            "desc": "Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs then process"
          },
          "setValue": {
            "desc": "Set the slider value"
          },
          "setAttr": {
            "desc": "Set slider's attributes (min: min value, max: max value, step: step between each value)"
          },
          "pause": {
            "desc": "Pause the slider"
          },
          "play": {
            "desc": "Play the slider"
          }
        }
      },
      "hash": "4c147bf62c90e2e36d13b6836126ba0d16cd01ca"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-button-download-file": {
    "hash": "ba1e6403a6c5efa9bf6b83768f50dfca8728cc84",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-button-download-file",
      "version": "1.0.61",
      "description": "Button to download a file.",
      "main": "dist/BootstrapButtonDownloadFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "text": {
            "type": "String",
            "desc": "The text to display on the button",
            "value": "Export"
          },
          "glyphicon": {
            "type": "String",
            "desc": "If the text should be replaced by a glyphicon it should be setup here. Example : glyphicon-play",
            "value": null
          },
          "fontawesomeIcon": {
            "type": "String",
            "desc": "If the text should be replaced by a font awesome icon it should be setup here.",
            "value": null
          },
          "class": {
            "type": "String",
            "desc": "The classes of the button. Usually bootstrap btn-primary, btn-success... Default is btn-success. db-button-download-file class specific to this ui will be applied after.",
            "value": "btn-success"
          },
          "hidden": {
            "type": "Boolean",
            "value": false,
            "desc": "Initial visibility value of the component. If true, this component will be hidden by default."
          }
        },
        "input": {
          "file": {
            "type": "File",
            "const": true
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "trigger": {
            "desc": "Resolve all inputs then process"
          }
        }
      },
      "hash": "ba1e6403a6c5efa9bf6b83768f50dfca8728cc84"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-button-toggle": {
    "hash": "16183ef4e809fb96046a5839f0aea7f118c93f9a",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-button-toggle",
      "version": "1.0.60",
      "description": "Boostrap button that have a toggle state. Returns a boolean",
      "main": "dist/BootstrapButtonToggle.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "text": {
            "type": "String",
            "desc": "The text to display on the button",
            "value": "Toggle"
          },
          "glyphicon": {
            "type": "String",
            "desc": "If the text should be replaced by a glyphicon it should be setup here. Example : glyphicon-play",
            "value": null
          },
          "fontawesomeIcon": {
            "type": "String",
            "desc": "If the text should be replaced by a font awesome icon it should be setup here.",
            "value": null
          },
          "class": {
            "type": "String",
            "desc": "The classes of the button. Usually bootstrap btn-primary, btn-success... Default is btn-success. db-button-toggle class specific to this ui will be applied after.",
            "value": "btn-success"
          },
          "checked": {
            "type": "Boolean",
            "value": false,
            "desc": "True if the button is toggled on start. Default to false."
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "Boolean"
          }
        }
      },
      "hash": "16183ef4e809fb96046a5839f0aea7f118c93f9a"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-checkbox": {
    "hash": "bbce816380f551b143827ce646833535d1ef0fb1",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-checkbox",
      "version": "1.0.61",
      "description": "Simple check box with bootstrap.",
      "main": "dist/BootstrapCheckbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "eslint": "^4.12.1",
        "lodash": "^4.17.4",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "label": {
            "type": "String",
            "value": "Checkbox",
            "desc": "The label to show alongside the checkbox"
          },
          "checked": {
            "type": "Boolean",
            "value": false,
            "desc": "Initial state of the checkbox"
          },
          "hidden": {
            "type": "Boolean",
            "value": false,
            "desc": "Initial visibility value of the component. If true, this component will be hidden by default."
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "Boolean"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "setValue": {
            "desc": "Set this checkbox value (checked or not)"
          }
        }
      },
      "hash": "bbce816380f551b143827ce646833535d1ef0fb1"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-input-text": {
    "hash": "e2c94b6a7495f0ad9d9d98b495b8544848492198",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-input-text",
      "version": "1.0.59",
      "description": "Simple input text with bootstrap",
      "main": "dist/BootstrapInputText.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "label": {
            "type": "String",
            "value": "Label",
            "desc": "The label to setup before the text box."
          },
          "value": {
            "type": "String",
            "value": "",
            "desc": "The text to setup at start. Default to an empty string."
          },
          "emptyValue": {
            "type": "String",
            "value": "",
            "desc": "The text to return when the box is emty. This can prevent having to deal with an empty text. Default to an empty string."
          },
          "triggerWhenEmpty": {
            "type": "Boolean",
            "value": true,
            "desc": "If false, the text box will not trigger when empty. That means the last value will be kept."
          },
          "maxlength": {
            "type": "Number",
            "value": 25,
            "desc": "The maximum number of characters that can be input bythe user. Default to 25."
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "String"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "screenshot": {
            "desc": "Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs then process"
          }
        }
      },
      "hash": "e2c94b6a7495f0ad9d9d98b495b8544848492198"
    }
  },
  "@dualbox/dualbox-ui-display-image": {
    "hash": "7d933492c4cc2a4c18fb37d02ced3a82f7f053a2",
    "pkg": {
      "name": "@dualbox/dualbox-ui-display-image",
      "version": "1.0.38",
      "description": "Simple div that displays input image",
      "main": "dist/display-image.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblierss@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "width": {
            "type": "Number",
            "value": null,
            "desc": "HTML width tag of the image to be displayed. Default is null, which will take the natural height of the image. If width or height is set and the other null, the null value will be replaced with a size ensuring natural image proportions."
          },
          "height": {
            "type": "Number",
            "value": null,
            "desc": "HTML height tag of the image to be displayed. Default is null, which will take the natural height of the image. If width or height is set and the other null, the null value will be replaced with a size ensuring natural image proportions."
          }
        },
        "input": {
          "dataURL": {
            "type": "String"
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs and process to display"
          }
        }
      },
      "hash": "7d933492c4cc2a4c18fb37d02ced3a82f7f053a2"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-loader": {
    "hash": "7d2aaca2b40793b1f24cff99c0df89894960d9bd",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-loader",
      "version": "1.0.61",
      "description": "A loader with a spinner, able to use fontawesome",
      "main": "dist/BootstrapLoader.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "desc": "A component to display a nice loader. Use it with hide/show events",
        "input": {},
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          }
        },
        "attr": {
          "opacity": {
            "type": "Number",
            "desc": "the loader div opacity",
            "value": 0.8
          },
          "text": {
            "type": "String",
            "value": "Loading...",
            "desc": "The text to display with the loader."
          }
        }
      },
      "hash": "7d2aaca2b40793b1f24cff99c0df89894960d9bd"
    }
  },
  "@dualbox/dualbox-ui-display-number": {
    "hash": "663df5c8d971c5a853834e917d6cc750a7de6a00",
    "pkg": {
      "name": "@dualbox/dualbox-ui-display-number",
      "version": "1.0.60",
      "description": "Simple div that displays input number",
      "main": "dist/DisplayNumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "prefix": {
            "type": "String",
            "value": "Number: ",
            "desc": "The string to come before the number"
          },
          "suffix": {
            "type": "String",
            "value": "",
            "desc": "The string to come after the number"
          },
          "value": {
            "type": "Number",
            "value": null,
            "desc": "The original value to be displayed. DEPRECATED??"
          },
          "round": {
            "type": "Boolean",
            "value": false,
            "desc": "True if the value must be displayed rounded. DEPRECATED?"
          }
        },
        "input": {
          "n": {
            "type": "Number"
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs and process to display"
          }
        }
      },
      "hash": "663df5c8d971c5a853834e917d6cc750a7de6a00"
    }
  },
  "@dualbox/dualbox-ui-canvas2d": {
    "hash": "04f3c392a921393e8686d93cc25b3fc2a93a50d3",
    "pkg": {
      "name": "@dualbox/dualbox-ui-canvas2d",
      "version": "1.0.59",
      "description": "Simple html canvas with a 2D drawing context.",
      "main": "dist/Canvas2D.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.12.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-pure-css-loader": "^1.0.1",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "browserify": "^13.3.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The color of the canvas when nothing is drawn on it. Default to white."
          },
          "background": {
            "type": "String",
            "value": null,
            "desc": "URL of the background to draw on the canvas. The image will be streched."
          }
        },
        "output": {}
      },
      "hash": "04f3c392a921393e8686d93cc25b3fc2a93a50d3"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-select": {
    "hash": "596fe04549ffa7edf804b70acc7204008200b074",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-select",
      "version": "1.0.63",
      "description": "Simple select with bootstrap. You can use any registered Dualbox type in the selector (string, number, boolean of JSON for other elements) but all entry must have the same type.",
      "main": "dist/BootstrapSelect.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "lodash": "^4.17.4",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "label": {
            "value": "Select",
            "type": "String",
            "desc": "Label for this UI element."
          },
          "options": {
            "desc": "All possible to select options, with label and value."
          },
          "hidden": {
            "value": false,
            "desc": "True if this UI must be hidden by default."
          },
          "value": {
            "value": null,
            "desc": "The initial value to be selected. If null (default), then the first option will be used"
          },
          "triggerOnClick": {
            "value": false,
            "desc": "Trigger even when an option is clicked even if the value has not changed."
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "*"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "screenshot": {
            "desc": "Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "addOption": {
            "desc": "Add a select option"
          },
          "removeOption": {
            "desc": "Remove a select option"
          },
          "hideOption": {
            "desc": "Hide a select option"
          },
          "showOption": {
            "desc": "Show a select option"
          },
          "enableOption": {
            "desc": "Enable a select option"
          },
          "disableOption": {
            "desc": "Disable a select option"
          },
          "setValue": {
            "desc": "set the select value (to one of the options)"
          }
        }
      },
      "hash": "596fe04549ffa7edf804b70acc7204008200b074"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-slider": {
    "hash": "bb9fb478ba2f86b6e253d0b19e0eb45aa52ac2e8",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-slider",
      "version": "1.0.62",
      "description": "Simple slider with bootstrap",
      "main": "dist/BootstrapSlider.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "@dualbox/dualbox-lib-bootstrap-slider": "^1.0.8"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "format": {
            "type": "String",
            "value": "standard",
            "desc": "If set to 'percent', the value will be displayed as a percentage."
          },
          "triggerOnSlide": {
            "desc": "If true, will trigger on slide. Else, will only trigger when a point has been moved and the position released.",
            "type": "Boolean",
            "value": true
          },
          "min": {
            "type": "Number",
            "value": 0
          },
          "max": {
            "type": "Number",
            "value": 1
          },
          "step": {
            "type": "Number",
            "value": 0.1
          },
          "value": {
            "type": "Number",
            "value": 1
          },
          "label": {
            "type": "String",
            "value": "Slider"
          },
          "prefix": {
            "type": "String",
            "value": ""
          },
          "suffix": {
            "type": "String",
            "value": ""
          },
          "hidden": {
            "type": "Boolean",
            "value": false
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "Number"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "screenshot": {
            "desc": "Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "setAttr": {
            "desc": "Set a slider attribute (min, max, step)"
          },
          "setValue": {
            "desc": "Set the slider value"
          }
        }
      },
      "hash": "bb9fb478ba2f86b6e253d0b19e0eb45aa52ac2e8"
    }
  },
  "@dualbox/dualbox-ui-display-text": {
    "hash": "49b3becd639647b405d08d100fa662e914493350",
    "pkg": {
      "name": "@dualbox/dualbox-ui-display-text",
      "version": "1.0.60",
      "description": "Simple div that displays input text",
      "main": "dist/DisplayText.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "text": {
            "type": "String"
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs and process to display"
          }
        }
      },
      "hash": "49b3becd639647b405d08d100fa662e914493350"
    }
  },
  "@dualbox/dualbox-ui-scientifeet-rigidities": {
    "hash": "43e958b75c67d586cc45e42e2bc435f40db4c64c",
    "pkg": {
      "name": "@dualbox/dualbox-ui-scientifeet-rigidities",
      "version": "1.0.88",
      "description": "Scientifeet UI Interface to configure insole rigidities",
      "main": "dist/RigiditiesBox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "babel-preset-env": "^1.7.0",
        "babelify": "^8.0.0",
        "brfs": "^1.4.3",
        "browserify-css": "^0.13.1",
        "imgurify": "^2.0.1",
        "lodash": "^4.17.4",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "devDependencies": {
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify-css": {
        "autoInject": true,
        "minify": true,
        "rootDir": "."
      },
      "browserify": {
        "transform": [
          [
            "browserify-css"
          ],
          [
            "rollupify",
            {}
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ],
          [
            "imgurify"
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "titletip": {
            "type": "String",
            "value": "Ajustez les rigiditÃ©s de la semelle",
            "desc": "Tooltip title to display when moving the mouse above a number box"
          },
          "helptip": {
            "type": "String",
            "value": "Ajustez la rigiditÃ©s des zones: <br/>2: le plus souple<br/>7: le plus rigide",
            "desc": "Tooltip title to display when moving the mouse above a number box"
          },
          "readonly": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, rigidities cannot be changed (used for display only)"
          },
          "svgMaxWidth": {
            "type": "String",
            "value": "100%",
            "desc": "css rule for max-width of the svg"
          },
          "svgPaddingLeft": {
            "type": "String",
            "value": "0%",
            "desc": "css rule for the padding-left of the svg"
          },
          "svgPaddingRight": {
            "type": "String",
            "value": "0%",
            "desc": "css rule for the padding-right of the svg"
          },
          "linkTxt": {
            "type": "String",
            "value": "Voir l'autre semelle",
            "desc": "Texte du lien pour voir les donnÃ©es de l'autre semelle"
          },
          "footSizeStr": {
            "type": "String",
            "value": "Pointure",
            "desc": "String to display for the footsize"
          },
          "footWidthStr": {
            "type": "String",
            "value": "Gabarit",
            "desc": "String to display for the foot width"
          },
          "anteroLabel": {
            "type": "String",
            "value": "Antero",
            "desc": "String to display for the antero"
          },
          "angleLabel": {
            "type": "String",
            "value": "Varus/Valgus",
            "desc": "String to display for the angle"
          },
          "heelAdjustLabel": {
            "type": "String",
            "value": "Finition talon",
            "desc": "String to display for the heel adjust"
          },
          "heelAdjustOptionNone": {
            "type": "String",
            "value": "Aucune",
            "desc": "Option for the heel adjust"
          },
          "heelAdjustOptionStabilizer": {
            "type": "String",
            "value": "Stabilisateur",
            "desc": "Option for the heel adjust"
          },
          "heelAdjustOptionFlatHeel50": {
            "type": "String",
            "value": "Plat 50%",
            "desc": "Option for the heel adjust"
          },
          "heelAdjustOptionFlatHeel100": {
            "type": "String",
            "value": "Plat 100%",
            "desc": "Option for the heel adjust"
          },
          "reliefLabel": {
            "type": "String",
            "value": "Relief",
            "desc": "String to display for the relief"
          },
          "reliefOptionNone": {
            "type": "String",
            "value": "Aucun",
            "desc": "Option for the relief"
          },
          "reliefHeightLabel": {
            "type": "String",
            "value": "Hauteur relief",
            "desc": "String to display for the relief height"
          },
          "anteroWidthLabel": {
            "type": "String",
            "value": "Epaisseur antero",
            "desc": "String to display for the antero width"
          },
          "archCorrectionLabel": {
            "type": "String",
            "value": "Correction voÃ»te",
            "desc": "String to display for the arch correction"
          },
          "heelCorrectionLabel": {
            "type": "String",
            "value": "Correction talon",
            "desc": "String to display for the heel correction"
          },
          "archExtCorrectionLabel": {
            "type": "String",
            "value": "Correction voÃ»te externe",
            "desc": "String to display for the heel correction"
          },
          "archHeightLabel": {
            "type": "String",
            "value": "Hauteur voÃ»te",
            "desc": "string to display for the arch height"
          },
          "heelHeightLabel": {
            "type": "String",
            "value": "Hauteur talon",
            "desc": "String to display for the heel height"
          },
          "archExtHeightLabel": {
            "type": "String",
            "value": "Hauteur voÃ»te externe",
            "desc": "string to display for the arch height"
          }
        },
        "input": {
          "footSide": {
            "type": "String"
          },
          "rigidities": {
            "type": "json",
            "value": {
              "metadata": "json",
              "data": {
                "E": 2,
                "Dx": 2,
                "Dy": 2,
                "Dz": 2,
                "C": 2,
                "Fx": 2,
                "Fy": 2,
                "CenterH": 2,
                "Bx": 2,
                "By": 2,
                "Bz": 2,
                "G": 2,
                "CenterB": 2,
                "A": 2
              }
            }
          },
          "insoleData": {
            "type": "json",
            "desc": "Export from sole-adapt. This module will use this to display useful data.",
            "value": null
          }
        },
        "output": {
          "rigidities": {
            "type": "json"
          }
        },
        "events": {
          "trigger": {
            "desc": "Compute inputs and set value according to them. Note that there is no ovverride logic (always override user changes with the given inputs)."
          },
          "setOtherInsoleData": {
            "desc": "set the data for the other insole (for display)"
          },
          "setInsoleData": {
            "desc": "set the data for the current insole (for display)"
          }
        },
        "object": "UI"
      },
      "hash": "2e5449029a7b37779873a5d919a4d6528a4095e3"
    }
  },
  "@dualbox/dualbox-module-array-concat": {
    "hash": "01ac42bf8e2fddf0bbd685b725178ef7aa249b32",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-concat",
      "version": "1.0.60",
      "description": "Concat 2 arrays.",
      "main": "concat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr1": {
            "type": "Array<*>"
          },
          "arr2": {
            "type": "Array<*>"
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "01ac42bf8e2fddf0bbd685b725178ef7aa249b32"
    }
  },
  "@dualbox/dualbox-module-array-get-first": {
    "hash": "8b106016877057e46f0495ec1fa2760c76e0f3a0",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-get-first",
      "version": "1.0.60",
      "description": "Returns the first value of an array (ie value at index 0).",
      "main": "getfirst.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "8b106016877057e46f0495ec1fa2760c76e0f3a0"
    }
  },
  "@dualbox/dualbox-module-array-get-last": {
    "hash": "c00261cc5e7772dcfee0fcb2644434b7ec93bbc3",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-get-last",
      "version": "1.0.60",
      "description": "Returns the last value of an array (ie value at index length-1).",
      "main": "getlast.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "c00261cc5e7772dcfee0fcb2644434b7ec93bbc3"
    }
  },
  "@dualbox/dualbox-module-array-get-mid": {
    "hash": "db8805e59f429a69ffdc7350a7c823b6210d1c72",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-get-mid",
      "version": "1.0.60",
      "description": "Returns the middle value of an array (ie value at index Floor(length/2)).",
      "main": "getmid.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "db8805e59f429a69ffdc7350a7c823b6210d1c72"
    }
  },
  "@dualbox/dualbox-ui-synchronizer": {
    "hash": "cd8f9dd5633589535b5778781fb5ed0aa25a9955",
    "pkg": {
      "name": "@dualbox/dualbox-ui-synchronizer",
      "version": "1.0.22",
      "description": "Utility to launch event when a set of input meets predefined conditions",
      "main": "dist/synchronizer.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "lodash": "^4.17.10",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "desc": "Utility to launch event when a set of input meets predefined conditions",
        "input": {
          "a": {
            "type": "*"
          },
          "b": {
            "type": "*"
          },
          "c": {
            "type": "*",
            "value": null,
            "visible": false
          },
          "d": {
            "type": "*",
            "value": null,
            "visible": false
          },
          "e": {
            "type": "*",
            "value": null,
            "visible": false
          },
          "f": {
            "type": "*",
            "value": null,
            "visible": false
          },
          "g": {
            "type": "*",
            "value": null,
            "visible": false
          },
          "h": {
            "type": "*",
            "value": null,
            "visible": false
          }
        },
        "output": {
          "a": {
            "type": "*",
            "visible": false
          },
          "b": {
            "type": "*",
            "visible": false
          },
          "c": {
            "type": "*",
            "visible": false
          },
          "d": {
            "type": "*",
            "visible": false
          },
          "e": {
            "type": "*",
            "visible": false
          },
          "f": {
            "type": "*",
            "visible": false
          },
          "g": {
            "type": "*",
            "visible": false
          },
          "h": {
            "type": "*",
            "visible": false
          }
        },
        "events": {
          "trigger": {
            "desc": "Read inputs and triggers all events defined in this synchronizer"
          }
        }
      },
      "hash": "cd8f9dd5633589535b5778781fb5ed0aa25a9955"
    }
  },
  "@dualbox/dualbox-module-array-index-list": {
    "hash": "5a1f958096d1599d3ea1cb802defd9a60c7909eb",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-index-list",
      "version": "1.0.60",
      "description": "Create a sequence of integer from start to end (end not included, such that doing array-dex-lis(0, length) gives indices for an array of size length.",
      "main": "indexlist.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "start": {
            "type": "Number"
          },
          "end": {
            "type": "Number"
          }
        },
        "output": {
          "arr": {
            "type": "Array<Number>"
          }
        }
      },
      "hash": "5a1f958096d1599d3ea1cb802defd9a60c7909eb"
    }
  },
  "@dualbox/dualbox-module-array-length": {
    "hash": "c09ce1360162f427fa7fb698befcf570819fa4f6",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-length",
      "version": "1.0.60",
      "description": "Return the length of the given array.",
      "main": "array-length.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          }
        },
        "output": {
          "length": {
            "type": "Number"
          }
        }
      },
      "hash": "c09ce1360162f427fa7fb698befcf570819fa4f6"
    }
  },
  "@dualbox/dualbox-ui-step": {
    "hash": "7940c6134054d9ad65219ab1b2444438e1141e77",
    "pkg": {
      "name": "@dualbox/dualbox-ui-step",
      "version": "1.0.66",
      "description": "Simple component to organize application step (what to show and hide at each step)",
      "main": "dist/step.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "desc": "[DEPRECATED] A component that aggregates a lot of events into 'steps', that can be triggered with the stepStep event",
        "attr": {
          "steps": {
            "type": "JSON",
            "value": {},
            "desc": "All steps and the list of the events to trigger when the step is triggered."
          },
          "flags": {
            "type": "JSON",
            "value": {},
            "const": true,
            "desc": "This JSON object will define several attribute that can be used in step's events conditions. Use the event setFlag to set a flag value. deleteFlag to remove a flag. Note that a default value must be provided for all flags you want to use."
          },
          "flagsChanged": {
            "type": "Array<JSON>",
            "value": [],
            "const": true,
            "desc": "Defines a set of events that will be emitted when flags changed. Note that conditions may be used in those events, current step is available using 'step' and flags are available using 'flags'."
          }
        },
        "input": {},
        "output": {
          "step": {
            "type": "String"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs and process to display"
          },
          "setStep": {
            "desc": "Trigger all events registered to the designed step (in data)"
          },
          "refreshStep": {
            "desc": "Trigger the current step again"
          },
          "setFlag": {
            "desc": "Set a flag"
          },
          "getFlags": {
            "desc": "Get all flags "
          },
          "deleteFlags": {
            "desc": "Delete all flags"
          }
        }
      },
      "hash": "7940c6134054d9ad65219ab1b2444438e1141e77"
    }
  },
  "@dualbox/dualbox-ui-example-inout-ui": {
    "hash": "beb8ab4e5ecb9dc2f3097b03d8fcc404d8e13d9e",
    "pkg": {
      "name": "@dualbox/dualbox-ui-example-inout-ui",
      "version": "1.0.59",
      "description": "Example of a ui with both input and output.",
      "main": "dist/ExampleInOutUI.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "prefix": {
            "type": "String",
            "value": "default"
          }
        },
        "output": {
          "result": {
            "type": "String"
          }
        }
      },
      "hash": "beb8ab4e5ecb9dc2f3097b03d8fcc404d8e13d9e"
    }
  },
  "@dualbox/dualbox-ui-loader": {
    "hash": "f7d36fd1f09d64fe38722cc5a0c98bac70be9968",
    "pkg": {
      "name": "@dualbox/dualbox-ui-loader",
      "version": "1.0.60",
      "description": "Loader with a spinner",
      "main": "dist/loader.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.11.0"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "desc": "A component to display a nice loader. Use it with hide/show events",
        "input": {},
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs and process to display"
          }
        }
      },
      "hash": "f7d36fd1f09d64fe38722cc5a0c98bac70be9968"
    }
  },
  "@dualbox/dualbox-module-array-number-average": {
    "hash": "12458d02ebe7792ade976cac64c3211b3a94ad16",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-number-average",
      "version": "1.0.60",
      "description": "Returns the average value of a number array.",
      "main": "array-number-average.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<Number>",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number",
            "desc": "The average value of the given number array"
          }
        }
      },
      "hash": "12458d02ebe7792ade976cac64c3211b3a94ad16"
    }
  },
  "@dualbox/dualbox-module-array-push": {
    "hash": "91e92083a7d48aad455a4ed800baa1fa3045f302",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push",
      "version": "1.0.60",
      "description": "Add a new value at the end of the array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": false
          },
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "91e92083a7d48aad455a4ed800baa1fa3045f302"
    }
  },
  "@dualbox/dualbox-module-array-push-10": {
    "hash": "c28df1a067704fe5d7b7ee74ce60783c3c6824d0",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-10",
      "version": "1.0.60",
      "description": "Add 10 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          },
          "v5": {
            "type": "*",
            "const": true
          },
          "v6": {
            "type": "*",
            "const": true
          },
          "v7": {
            "type": "*",
            "const": true
          },
          "v8": {
            "type": "*",
            "const": true
          },
          "v9": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "c28df1a067704fe5d7b7ee74ce60783c3c6824d0"
    }
  },
  "@dualbox/dualbox-module-array-push-12": {
    "hash": "931c87f9b199766664c7933e2314b4974be54978",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-12",
      "version": "1.0.60",
      "description": "Add 12 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          },
          "v5": {
            "type": "*",
            "const": true
          },
          "v6": {
            "type": "*",
            "const": true
          },
          "v7": {
            "type": "*",
            "const": true
          },
          "v8": {
            "type": "*",
            "const": true
          },
          "v9": {
            "type": "*",
            "const": true
          },
          "v10": {
            "type": "*",
            "const": true
          },
          "v11": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "931c87f9b199766664c7933e2314b4974be54978"
    }
  },
  "@dualbox/dualbox-module-array-push-2": {
    "hash": "56d00458a2b3826af9409c738b2535d8a3910fef",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-2",
      "version": "1.0.60",
      "description": "Add 2 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "56d00458a2b3826af9409c738b2535d8a3910fef"
    }
  },
  "@dualbox/dualbox-module-array-push-3": {
    "hash": "7c2737da6e79799509dac88a2e501719f2da49cf",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-3",
      "version": "1.0.60",
      "description": "Add 3 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "7c2737da6e79799509dac88a2e501719f2da49cf"
    }
  },
  "@dualbox/dualbox-module-array-push-4": {
    "hash": "02584537f6ed995604b9f4a1917969ab936bdc2c",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-4",
      "version": "1.0.60",
      "description": "Add 4 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "02584537f6ed995604b9f4a1917969ab936bdc2c"
    }
  },
  "@dualbox/dualbox-module-array-push-5": {
    "hash": "f0a8ca2fbde0c21ce00f98c068739b351d3c3426",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-5",
      "version": "1.0.60",
      "description": "Add 5 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "f0a8ca2fbde0c21ce00f98c068739b351d3c3426"
    }
  },
  "@dualbox/dualbox-module-array-push-6": {
    "hash": "fddf9fbe916c88dcfa1d3ebce90d5b88381e115d",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-6",
      "version": "1.0.60",
      "description": "Add 6 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          },
          "v5": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "fddf9fbe916c88dcfa1d3ebce90d5b88381e115d"
    }
  },
  "@dualbox/dualbox-module-array-push-7": {
    "hash": "630c3ddbf57e38375c0142b13d529950c969c72c",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-7",
      "version": "1.0.60",
      "description": "Add 7 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          },
          "v5": {
            "type": "*",
            "const": true
          },
          "v6": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "630c3ddbf57e38375c0142b13d529950c969c72c"
    }
  },
  "@dualbox/dualbox-module-array-push-8": {
    "hash": "fabaf6323961ea97a0087c9b01f564d54ff5a83e",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-push-8",
      "version": "1.0.60",
      "description": "Add 8 values to an array.",
      "main": "push.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "v0": {
            "type": "*",
            "const": true
          },
          "v1": {
            "type": "*",
            "const": true
          },
          "v2": {
            "type": "*",
            "const": true
          },
          "v3": {
            "type": "*",
            "const": true
          },
          "v4": {
            "type": "*",
            "const": true
          },
          "v5": {
            "type": "*",
            "const": true
          },
          "v6": {
            "type": "*",
            "const": true
          },
          "v7": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "fabaf6323961ea97a0087c9b01f564d54ff5a83e"
    }
  },
  "@dualbox/dualbox-module-array-range-8": {
    "hash": "e1fc02fb4613a56765c10a8e1e031a5dc87d7e33",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-range-8",
      "version": "1.0.60",
      "description": "Get a maximum of 8 values from an array.",
      "main": "range8.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          },
          "start": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "end": {
            "type": "Number",
            "value": 7,
            "const": true
          }
        },
        "output": {
          "value0": {
            "type": "*"
          },
          "value1": {
            "type": "*"
          },
          "value2": {
            "type": "*"
          },
          "value3": {
            "type": "*"
          },
          "value4": {
            "type": "*"
          },
          "value5": {
            "type": "*"
          },
          "value6": {
            "type": "*"
          },
          "value7": {
            "type": "*"
          }
        }
      },
      "hash": "e1fc02fb4613a56765c10a8e1e031a5dc87d7e33"
    }
  },
  "@dualbox/dualbox-module-array-set": {
    "hash": "9dbd95675a01cec4b676f434575417de22e946a3",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-set",
      "version": "1.0.60",
      "description": "Set a given value in an arry index or reversed index.",
      "main": "set.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>"
          },
          "i": {
            "type": "Number",
            "desc": "Index or reversed index where to set the value"
          },
          "value": {
            "type": "*",
            "desc": "Value to set"
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "9dbd95675a01cec4b676f434575417de22e946a3"
    }
  },
  "@dualbox/dualbox-module-array-slice": {
    "hash": "4dfedd1eb32dc1e2d23ed8e9dbf5e8267179c5d0",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-slice",
      "version": "1.0.60",
      "description": "Return a piece of the array, from index start to index end (end exluded). If start === end, will return an empty array.",
      "main": "slice.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          },
          "start": {
            "type": "Number"
          },
          "end": {
            "type": "Number"
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>"
          }
        }
      },
      "hash": "4dfedd1eb32dc1e2d23ed8e9dbf5e8267179c5d0"
    }
  },
  "@dualbox/dualbox-module-array-valueat": {
    "hash": "951dc9bb1de95140aa33e72a3152ce2ce2e4bb05",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-valueat",
      "version": "1.0.60",
      "description": "Returns the value at position i in the given array.",
      "main": "valueat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          },
          "i": {
            "type": "Number"
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "951dc9bb1de95140aa33e72a3152ce2ce2e4bb05"
    }
  },
  "@dualbox/dualbox-module-baker-extract": {
    "hash": "82c600aa24de78945c93ea5063f38728a2a7855f",
    "pkg": {
      "name": "@dualbox/dualbox-module-baker-extract",
      "version": "1.0.58",
      "description": "Extract 6 faces from a baker (1024x1024)",
      "main": "baker-extract.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "baker": {
            "type": "ImageData",
            "const": true
          },
          "blurring": {
            "type": "Number",
            "desc": "Wanted level of blur from 0 to 4. Note that blurring will limit the possible resolution : 0: size 3(8) to 8(256) / 1: size 2(4) to 7(128) / 2: size 1(2) to 6(64) / 3: size 0(1) to (5)32 / 4: (4)16 only.",
            "const": true
          },
          "size": {
            "type": "Number",
            "desc": "Size of faces, as a power of 2 (2^n), from 0 to 8. So from 2 to 256.",
            "const": true
          }
        },
        "output": {
          "up": {
            "type": "ImageData",
            "desc": "Upper face"
          },
          "down": {
            "type": "ImageData",
            "desc": "Lower face"
          },
          "front": {
            "type": "ImageData",
            "desc": "front face",
            "const": true
          },
          "back": {
            "type": "ImageData",
            "desc": "back face"
          },
          "right": {
            "type": "ImageData",
            "desc": "right face"
          },
          "left": {
            "type": "ImageData",
            "desc": "left face"
          }
        }
      },
      "hash": "82c600aa24de78945c93ea5063f38728a2a7855f"
    }
  },
  "@dualbox/dualbox-module-unzip-file": {
    "hash": "c998db66c8f398a7e53df00281b4d8a64c30a268",
    "pkg": {
      "name": "@dualbox/dualbox-module-unzip-file",
      "version": "1.0.59",
      "description": "Unzip the file inside the given zip. Only works with zip containing 1 file. The resulting filename will be the name of the zip, not the name of the file inside.",
      "main": "UnzipFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A zip file to unzip. Assumption : there is only 1 file in the zip archive."
          }
        },
        "output": {
          "file": {
            "type": "File",
            "desc": "The file extracted from the zip. Name of this file will be the name of the zip file given as argument."
          }
        }
      },
      "hash": "c998db66c8f398a7e53df00281b4d8a64c30a268"
    }
  },
  "@dualbox/dualbox-module-boolean-and": {
    "hash": "baa79048d64d24a1fd8a581a80c96495c3e0150c",
    "pkg": {
      "name": "@dualbox/dualbox-module-boolean-and",
      "version": "1.0.60",
      "description": "Return the AND operation between 2 booleans",
      "main": "boolean-and.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "b1": {
            "type": "Boolean",
            "const": true
          },
          "b2": {
            "type": "Boolean",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "baa79048d64d24a1fd8a581a80c96495c3e0150c"
    }
  },
  "@dualbox/dualbox-module-boolean-or": {
    "hash": "23071cc39605f530203da321b5c74b90717f196b",
    "pkg": {
      "name": "@dualbox/dualbox-module-boolean-or",
      "version": "1.0.60",
      "description": "Return the or operation between 2 booleans",
      "main": "boolean-or.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "b1": {
            "type": "Boolean",
            "const": true
          },
          "b2": {
            "type": "Boolean",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "23071cc39605f530203da321b5c74b90717f196b"
    }
  },
  "@dualbox/dualbox-module-buffer-tostring": {
    "hash": "5ae9b3eb5a61d30830d2553fc7e95f28f3143215",
    "pkg": {
      "name": "@dualbox/dualbox-module-buffer-tostring",
      "version": "1.0.60",
      "description": "Conert a given buffer to a string. Encoding can be specified (utf8, ascii, binary...) Default is utf8, see node js Buffer.toString for a detailed API.",
      "main": "buffer-tostring.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-buffer": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "buff": {
            "type": "Buffer",
            "const": true
          },
          "encoding": {
            "type": "String",
            "value": "utf8"
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "5ae9b3eb5a61d30830d2553fc7e95f28f3143215"
    }
  },
  "@dualbox/dualbox-module-conditional": {
    "hash": "a76995e2372af9211d38371f73ab6bea9d0ab960",
    "pkg": {
      "name": "@dualbox/dualbox-module-conditional",
      "version": "1.0.59",
      "description": "DEPRECATED : please use dualbox-core-if instead since in this module, both branch are evaluated. Simple conditional branching for your app, this module can output 2 different values depending on a boolean input.",
      "main": "conditional.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "condition": {
            "type": "Boolean"
          },
          "valtrue": {
            "type": "*",
            "const": true
          },
          "valfalse": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "result": {
            "type": "*"
          }
        }
      },
      "hash": "a76995e2372af9211d38371f73ab6bea9d0ab960"
    }
  },
  "@dualbox/dualbox-module-dataurl-get-file-size": {
    "hash": "aca39b76785668300cc8ab598761039bc180e1c9",
    "pkg": {
      "name": "@dualbox/dualbox-module-dataurl-get-file-size",
      "version": "1.0.59",
      "description": "Compute the file size of an image represented by a dataURL.",
      "main": "dataurl-get-file-size.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "dataURL": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "size": {
            "type": "Number",
            "desc": "The expected file size in bytes."
          }
        }
      },
      "hash": "aca39b76785668300cc8ab598761039bc180e1c9"
    }
  },
  "@dualbox/dualbox-module-dataurl-to-imagedata": {
    "hash": "bd7ebaee0bd0e0af3786cee644ac026755b72bf1",
    "pkg": {
      "name": "@dualbox/dualbox-module-dataurl-to-imagedata",
      "version": "1.0.59",
      "description": "Convert a dataURL image to an ImageData object.",
      "main": "dataurl-to-imagedata.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "dataURL": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData"
          }
        }
      },
      "hash": "bd7ebaee0bd0e0af3786cee644ac026755b72bf1"
    }
  },
  "@dualbox/dualbox-module-delay": {
    "hash": "dc3efb0922fe843fd2a163d9bde14ee9fd2b77c4",
    "pkg": {
      "name": "@dualbox/dualbox-module-delay",
      "version": "1.0.59",
      "description": "Module which will wait a certain amount of time before passing its value input into its output. Mainly useful for debugging.",
      "main": "delay.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "time": {
            "type": "Number",
            "value": 1000
          },
          "value": {
            "type": "*"
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "dc3efb0922fe843fd2a163d9bde14ee9fd2b77c4"
    }
  },
  "@dualbox/dualbox-module-dataurl-to-file": {
    "hash": "b24220497ada41645f94d29dd93f938eb1133a04",
    "pkg": {
      "name": "@dualbox/dualbox-module-dataurl-to-file",
      "version": "1.0.60",
      "description": "",
      "main": "DataURLToFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "dataurl": {
            "type": "String"
          },
          "name": {
            "type": "String",
            "desc": "Name of the file",
            "value": "image"
          }
        },
        "output": {
          "file": {
            "type": "File",
            "const": true
          }
        }
      },
      "false": {},
      "hash": "b24220497ada41645f94d29dd93f938eb1133a04"
    }
  },
  "@dualbox/dualbox-module-equals": {
    "hash": "d657bac8a43fefa4e7094b6a02f6f58cf8345b34",
    "pkg": {
      "name": "@dualbox/dualbox-module-equals",
      "version": "1.0.59",
      "description": "Determine if two elements are equals or not.",
      "main": "equals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "el1": {
            "type": "*",
            "const": true
          },
          "el2": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "d657bac8a43fefa4e7094b6a02f6f58cf8345b34"
    }
  },
  "@dualbox/dualbox-module-fail": {
    "hash": "27f6ac0480cb502426e70098aab12a9368a22091",
    "pkg": {
      "name": "@dualbox/dualbox-module-fail",
      "version": "1.0.59",
      "description": "Module that fails if it's called. Useful for testing",
      "main": "fail.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62"
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "output": {
          "result": {
            "type": "*"
          }
        }
      },
      "hash": "27f6ac0480cb502426e70098aab12a9368a22091"
    }
  },
  "@dualbox/dualbox-module-file-decompose": {
    "hash": "39fb4b7c1ae13aa83fc6f4f1d7fad473fd1b24aa",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-decompose",
      "version": "1.0.60",
      "description": "Decompose a file",
      "main": "file-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true
          }
        },
        "output": {
          "data": {
            "type": "Buffer"
          },
          "ext": {
            "type": "String"
          },
          "name": {
            "type": "String"
          }
        }
      },
      "false": {},
      "hash": "39fb4b7c1ae13aa83fc6f4f1d7fad473fd1b24aa"
    }
  },
  "@dualbox/dualbox-module-file-get-size": {
    "hash": "3f27f522ac0c5281be8581f70e7ea77569896738",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-get-size",
      "version": "1.0.59",
      "description": "Get the size of a file in bytes",
      "main": "file-get-size.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true
          }
        },
        "output": {
          "size": {
            "type": "Number"
          }
        }
      },
      "false": {},
      "hash": "3f27f522ac0c5281be8581f70e7ea77569896738"
    }
  },
  "@dualbox/dualbox-module-file-to-imagedata": {
    "hash": "6a445dc4c5e926617c8e52515b58affb39bcf651",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-imagedata",
      "version": "1.0.60",
      "description": "",
      "main": "FileToImageData.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-imagedata": "^1.0.17"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData"
          }
        }
      },
      "false": {},
      "hash": "6a445dc4c5e926617c8e52515b58affb39bcf651"
    }
  },
  "@dualbox/dualbox-module-from-json": {
    "hash": "be34a41b0575e9e2f339556fc60ce3e6d3268757",
    "pkg": {
      "name": "@dualbox/dualbox-module-from-json",
      "version": "1.0.60",
      "description": "Generic module to transform any DualBox JSON object into the corresponding instanciated object.",
      "main": "from-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "be34a41b0575e9e2f339556fc60ce3e6d3268757"
    }
  },
  "@dualbox/dualbox-module-geometry-mesh-arrangement": {
    "hash": "f06811c200313122514ceb82209c2964b8aff7d8",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-mesh-arrangement",
      "version": "1.0.59",
      "description": "Resolve self-intersections and duplicate faces of a mesh",
      "main": "geometry-mesh-arrangement.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-dualbox-csg": "^1.0.36",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to arrange. A new geometry will be returned, without any self-intersections or duplicate faces"
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "f06811c200313122514ceb82209c2964b8aff7d8"
    }
  },
  "@dualbox/dualbox-module-geometry-compute-raycast-optim-octree": {
    "hash": "d9cb63771070560d171b23db803202b279548e73",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-compute-raycast-optim-octree",
      "version": "1.0.46",
      "description": "Compute internal structure for faster raycasting on Meshes using this geometry.",
      "main": "geometry-compute-raycast-optim-octree.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry"
          },
          "maxDepth": {
            "type": "Number",
            "value": null,
            "desc": "Maximum depth of the octree. 6 is already a big number here, 7 may crash your browser. Never recommended to go above 7 execept if you can have striong assumptions on the mesh repartition. If null, automatic parameters will be used."
          },
          "cellMaxFace": {
            "type": "Number",
            "value": null,
            "desc": "Maximum number of faces per cell. Only apply to cells above the maximum depth. If null, automatic parameters will be used."
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The same geometry containing internal structure for raycasting speedup. Any mesh using this geometry will benefict from the raycasting optimization."
          }
        }
      },
      "hash": "d9cb63771070560d171b23db803202b279548e73"
    }
  },
  "@dualbox/dualbox-module-file-to-dataurl": {
    "hash": "547b389fa49177feeb5fb47e099b45546e7c077a",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-dataurl",
      "version": "1.0.60",
      "description": "",
      "main": "FileToDataURL.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true
          }
        },
        "output": {
          "dataurl": {
            "type": "String"
          }
        }
      },
      "false": {},
      "hash": "547b389fa49177feeb5fb47e099b45546e7c077a"
    }
  },
  "@dualbox/dualbox-module-imagedata": {
    "hash": "5c2d3c72a372f00d92039d96eb8261f954ecf786",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata",
      "version": "1.0.59",
      "description": "Build an ImageData object.",
      "main": "imagedata.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "width": {
            "type": "Number",
            "const": true
          },
          "height": {
            "type": "Number",
            "const": true
          },
          "data": {
            "type": "Uint8ClampedArray",
            "const": true,
            "value": null
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData"
          }
        }
      },
      "hash": "5c2d3c72a372f00d92039d96eb8261f954ecf786"
    }
  },
  "@dualbox/dualbox-module-imagedata-concat-symbols": {
    "hash": "4ee9cf7dbfd94316ee79858d29e1b0ba768213fb",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-concat-symbols",
      "version": "1.0.38",
      "description": "Given a Map from string to imagedata, this function will concat all the images in x to create a new image according to the given array of symbols. Can be useful for example to create an image from some text.",
      "main": "imagedata-concat-symbols.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "map": {
            "type": "Map<String,ImageData>",
            "const": true,
            "desc": "Contain the imagedata for each symbol. Note that each ImageData must have the same height as the others."
          },
          "symbols": {
            "type": "Array<String>",
            "const": true,
            "desc": "An array of symbols which must be present in the map"
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The concatenation of images according to the symbols array."
          }
        }
      },
      "hash": "4ee9cf7dbfd94316ee79858d29e1b0ba768213fb"
    }
  },
  "@dualbox/dualbox-module-imagedata-copy-pixel-to": {
    "hash": "5a7fb293cbf65f8e3ce084725e6daf8f7f862f33",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-copy-pixel-to",
      "version": "1.0.59",
      "description": "replace a pixel from a image data",
      "main": "imagedata-copy-pixel-to.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "image": {
            "type": "ImageData",
            "const": true
          },
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          },
          "image2": {
            "type": "ImageData",
            "const": false
          },
          "x2": {
            "type": "Number",
            "const": true
          },
          "y2": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "image": {
            "type": "ImageData"
          }
        }
      },
      "hash": "5a7fb293cbf65f8e3ce084725e6daf8f7f862f33"
    }
  },
  "@dualbox/dualbox-module-imagedata-fill": {
    "hash": "a2d6a02853406c6148cf201086a8af6f12335d46",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-fill",
      "version": "1.0.38",
      "description": "Fill a rectangle in the image with the given color.",
      "main": "imagedata-fill.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "r": {
            "type": "Number",
            "const": true,
            "desc": "The red channel of the color to fill the image with.Should be in [0,255]."
          },
          "g": {
            "type": "Number",
            "const": true,
            "desc": "The green channel of the color to fill the image with.Should be in [0,255]."
          },
          "b": {
            "type": "Number",
            "const": true,
            "desc": "The blue channel of the color to fill the image with.Should be in [0,255]."
          },
          "a": {
            "type": "Number",
            "const": true,
            "desc": "The alpha to set on each pixel filled. Should be in [0,255]."
          },
          "x": {
            "type": "Number",
            "const": true,
            "value": 0,
            "desc": "Start x position to fill. Must be in the range [0,imgdata.width]. Default to 0."
          },
          "y": {
            "type": "Number",
            "const": true,
            "value": 0,
            "desc": "Start y position to fill. Must be in the range [0,imgdata.height]. Default to 0."
          },
          "w": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "The width in x of the rectangle to fill. Must be in the range [0,imgdata.width]. Default is null, which will rescolve as imgdata.width."
          },
          "h": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "The height in y of the rectangle to fill. Must be in the range [0,imgdata.height]. Default is null, which will rescolve as imgdata.height."
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The resize imagedata."
          }
        }
      },
      "hash": "a2d6a02853406c6148cf201086a8af6f12335d46"
    }
  },
  "@dualbox/dualbox-module-imagedata-draw-imagedata": {
    "hash": "9d6bc7a688271e1bce84a477e74fba1c8b5ad187",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-draw-imagedata",
      "version": "1.0.59",
      "description": "Copy all pixels from an imagedata2 to an imagedata, in the selected rectangle.",
      "main": "imagedata-draw-imagedata.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "x": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "Start x position to draw. Must be in the range [0,imgdata.width]. Default to null, which is x such that the image to be drawn will be centered in x."
          },
          "y": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "Start y position to draw. Must be in the range [0,imgdata.height]. Default to null, which is y such that the image to be drawn will be centered in x."
          },
          "w": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "The width in x of the rectangle to fill. Default is null, which will resolve as imgdata2.width."
          },
          "h": {
            "type": "Number",
            "const": true,
            "value": null,
            "desc": "The height in y of the rectangle to fill. Default is null, which will resolve as imgdata2.height."
          },
          "imgdata2": {
            "type": "ImageData",
            "const": true,
            "desc": "The image to be drawn on imgdata"
          },
          "blend": {
            "type": "String",
            "value": "none",
            "const": true,
            "desc": "Decide how the blending will occur depending for transparent images. Default is 'none', which means imgdata2 pixels will replace rgba values of imgdata. Use 'standard' for standard alpha blending"
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData"
          }
        }
      },
      "hash": "9d6bc7a688271e1bce84a477e74fba1c8b5ad187"
    }
  },
  "@dualbox/dualbox-module-imagedata-decompose": {
    "hash": "360a654f8005f0c43320a3cde2d67997c69bb86a",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-decompose",
      "version": "1.0.59",
      "description": "Decompose an ImageData object.",
      "main": "imagedata-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": true
          }
        },
        "output": {
          "width": {
            "type": "Number"
          },
          "height": {
            "type": "Number"
          },
          "data": {
            "type": "Uint8ClampedArray"
          }
        }
      },
      "hash": "360a654f8005f0c43320a3cde2d67997c69bb86a"
    }
  },
  "@dualbox/dualbox-module-imagedata-filter-blur-gauss": {
    "hash": "417a1cb347f9ca8a57448b2148339e95a1e6b7a2",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-filter-blur-gauss",
      "version": "1.0.59",
      "description": "Apply a gaussian blur filter to this image",
      "main": "imagedata-filter-blur-gauss.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "radius": {
            "type": "Number",
            "const": true,
            "desc": "Radius of the blur, in pixel. Only supports integer now."
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The filtered image."
          }
        }
      },
      "hash": "417a1cb347f9ca8a57448b2148339e95a1e6b7a2"
    }
  },
  "@dualbox/dualbox-module-imagedata-filter-convolution": {
    "hash": "c2932235005d6da5f9e861d8938652b708c54554",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-filter-convolution",
      "version": "1.0.59",
      "description": "Apply a convolution filter to this image",
      "main": "imagedata-filter-convolution.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "weights": {
            "type": "Array<Number>",
            "const": true,
            "desc": "An array representing the convolution filter weights. Must be a square (Typically 3x3 or 5x5 matrix)."
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The filtered image."
          }
        }
      },
      "hash": "c2932235005d6da5f9e861d8938652b708c54554"
    }
  },
  "@dualbox/dualbox-module-imagedata-mask-circle": {
    "hash": "bb1edda43c74ad7636bfa074d86724bd1fc28970",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-mask-circle",
      "version": "1.0.32",
      "description": "Mask the given image using a circle (or an elipse) centered in the image center. Center pixels will have alpha 1 and outer pixels alpha 0.",
      "main": "imagedata-mask-circle.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The mask imagedata."
          }
        }
      },
      "hash": "bb1edda43c74ad7636bfa074d86724bd1fc28970"
    }
  },
  "@dualbox/dualbox-module-imagedata-resize": {
    "hash": "8adb7fe3c78c76a0e7b7f64084956a79f9bd320e",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-resize",
      "version": "1.0.44",
      "description": "Resize the given imagedata to the given width and height in pixel. Note that proportion is not necessay conserved.",
      "main": "imagedata-resize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "width": {
            "type": "Number",
            "const": true,
            "desc": "Targeted width in pixel."
          },
          "height": {
            "type": "Number",
            "const": true,
            "desc": "Targeted height in pixel."
          },
          "mode": {
            "type": "String",
            "const": true,
            "value": "stretch",
            "desc": "Determine how the image should be processed with respect to the given dimensions. Options are 'stretch' or 'fit'. Stretch will deform the image, fit will have the image fit the given dimension as much as possible while preserving the aspect ratio."
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The resize imagedata."
          }
        }
      },
      "hash": "8adb7fe3c78c76a0e7b7f64084956a79f9bd320e"
    }
  },
  "@dualbox/dualbox-module-imagedata-to-dataurl": {
    "hash": "b4adfb4e25b256b9c2ffeceec90ad4ec4012feed",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-to-dataurl",
      "version": "1.0.59",
      "description": "Convert a imageData object to a dataURL string.",
      "main": "imagedata-to-dataurl.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": true
          },
          "quality": {
            "type": "Number",
            "desc": "Quality of the crypting when passing to jpeg",
            "value": 100,
            "const": true
          },
          "type": {
            "type": "String",
            "const": true,
            "value": "png",
            "desc": "The format of the dataURL. PNG or JPEG. Png by default since it does support alpha channel."
          }
        },
        "output": {
          "dataURL": {
            "type": "String"
          }
        }
      },
      "hash": "b4adfb4e25b256b9c2ffeceec90ad4ec4012feed"
    }
  },
  "@dualbox/dualbox-module-imagedata-to-file": {
    "hash": "b522850fd6610663add21f3a7c744b68c4eb64a6",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-to-file",
      "version": "1.0.60",
      "description": "",
      "main": "ImageDataToFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imagedata": {
            "type": "ImageData",
            "const": true
          },
          "quality": {
            "type": "Number",
            "desc": "Quality of the crypting when passing to jpeg, in [0-100] percent.",
            "value": 100,
            "const": true
          },
          "extension": {
            "type": "String",
            "const": true,
            "value": "jpg"
          },
          "name": {
            "type": "String",
            "desc": "Name of the file",
            "value": "image"
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "b522850fd6610663add21f3a7c744b68c4eb64a6"
    }
  },
  "@dualbox/dualbox-module-imagedata-to-json": {
    "hash": "dee3d080457c5306a89721dd0ee7d91780dcd44b",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-to-json",
      "version": "1.0.61",
      "description": "Convert a imageData object to a json object.",
      "main": "imagedata-to-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": true
          },
          "format": {
            "type": "String",
            "desc": "Format of the data field. Default is RGBA4x8 (Array of Uint8 of size 4*width*height). You can also use RGB2x8 (Array of Uint8 packing RGB values in a couple of bytes as [RRRRRGGG,GGGBBBBB]). Todo : RGB3x8, RGB16. Others?",
            "value": "RGBA4x8",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "dee3d080457c5306a89721dd0ee7d91780dcd44b"
    }
  },
  "@dualbox/dualbox-module-is-null": {
    "hash": "e44658612162f4e2d165f9b8310eacd5f8a81ecd",
    "pkg": {
      "name": "@dualbox/dualbox-module-is-null",
      "version": "1.0.59",
      "description": "Return true if the given value is null, false otherwise.",
      "main": "is-null.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "false": {},
      "hash": "e44658612162f4e2d165f9b8310eacd5f8a81ecd"
    }
  },
  "@dualbox/dualbox-module-http-load-file": {
    "hash": "be04f948727abd46fe44262f7c5d260f7b294e1c",
    "pkg": {
      "name": "@dualbox/dualbox-module-http-load-file",
      "version": "1.0.60",
      "description": "Perform a http request and return data as a file",
      "main": "http-load-file.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "http": "^0.0.0",
        "https": "^1.0.0",
        "url-parse": "^1.2.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "url": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "be04f948727abd46fe44262f7c5d260f7b294e1c"
    }
  },
  "@dualbox/dualbox-module-json-check-undefined": {
    "hash": "aa14f3d949e5d4842d08cf2c586186845bda01c0",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-check-undefined",
      "version": "1.0.30",
      "description": "Returns the given key value in the given json.",
      "main": "json-check-undefined.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          },
          "key": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "Boolean",
            "desc": "True if the given key is undefined."
          }
        }
      },
      "hash": "aa14f3d949e5d4842d08cf2c586186845bda01c0"
    }
  },
  "@dualbox/dualbox-module-json-get": {
    "hash": "8ddff1ff872db7857604ffb73cf3c1e82f814cf7",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-get",
      "version": "1.0.61",
      "description": "Returns the given key value in the given json.",
      "main": "json-get.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          },
          "key": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "8ddff1ff872db7857604ffb73cf3c1e82f814cf7"
    }
  },
  "@dualbox/dualbox-module-json-keys": {
    "hash": "3f2de7ec1176d5e5cbd295fa7d23437b69bd9b1f",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-keys",
      "version": "1.0.60",
      "description": "Return all the keys of this json object in an array of strings.",
      "main": "json-keys.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "keys": {
            "type": "Array<String>"
          }
        }
      },
      "hash": "3f2de7ec1176d5e5cbd295fa7d23437b69bd9b1f"
    }
  },
  "@dualbox/dualbox-module-json-merge": {
    "hash": "e85509ebfc5caadc9315bf0de5dcfc3202c6d0b0",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-merge",
      "version": "1.0.61",
      "description": "Merge two JSON objects to get one. First JSON has priority on duplicate keys.",
      "main": "json-merge.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json1": {
            "type": "json",
            "const": true
          },
          "json2": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "e85509ebfc5caadc9315bf0de5dcfc3202c6d0b0"
    }
  },
  "@dualbox/dualbox-module-json-parse": {
    "hash": "dbee6a8c1d4a38d75b1d50ddaa652743591218c1",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-parse",
      "version": "1.0.60",
      "description": "Parse a string to get json data as a JSON object.",
      "main": "json-parse.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "dbee6a8c1d4a38d75b1d50ddaa652743591218c1"
    }
  },
  "@dualbox/dualbox-module-file-to-json": {
    "hash": "5e18b283341ffd167ed97076834e915ec4487c13",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-json",
      "version": "1.0.61",
      "description": "Read a JSON file and convert it to a JSON Object. WARNING : if you want to actually export a File of any type into a Dualbox readable JSON, use module to-json instead.",
      "main": "FileToJson.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A JSON file."
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "5e18b283341ffd167ed97076834e915ec4487c13"
    }
  },
  "@dualbox/dualbox-module-json-set": {
    "hash": "dc5b96d2dba5e022dc1eba4d37dc809bd0fad1b9",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-set",
      "version": "1.0.60",
      "description": "Set a JSON value to a JSON key.",
      "main": "json-set.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": false
          },
          "key": {
            "type": "String",
            "const": true
          },
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "dc5b96d2dba5e022dc1eba4d37dc809bd0fad1b9"
    }
  },
  "@dualbox/dualbox-module-json-to-file": {
    "hash": "765f8e698a7ef836866485760a7dd906ef5826e7",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-to-file",
      "version": "1.0.60",
      "description": "",
      "main": "json-to-file.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true,
            "desc": "The JSON to set in the file."
          },
          "space": {
            "type": "Number",
            "value": null,
            "const": true,
            "desc": "Number of space for Indentation. Use null or a number <=0 to remove indentation. Default is null."
          },
          "name": {
            "type": "String",
            "value": "untitled",
            "const": true,
            "desc": "Name for the file."
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "765f8e698a7ef836866485760a7dd906ef5826e7"
    }
  },
  "@dualbox/dualbox-module-json-to-string": {
    "hash": "6ed71a875ef5cf670d5ba8b8c4aa1fbce1204ab1",
    "pkg": {
      "name": "@dualbox/dualbox-module-json-to-string",
      "version": "1.0.60",
      "description": "",
      "main": "json-to-string.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true,
            "desc": "The JSON to set in the file."
          },
          "space": {
            "type": "Number",
            "value": null,
            "const": true,
            "desc": "Number of space for Indentation. Use null or a number <=0 to remove indentation. Default is null."
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "6ed71a875ef5cf670d5ba8b8c4aa1fbce1204ab1"
    }
  },
  "@dualbox/dualbox-module-linegeometry-translate": {
    "hash": "f5ec80000589c5e58f3abfd9920cecc066f5c21a",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-translate",
      "version": "1.0.34",
      "description": "Translate the given LineGeometry.",
      "main": "linegeometry-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": false
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "f5ec80000589c5e58f3abfd9920cecc066f5c21a"
    }
  },
  "@dualbox/dualbox-module-map-string-get": {
    "hash": "ede2fcab4fd07b105fb3f6618a25ee73e12039bd",
    "pkg": {
      "name": "@dualbox/dualbox-module-map-string-get",
      "version": "1.0.57",
      "description": "Get a value from a map given a string key.",
      "main": "mapget.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "map": {
            "type": "Map<String,*>",
            "const": true
          },
          "key": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "value": {
            "type": "*"
          }
        }
      },
      "hash": "ede2fcab4fd07b105fb3f6618a25ee73e12039bd"
    }
  },
  "@dualbox/dualbox-module-map-string-has-key": {
    "hash": "8ca4c86c54571fb8045828e5a6582975eb1a705b",
    "pkg": {
      "name": "@dualbox/dualbox-module-map-string-has-key",
      "version": "1.0.57",
      "description": "Check if a given key exists in the given map.",
      "main": "map-has-key.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "map": {
            "type": "Map<String,*>",
            "const": true
          },
          "key": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "8ca4c86c54571fb8045828e5a6582975eb1a705b"
    }
  },
  "@dualbox/dualbox-module-map-string-keys": {
    "hash": "2aa419b860e3b011d6b81d65937a71a68d52eb61",
    "pkg": {
      "name": "@dualbox/dualbox-module-map-string-keys",
      "version": "1.0.57",
      "description": "Return all the keys of this map in an array of strings.",
      "main": "map-keys.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "map": {
            "type": "Map<String,*>",
            "const": true
          }
        },
        "output": {
          "keys": {
            "type": "Array<String>"
          }
        }
      },
      "hash": "2aa419b860e3b011d6b81d65937a71a68d52eb61"
    }
  },
  "@dualbox/dualbox-module-map-string-set": {
    "hash": "9ecc2f81c212ab05b6d11a7ec64e248ac787db1d",
    "pkg": {
      "name": "@dualbox/dualbox-module-map-string-set",
      "version": "1.0.57",
      "description": "Set a key value entry for a given map using type string as keys.",
      "main": "mapset.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "map": {
            "type": "Map<String,*>"
          },
          "key": {
            "type": "String",
            "const": true
          },
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "map": {
            "type": "Map<String,*>"
          }
        }
      },
      "hash": "9ecc2f81c212ab05b6d11a7ec64e248ac787db1d"
    }
  },
  "@dualbox/dualbox-module-material-get-color": {
    "hash": "338a5a0f0772fb2edd1b7f1938586913f1792768",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-get-color",
      "version": "1.0.42",
      "description": "Get the color of the material",
      "main": "material-get-color.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-material": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mat": {
            "type": "Material",
            "const": false,
            "desc": "The Material from which the color is wanted."
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "338a5a0f0772fb2edd1b7f1938586913f1792768"
    }
  },
  "@dualbox/dualbox-module-material-get-opacity": {
    "hash": "ec9b5529bef053b9ab5e99076b2ba5de79c6c36b",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-get-opacity",
      "version": "1.0.42",
      "description": "Get the opacity of the material",
      "main": "material-get-opacity.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-material": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mat": {
            "type": "Material",
            "const": false,
            "desc": "The Material from which the color is wanted."
          }
        },
        "output": {
          "o": {
            "type": "Number"
          }
        }
      },
      "hash": "ec9b5529bef053b9ab5e99076b2ba5de79c6c36b"
    }
  },
  "@dualbox/dualbox-module-material-standard-set": {
    "hash": "9cb46911018d31024e2b2ed70eb5b73cf59a87fe",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-standard-set",
      "version": "1.0.58",
      "description": "Set one of the standart material key values : color, metalness, roughness, envmap, etc...",
      "main": "StandardMaterialSet.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mat": {
            "type": "Material",
            "const": false,
            "desc": "The Material to change, must be created from material-standard (must be a StandardMaterial)."
          },
          "key": {
            "type": "String",
            "const": true,
            "desc": "The parameter to set : color, metalness, roughness, alphaMap, aoMap, aoMapIntensity, bumpMap, bumpScale, displacementMap, displacementScale, displacementBias, emissive, emissiveMap, emissiveIntensity, envMap, enMapIntensity, lightMap, lightMapIntensity, map, metalnessMap, morphNormals, morphTargets, normalMap, normalScale, refractionRatio, roughnessMap, skinning, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, shading, vertexColors, side, opacity."
          },
          "value": {
            "type": "*",
            "desc": "The value to set. Please see material-standard module for more details on what is expected for each parameter.",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "9cb46911018d31024e2b2ed70eb5b73cf59a87fe"
    }
  },
  "@dualbox/dualbox-module-math-deg-to-rad": {
    "hash": "e07be9f10c57aa63628631a835b41d080839c4ca",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-deg-to-rad",
      "version": "1.0.57",
      "description": "Converts degrees to radians.",
      "main": "math-deg-to-rad.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "e07be9f10c57aa63628631a835b41d080839c4ca"
    }
  },
  "@dualbox/dualbox-module-math-euclidean-modulo": {
    "hash": "1dd2a9efe7ca2e739d107b5aae11923a849a3e62",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-euclidean-modulo",
      "version": "1.0.57",
      "description": "Computes the euclidean modulo.",
      "main": "math-euclidean-modulo.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "n1": {
            "type": "Number",
            "const": true
          },
          "n2": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "n": {
            "type": "Number"
          }
        }
      },
      "hash": "1dd2a9efe7ca2e739d107b5aae11923a849a3e62"
    }
  },
  "@dualbox/dualbox-module-math-freeformula-4": {
    "hash": "9eccdbecd368a9dbeb46428a77bf0294d6c4dd71",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-freeformula-4",
      "version": "1.0.57",
      "description": "Evaluate a javascript mathematical formula based on a string.",
      "main": "freeformula4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "a": {
            "type": "Number",
            "value": 0
          },
          "b": {
            "type": "Number",
            "value": 0
          },
          "c": {
            "type": "Number",
            "value": 0
          },
          "d": {
            "type": "Number",
            "value": 0
          },
          "formula": {
            "type": "String"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "9eccdbecd368a9dbeb46428a77bf0294d6c4dd71"
    }
  },
  "@dualbox/dualbox-module-math-is-power-of-two": {
    "hash": "7f93a39e0e8573e809e913290f91a0a25b577abb",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-is-power-of-two",
      "version": "1.0.57",
      "description": "Return true if input is a power of 2.",
      "main": "math-is-power-of-two.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "7f93a39e0e8573e809e913290f91a0a25b577abb"
    }
  },
  "@dualbox/dualbox-module-math-log2": {
    "hash": "feb89b631baae8a425b6060157649339b8c65d8f",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-log2",
      "version": "1.0.57",
      "description": "return log2(x).",
      "main": "math-log2.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "feb89b631baae8a425b6060157649339b8c65d8f"
    }
  },
  "@dualbox/dualbox-module-math-lerp": {
    "hash": "664bfb5fa2d1f2678159a6150db9350917c4e275",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-lerp",
      "version": "1.0.57",
      "description": "Returns a value linearly interpolated from two known points based on the given interval.",
      "main": "math-lerp.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          },
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "664bfb5fa2d1f2678159a6150db9350917c4e275"
    }
  },
  "@dualbox/dualbox-module-math-nearest-power-of-two": {
    "hash": "9e86c9565d767aa8a955b3ec2c716a5f51b048e0",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-nearest-power-of-two",
      "version": "1.0.57",
      "description": "Returns the nearest power of 2 to a given number.",
      "main": "math-nearest-power-of-two.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "9e86c9565d767aa8a955b3ec2c716a5f51b048e0"
    }
  },
  "@dualbox/dualbox-module-math-next-power-of-two": {
    "hash": "2ffab93f977d374d49db8aa61f4cfaa630adc6d8",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-next-power-of-two",
      "version": "1.0.57",
      "description": "Returns the nearest power of 2 that is bigger than input.",
      "main": "math-next-power-of-two.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "2ffab93f977d374d49db8aa61f4cfaa630adc6d8"
    }
  },
  "@dualbox/dualbox-module-math-rad-to-deg": {
    "hash": "dc5b0b10256905a7fb877416a2ab4a421155cf74",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-rad-to-deg",
      "version": "1.0.57",
      "description": "Converts radians to degrees.",
      "main": "math-rad-to-deg.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "dc5b0b10256905a7fb877416a2ab4a421155cf74"
    }
  },
  "@dualbox/dualbox-module-loader-http": {
    "hash": "1095af563a9454b54a13eaaff17ddb86041d8e2a",
    "pkg": {
      "name": "@dualbox/dualbox-module-loader-http",
      "version": "1.0.57",
      "description": "Perform a http request and return data as a string",
      "main": "httploader.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "http": "^0.0.0",
        "https": "^1.0.0",
        "url-parse": "^1.2.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "url": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "data": {
            "type": "buffer"
          }
        }
      },
      "hash": "1095af563a9454b54a13eaaff17ddb86041d8e2a"
    }
  },
  "@dualbox/dualbox-module-math-rand-float": {
    "hash": "04eb3c8538cbd028b75a0efaf79db18e785b94b7",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-rand-float",
      "version": "1.0.57",
      "description": "Random float in the interval.",
      "main": "math-rand-float.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "04eb3c8538cbd028b75a0efaf79db18e785b94b7"
    }
  },
  "@dualbox/dualbox-module-math-rand-int": {
    "hash": "95387c901d75cade20e4253ab34b252183847f3b",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-rand-int",
      "version": "1.0.57",
      "description": "Random Int in the interval.",
      "main": "math-rand-int.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "95387c901d75cade20e4253ab34b252183847f3b"
    }
  },
  "@dualbox/dualbox-module-new-json": {
    "hash": "9e98ef0a5b4446a35addb158ac4e1bfeb829dfea",
    "pkg": {
      "name": "@dualbox/dualbox-module-new-json",
      "version": "1.0.60",
      "description": "Creates an empty JSON object.",
      "main": "new-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Sebastien Najjar <seb@dualbox.com>",
      "license": "ISC",
      "dualbox": {
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "9e98ef0a5b4446a35addb158ac4e1bfeb829dfea"
    }
  },
  "@dualbox/dualbox-module-not-equals": {
    "hash": "712eb880c170386bb48c81c878a67d739d7f9e8f",
    "pkg": {
      "name": "@dualbox/dualbox-module-not-equals",
      "version": "1.0.57",
      "description": "Determine if two elements are equals or not, return the negation.",
      "main": "not-equals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "el1": {
            "type": "*",
            "const": true
          },
          "el2": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "712eb880c170386bb48c81c878a67d739d7f9e8f"
    }
  },
  "@dualbox/dualbox-module-number-add": {
    "hash": "359ccb50dc6ca4f6c336a4bad0f9acf54a8f589f",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-add",
      "version": "1.0.58",
      "description": "Add two up to four numbers.",
      "main": "number-add.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          },
          "x3": {
            "type": "Number",
            "value": 0
          },
          "x4": {
            "type": "Number",
            "value": 0
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "359ccb50dc6ca4f6c336a4bad0f9acf54a8f589f"
    }
  },
  "@dualbox/dualbox-module-number-divide-by": {
    "hash": "3d6a6e09890993b336a4ca7f8261a3acb7f18092",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-divide-by",
      "version": "1.0.57",
      "description": "Operate the division between 2 numbers.",
      "main": "number-divide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "3d6a6e09890993b336a4ca7f8261a3acb7f18092"
    }
  },
  "@dualbox/dualbox-module-number-equals": {
    "hash": "b54a1a8e2ff6a1656deb1514659b4695fe1e48eb",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-equals",
      "version": "1.0.57",
      "description": "Test equality between two numbers.",
      "main": "number-equals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "b54a1a8e2ff6a1656deb1514659b4695fe1e48eb"
    }
  },
  "@dualbox/dualbox-module-number-from-string": {
    "hash": "17b29c2035290939553e920bbdbda48ae829e64e",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-from-string",
      "version": "1.0.57",
      "description": "Read a string to recover the number it represent, as a number. If the string does not represent a number, return null.",
      "main": "number-from-string.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "17b29c2035290939553e920bbdbda48ae829e64e"
    }
  },
  "@dualbox/dualbox-module-number-is-even": {
    "hash": "097f1230aa4f7440e1ea5fdd45285ca9d6a4a752",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-is-even",
      "version": "1.0.57",
      "description": "Test equality between two numbers.",
      "main": "number-is-even.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number"
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "097f1230aa4f7440e1ea5fdd45285ca9d6a4a752"
    }
  },
  "@dualbox/dualbox-module-number-is-greater": {
    "hash": "119a579e8296f8a91c9bc9e455b023d0e0b28484",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-is-greater",
      "version": "1.0.57",
      "description": "Test if x1 is greater than x2 (x1>x2). Option to accept equality (x1>=x2).",
      "main": "number-is-greater.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "orEqual": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, this function will return true also on the equality case."
          },
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "119a579e8296f8a91c9bc9e455b023d0e0b28484"
    }
  },
  "@dualbox/dualbox-module-number-is-lower": {
    "hash": "f1879c6cd4895ec4b3523c7e654378d484aa9e88",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-is-lower",
      "version": "1.0.57",
      "description": "Test if x1 is lower than x2 (x1<x2). Option to accept equality (x1<=x2).",
      "main": "number-is-lower.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "orEqual": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, this function will return true also on the equality case."
          },
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "f1879c6cd4895ec4b3523c7e654378d484aa9e88"
    }
  },
  "@dualbox/dualbox-module-number-max": {
    "hash": "6d93aad8815f4456079b99cd23690b6792216507",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-max",
      "version": "1.0.26",
      "description": "Return the max of two numbers.",
      "main": "number-max.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "6d93aad8815f4456079b99cd23690b6792216507"
    }
  },
  "@dualbox/dualbox-module-number-is-in-bounds": {
    "hash": "28ac66a005bacad557ff328f0367f40deaea07aa",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-is-in-bounds",
      "version": "1.0.57",
      "description": "Test if x is in ]min,max[. Option to test in [min,max[,]min,max] and [min,max]",
      "main": "number-is-in-bounds.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "orEqualMin": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, x will be tested in [min,max... if false, in ]min,max..."
          },
          "orEqualMax": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, x will be tested in ...min,max], if false, in ...min,max["
          },
          "x": {
            "type": "Number"
          },
          "min": {
            "type": "Number"
          },
          "max": {
            "type": "Number"
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "28ac66a005bacad557ff328f0367f40deaea07aa"
    }
  },
  "@dualbox/dualbox-module-number-min": {
    "hash": "41a8d31568f07b5156c5138d759c639e897903f5",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-min",
      "version": "1.0.26",
      "description": "Return the min of two numbers.",
      "main": "number-min.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "41a8d31568f07b5156c5138d759c639e897903f5"
    }
  },
  "@dualbox/dualbox-module-number-multiply": {
    "hash": "0348ec5b8ff25c8329468e7e2af3e117292b3a36",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-multiply",
      "version": "1.0.57",
      "description": "Multiply two numbers.",
      "main": "number-multiply.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "0348ec5b8ff25c8329468e7e2af3e117292b3a36"
    }
  },
  "@dualbox/dualbox-module-number-pi": {
    "hash": "84716be87f0b145de542b23cfac770dda4dff1c3",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-pi",
      "version": "1.0.57",
      "description": "Return PI as a Number.",
      "main": "number-pi.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {},
        "output": {
          "pi": {
            "type": "Number"
          }
        }
      },
      "hash": "84716be87f0b145de542b23cfac770dda4dff1c3"
    }
  },
  "@dualbox/dualbox-module-number-sub": {
    "hash": "ac45368b49f010613de6e16749374ac6291bca05",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-sub",
      "version": "1.0.58",
      "description": "Sub two up to four numbers.",
      "main": "number-sub.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "ac45368b49f010613de6e16749374ac6291bca05"
    }
  },
  "@dualbox/dualbox-module-number-round": {
    "hash": "2ce7aaf2a50ff7c1a21ee0268c127a81bbb5ea9d",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-round",
      "version": "1.0.57",
      "description": "Round a number.",
      "main": "number-round.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "2ce7aaf2a50ff7c1a21ee0268c127a81bbb5ea9d"
    }
  },
  "@dualbox/dualbox-module-number-to-string": {
    "hash": "b6ee9ea908cda2e93396a9495e4e3e854ccdd264",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-to-string",
      "version": "1.0.57",
      "description": "convert a number to string.",
      "main": "number-to-string.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "b6ee9ea908cda2e93396a9495e4e3e854ccdd264"
    }
  },
  "@dualbox/dualbox-module-quiblier-ruled-surface": {
    "hash": "e2a0928388e6ca683585dd8edd3cb2410c9a1e0c",
    "pkg": {
      "name": "@dualbox/dualbox-module-quiblier-ruled-surface",
      "version": "1.0.60",
      "description": "BUild a ruled surface from parametrization P(t)+ uV(t). See Wikipedia article.",
      "main": "ruledsurface.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "Ptx": {
            "type": "String",
            "desc": "Point parameter P(t), x(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "Pty": {
            "type": "String",
            "desc": "Point parameter P(t), y(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "Ptz": {
            "type": "String",
            "desc": "Point parameter P(t), z(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "Vtx": {
            "type": "String",
            "desc": "Point parameter V(t), x(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "Vty": {
            "type": "String",
            "desc": "Point parameter V(t), y(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "Vtz": {
            "type": "String",
            "desc": "Point parameter V(t), z(t) which must be a javascript valid mathematical expression with only parameter t."
          },
          "tmin": {
            "type": "Number",
            "value": 0
          },
          "tmax": {
            "type": "Number",
            "value": 1
          },
          "tstep": {
            "type": "Number",
            "value": 0.1
          },
          "umin": {
            "type": "Number",
            "value": -1
          },
          "umax": {
            "type": "Number",
            "value": 1
          },
          "ustep": {
            "type": "Number",
            "value": 0.1
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          },
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "e2a0928388e6ca683585dd8edd3cb2410c9a1e0c"
    }
  },
  "@dualbox/dualbox-module-string-charat": {
    "hash": "1d8a9dc865e5c92fcea785a89e555a613badc30d",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-charat",
      "version": "1.0.57",
      "description": "Returns the specified character from a string.",
      "main": "charat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "i": {
            "type": "Number"
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "1d8a9dc865e5c92fcea785a89e555a613badc30d"
    }
  },
  "@dualbox/dualbox-module-regexp-constructor": {
    "hash": "b5b191b71ffeee7227d4bab8f49e4a13c4ad5fde",
    "pkg": {
      "name": "@dualbox/dualbox-module-regexp-constructor",
      "version": "1.0.57",
      "description": "Constructor for a simple javascript regexp. For javascript users, this uses the constructor like RegExp('abc', 'g').",
      "main": "regexp.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "pattern": {
            "type": "String",
            "desc": "The pattern to match. See javascript RegExp documentation for syntax details."
          },
          "flags": {
            "type": "String",
            "value": "",
            "desc": "Flags for this RegExp. Default is none. Use g, i, m, u, y or combine those as you wish; ex: gi. default is none."
          }
        },
        "output": {
          "regexp": {
            "type": "regexp"
          }
        }
      },
      "hash": "b5b191b71ffeee7227d4bab8f49e4a13c4ad5fde"
    }
  },
  "@dualbox/dualbox-module-string-concat": {
    "hash": "20c60c82905eb19d0682e7d06a96e69db6c3084a",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-concat",
      "version": "1.0.57",
      "description": "Concat 2 up to 4 strings.",
      "main": "concat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s1": {
            "type": "String",
            "const": true
          },
          "s2": {
            "type": "String",
            "const": true
          },
          "s3": {
            "type": "String",
            "value": null,
            "const": true
          },
          "s4": {
            "type": "String",
            "value": null,
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "20c60c82905eb19d0682e7d06a96e69db6c3084a"
    }
  },
  "@dualbox/dualbox-module-string-charcodeat": {
    "hash": "86e7aaa98b7d98a8f8358354b761e940f558db39",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-charcodeat",
      "version": "1.0.57",
      "description": "Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points > 0x10000). If you want the entire code point value, use codePointAt.",
      "main": "charcodeat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "i": {
            "type": "Number"
          }
        },
        "output": {
          "n": {
            "type": "Number"
          }
        }
      },
      "hash": "86e7aaa98b7d98a8f8358354b761e940f558db39"
    }
  },
  "@dualbox/dualbox-module-string-codepointat": {
    "hash": "3371b5ceb23be645b08c78d77aece74275a763d9",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-codepointat",
      "version": "1.0.57",
      "description": "Returns a non-negative integer that is the Unicode code point value.",
      "main": "codepointat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "i": {
            "type": "Number"
          }
        },
        "output": {
          "n": {
            "type": "Number"
          }
        }
      },
      "hash": "3371b5ceb23be645b08c78d77aece74275a763d9"
    }
  },
  "@dualbox/dualbox-module-string-endswith": {
    "hash": "5d140e73725196612f9a3a3d5741223e7c3ecaf4",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-endswith",
      "version": "1.0.57",
      "description": "Determines whether a string ends with the characters of another string, returning true or false as appropriate.",
      "main": "endswith.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "desc": "The string to be searched.",
            "const": true
          },
          "search_s": {
            "type": "String",
            "desc": "The string to look for at the end of s",
            "const": true
          },
          "position": {
            "type": "Number",
            "value": null,
            "desc": "Optional. Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length."
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "5d140e73725196612f9a3a3d5741223e7c3ecaf4"
    }
  },
  "@dualbox/dualbox-module-string-equals": {
    "hash": "5e1efe3f406e82675b603bc6c589a50177b36431",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-equals",
      "version": "1.0.57",
      "description": "Returns true if and only if the 2 strings are equals.",
      "main": "string-equals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s1": {
            "type": "String",
            "const": true
          },
          "s2": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "5e1efe3f406e82675b603bc6c589a50177b36431"
    }
  },
  "@dualbox/dualbox-module-string-fromcharcode": {
    "hash": "fe0e363d53b0e9cbbc63aa533324571c465df474",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-fromcharcode",
      "version": "1.0.57",
      "description": "Returns a string created by using the specified sequence of Unicode values.",
      "main": "fromcharcode.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "n1": {
            "type": "Number"
          },
          "n2": {
            "type": "Number",
            "value": null
          },
          "n3": {
            "type": "Number",
            "value": null
          },
          "n4": {
            "type": "Number",
            "value": null
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "fe0e363d53b0e9cbbc63aa533324571c465df474"
    }
  },
  "@dualbox/dualbox-module-string-fromcodepoint": {
    "hash": "a079806e6f169e13f663347a46b32a5aab17b0c5",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-fromcodepoint",
      "version": "1.0.57",
      "description": "Returns a string created by using the specified sequence of code points. String.fromCharCode() alone cannot get the character at such a high code point. The following, on the other hand, can return a 4-byte character as well as the usual 2-byte ones (i.e., it can return a single character which actually has a string length of 2 instead of 1!)",
      "main": "fromcodepoint.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "n1": {
            "type": "Number"
          },
          "n2": {
            "type": "Number",
            "value": null
          },
          "n3": {
            "type": "Number",
            "value": null
          },
          "n4": {
            "type": "Number",
            "value": null
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "a079806e6f169e13f663347a46b32a5aab17b0c5"
    }
  },
  "@dualbox/dualbox-module-string-indexof": {
    "hash": "903a0a675acaac6e4db3c91dac3e0a7411fdb4ec",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-indexof",
      "version": "1.0.57",
      "description": "Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.",
      "main": "indexof.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "search_s": {
            "type": "String",
            "const": true
          },
          "from_index": {
            "type": "Number",
            "value": 0,
            "desc": "Optional. The index at which to start the searching forwards in the string. It can be any integer. The default value is 0, so the whole array is searched. If fromIndex < 0 the entire string is searched. If fromIndex >= str.length, the string is not searched and -1 is returned. Unless searchValue is an empty string, then str.length is returned."
          }
        },
        "output": {
          "i": {
            "type": "Number"
          }
        }
      },
      "hash": "903a0a675acaac6e4db3c91dac3e0a7411fdb4ec"
    }
  },
  "@dualbox/dualbox-module-string-includes": {
    "hash": "c4073da0932701e9df1f5d5fce7515a2b26afb2d",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-includes",
      "version": "1.0.57",
      "description": "Determines whether one string may be found within another string, returning true or false as appropriate.",
      "main": "includes.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "search_s": {
            "type": "String",
            "const": true
          },
          "position": {
            "type": "Number",
            "value": 0,
            "desc": "Optional. The position in this string at which to begin searching for search_s; defaults to 0."
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "c4073da0932701e9df1f5d5fce7515a2b26afb2d"
    }
  },
  "@dualbox/dualbox-module-string-islowercase": {
    "hash": "0391c38e8acdfa9244c8a6e8024e089f53cd89a1",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-islowercase",
      "version": "1.0.57",
      "description": "Return true if and only if the given string is full upper case.",
      "main": "islowercase.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "0391c38e8acdfa9244c8a6e8024e089f53cd89a1"
    }
  },
  "@dualbox/dualbox-module-string-isuppercase": {
    "hash": "0eda9a75bb5f5f55ef54cef8b82b3deeab0376c5",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-isuppercase",
      "version": "1.0.57",
      "description": "Return true if and only if the given string is full upper case.",
      "main": "isuppercase.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "0eda9a75bb5f5f55ef54cef8b82b3deeab0376c5"
    }
  },
  "@dualbox/dualbox-module-string-lastindexof": {
    "hash": "8070629473d03a03c2f16ca46f4d8513635a0568",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-lastindexof",
      "version": "1.0.57",
      "description": "returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.",
      "main": "lastindexof.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "search_s": {
            "type": "String",
            "const": true,
            "desc": "A string representing the value to search for. If searchValue is an empty string, then fromIndex is returned."
          },
          "from_index": {
            "type": "Number",
            "value": null,
            "desc": "The index at which to start searching backwards in the string. It can be any integer. The default value is +Infinity. If fromIndex >= str.length, the whole string is searched. If fromIndex < 0,  the behavior will be the same as if it would be 0."
          }
        },
        "output": {
          "i": {
            "type": "Number"
          }
        }
      },
      "hash": "8070629473d03a03c2f16ca46f4d8513635a0568"
    }
  },
  "@dualbox/dualbox-module-string-replace": {
    "hash": "e9ee8464df2c5c4c14afe368bac5d9edede2df3e",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-replace",
      "version": "1.0.57",
      "description": "Replace all occurences of a given substring in a given string with a given new string.",
      "main": "replace.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "sub_s": {
            "type": "String",
            "desc": "The string to be replaced.",
            "const": true
          },
          "new_s": {
            "type": "String",
            "desc": "The new string to replace all elements matching the regular expression"
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "e9ee8464df2c5c4c14afe368bac5d9edede2df3e"
    }
  },
  "@dualbox/dualbox-module-string-repeat": {
    "hash": "2ff51ea32b6a95df06aba279dd4f8be2298bff1b",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-repeat",
      "version": "1.0.57",
      "description": "Constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
      "main": "repeat.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "count": {
            "type": "Number",
            "desc": "An integer in [0, +infinity), indicating the number of times to repeat the string in the newly-created string that is to be returned."
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "2ff51ea32b6a95df06aba279dd4f8be2298bff1b"
    }
  },
  "@dualbox/dualbox-module-string-match": {
    "hash": "2d5b47b95115317f5f32dd6e488b362167391a79",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-match",
      "version": "1.0.57",
      "description": "Split a string into an array of strings matching the regular expression. This is simply a wrapper for the javascript method match. Refer to match documentation for advanced use.",
      "main": "match.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-regexp": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "regexp": {
            "type": "RegExp",
            "desc": "Javascript regular expression to be matched.",
            "const": true
          }
        },
        "output": {
          "arr_s": {
            "type": "Array<String>"
          }
        }
      },
      "hash": "2d5b47b95115317f5f32dd6e488b362167391a79"
    }
  },
  "@dualbox/dualbox-module-string-replace-regexp": {
    "hash": "20803f0ec554fffdf637f40362862d9120555375",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-replace-regexp",
      "version": "1.0.57",
      "description": "Replace sequences in the string matching the regular expression given as input, set the given new string instead.",
      "main": "replace-regexp.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-regexp": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "regexp": {
            "type": "RegExp",
            "desc": "the Regular Expression to match. See javascript documentation.",
            "const": true
          },
          "new_s": {
            "type": "String",
            "desc": "The new string to replace all elements matching the regular expression",
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "20803f0ec554fffdf637f40362862d9120555375"
    }
  },
  "@dualbox/dualbox-module-string-slice": {
    "hash": "2bf05b0015d0a186be418fbdf2c8b86704283ea6",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-slice",
      "version": "1.0.57",
      "description": "Extracts a section of a string and returns a new string.",
      "main": "slice.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "begin": {
            "type": "Number",
            "desc": "The zero-based index at which to begin extraction. If negative, it is treated as sourceLength + beginSlice where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength - 3)."
          },
          "end": {
            "type": "Number",
            "value": null,
            "desc": "Optional. The zero-based index at which to end extraction. If null, slice() extracts to the end of the string. If negative, it is treated as sourceLength + endSlice where sourceLength is the length of the string (for example, if endSlice is -3 it is treated as sourceLength - 3)."
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "2bf05b0015d0a186be418fbdf2c8b86704283ea6"
    }
  },
  "@dualbox/dualbox-module-string-split": {
    "hash": "d01de935d0bb9535846f9640cd91acf3f6515039",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-split",
      "version": "1.0.57",
      "description": "Splits a String object into an array of strings by separating the string into substrings",
      "main": "split.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "separator": {
            "type": "String",
            "value": "",
            "desc": "Optional. Specifies the character(s) to use for separating the string. The separator is treated as a string or a regular expression. If separator is an empty string (default), str is converted to an array of characters.",
            "const": true
          },
          "limit": {
            "type": "Number",
            "value": 1000000000000,
            "desc": "Optional. Integer specifying a limit on the number of splits to be found. The split() method still splits on every match of separator, until the number of split items match the limit or the string falls short of separator."
          }
        },
        "output": {
          "arr_s": {
            "type": "Array<String>"
          }
        }
      },
      "hash": "d01de935d0bb9535846f9640cd91acf3f6515039"
    }
  },
  "@dualbox/dualbox-module-string-startswith": {
    "hash": "e1e9fc9b7612d0d5bf3e6065b535e40ad9e2a749",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-startswith",
      "version": "1.0.57",
      "description": "Determines whether a string begins with the characters of another string, returning true or false as appropriate.",
      "main": "startswith.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "search_s": {
            "type": "String",
            "const": true
          },
          "position": {
            "type": "Number",
            "value": 0,
            "desc": "Optional. The position in this string at which to begin searching for searchString; defaults to 0."
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "e1e9fc9b7612d0d5bf3e6065b535e40ad9e2a749"
    }
  },
  "@dualbox/dualbox-module-string-substring": {
    "hash": "a79f1dd2f59ef5518c5d56214362a80528551d44",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-substring",
      "version": "1.0.57",
      "description": "Extracts a section of a string and returns a new string.",
      "main": "substring.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          },
          "begin": {
            "type": "Number",
            "desc": "An integer between 0 and the length of the string, specifying the offset into the string of the first character to include in the returned substring."
          },
          "end": {
            "type": "Number",
            "value": null,
            "desc": "Optional. An integer between 0 and the length of the string, which specifies the offset into the string of the first character not to include in the returned substring. If null, str length will be used."
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "a79f1dd2f59ef5518c5d56214362a80528551d44"
    }
  },
  "@dualbox/dualbox-module-string-switch-8": {
    "hash": "e65bfeeb9dcec67f7a41912eb91b7aab20c9184e",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-switch-8",
      "version": "1.0.57",
      "description": "Simple switch branching for your app, this module can output up to 8 different values depending on the input string value.",
      "main": "string-switch-8.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "value": {
            "type": "String"
          },
          "case1": {
            "type": "String"
          },
          "case2": {
            "type": "String"
          },
          "case3": {
            "type": "String",
            "value": null
          },
          "case4": {
            "type": "String",
            "value": null
          },
          "case5": {
            "type": "String",
            "value": null
          },
          "case6": {
            "type": "String",
            "value": null
          },
          "case7": {
            "type": "String",
            "value": null
          },
          "case8": {
            "type": "String",
            "value": null
          },
          "default": {
            "type": "*"
          },
          "res1": {
            "type": "*"
          },
          "res2": {
            "type": "*"
          },
          "res3": {
            "type": "*",
            "value": null
          },
          "res4": {
            "type": "*",
            "value": null
          },
          "res5": {
            "type": "*",
            "value": null
          },
          "res6": {
            "type": "*",
            "value": null
          },
          "res7": {
            "type": "*",
            "value": null
          },
          "res8": {
            "type": "*",
            "value": null
          }
        },
        "output": {
          "result": {
            "type": "*"
          }
        }
      },
      "hash": "e65bfeeb9dcec67f7a41912eb91b7aab20c9184e"
    }
  },
  "@dualbox/dualbox-module-string-to-file": {
    "hash": "762413e3380ee7a94231336017510a5c8a467805",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-to-file",
      "version": "1.0.48",
      "description": "",
      "main": "string-to-file.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true,
            "desc": "The String to set in the file."
          },
          "name": {
            "type": "String",
            "value": "untitled-geometry",
            "const": true,
            "desc": "Name for the file."
          },
          "format": {
            "type": "String",
            "value": "txt",
            "const": true,
            "desc": "Format for the file. No check on the format is done."
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "762413e3380ee7a94231336017510a5c8a467805"
    }
  },
  "@dualbox/dualbox-module-string-to-number": {
    "hash": "29093856fbe60c484b722b8997721fb9fc297e8b",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-to-number",
      "version": "1.0.57",
      "description": "Read a string to recover the number it represent, as a number. If the string does not represent a number, return null.",
      "main": "string-to-number.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "29093856fbe60c484b722b8997721fb9fc297e8b"
    }
  },
  "@dualbox/dualbox-module-string-tolowercase": {
    "hash": "7aa67bb31ef268ed47f6bdf705c1e43857ff7e4c",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-tolowercase",
      "version": "1.0.57",
      "description": "Returns the calling string value converted to lowercase.",
      "main": "tolowercase.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "7aa67bb31ef268ed47f6bdf705c1e43857ff7e4c"
    }
  },
  "@dualbox/dualbox-module-test-multi-compute": {
    "hash": "bcb1297edbd9b5b35176bcec90d373379e1b8b91",
    "pkg": {
      "name": "@dualbox/dualbox-module-test-multi-compute",
      "version": "1.0.57",
      "description": "This module aims at testing what would happen in a case of multi read. It will throw an exception if a compute is called when another compute is running.",
      "main": "multicompute.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "time": {
            "type": "Number",
            "value": 1000
          }
        },
        "output": {
          "value1": {
            "type": "Number"
          },
          "value2": {
            "type": "Number"
          }
        }
      },
      "hash": "bcb1297edbd9b5b35176bcec90d373379e1b8b91"
    }
  },
  "@dualbox/dualbox-module-string-touppercase": {
    "hash": "7bfd12d47731488b6202f097ef53690d94bdc692",
    "pkg": {
      "name": "@dualbox/dualbox-module-string-touppercase",
      "version": "1.0.57",
      "description": "Returns the calling string value converted to uppercase.",
      "main": "touppercase.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "String"
          }
        }
      },
      "hash": "7bfd12d47731488b6202f097ef53690d94bdc692"
    }
  },
  "@dualbox/dualbox-module-to-json": {
    "hash": "6319545f68f29d5a0791b4ea22a751295da70cbe",
    "pkg": {
      "name": "@dualbox/dualbox-module-to-json",
      "version": "1.0.58",
      "description": "Generic module to transform any DualBox object into a JSON object.",
      "main": "to-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "value": {
            "type": "*",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "6319545f68f29d5a0791b4ea22a751295da70cbe"
    }
  },
  "@dualbox/dualbox-module-scientifeet-get-cover-pattern-url": {
    "hash": "97c212f6ad768a54bc83fc91b46f6b4e0fa3f725",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-get-cover-pattern-url",
      "version": "1.0.62",
      "description": "Given a base url of the folder containing the cover patterns, build the complete URL where to fetch the image.",
      "main": "./get-cover-pattern-url.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "baseurl": {
            "type": "String",
            "const": true,
            "desc": "The base url where to find all the jpeg files."
          },
          "coversize": {
            "type": "String",
            "const": true
          },
          "solewidth": {
            "type": "String",
            "desc": "S, M or L.",
            "const": true
          },
          "sizemap": {
            "type": "json",
            "desc": "The mapping between a couple coversize+solewidth and the pattern file name to be used in production.",
            "const": true
          }
        },
        "output": {
          "url": {
            "type": "String"
          }
        },
        "object": "Module"
      },
      "hash": "97c212f6ad768a54bc83fc91b46f6b4e0fa3f725"
    }
  },
  "@dualbox/dualbox-module-scientifeet-load-cover-pattern": {
    "hash": "2510f1f5b7432b80e3046da97d88b2572c93c805",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-load-cover-pattern",
      "version": "1.0.66",
      "description": "Load the image of the cover. It is especially used to build the frame for sticking the cover to the insole.",
      "main": "./load-cover-pattern.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "pngDataURL": {
            "type": "String",
            "const": true,
            "desc": "The image of the cover patrtern in a PNG dataURL."
          },
          "footside": {
            "type": "String",
            "desc": "Either left or Right.",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json",
            "desc": "All data in JSON. Includes : .uvplane the geometry (in JSON) with uv coodinates, useful to find a point on the image using raytracing. .texData the texture data, as an ImageData object in JSON."
          }
        },
        "object": "Module"
      },
      "hash": "2510f1f5b7432b80e3046da97d88b2572c93c805"
    }
  },
  "@dualbox/dualbox-module-scientifeet-pattern-from-obj": {
    "hash": "a96d1da82d6a63ee8c1b2280664a44699d09b9a8",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-pattern-from-obj",
      "version": "1.0.67",
      "description": "Given an OBJ created by Julien Chiloux in GrassHopper, return a json description of all data necessary to create an insole.",
      "main": "./pattern-from-obj.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "The OBJ file containing all data."
          }
        },
        "output": {
          "json": {
            "type": "json",
            "desc": "The same data in json format"
          }
        },
        "object": "Module"
      },
      "hash": "a96d1da82d6a63ee8c1b2280664a44699d09b9a8"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-material": {
    "hash": "04fbd2d4cc9d184761f40e31c593825c59e630ad",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-material",
      "version": "1.0.53",
      "description": "Create a Material for the blobtree. Note that blobtree materials are defined only by color, roughness and metalness (like the basis of THREE.JS StandardMaterial). This is not and OpenGL material and can be used only on blobtree nodes and primitives.",
      "main": "blobtree-json-material.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "const": true
          },
          "roughness": {
            "type": "Number",
            "const": true
          },
          "metalness": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Material."
          }
        },
        "object": "Module"
      },
      "hash": "04fbd2d4cc9d184761f40e31c593825c59e630ad"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-material-from-standard": {
    "hash": "6899200f494334cc3b3201c0e171696872cfe0c3",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-material-from-standard",
      "version": "1.0.52",
      "description": "Copy a THREE JS StandardMaterial parameter into a Blobtree Material. This will only copy color, rougness and metalness.",
      "main": "blobtree-json-material-from-standard.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-material": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mat": {
            "type": "Material",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Material."
          }
        },
        "object": "Module"
      },
      "hash": "6899200f494334cc3b3201c0e171696872cfe0c3"
    }
  },
  "@dualbox/dualbox-module-tj-get-urls": {
    "hash": "9dcc7f9183bb116a3ac7bff6eca42e3ce5fc5d93",
    "pkg": {
      "name": "@dualbox/dualbox-module-tj-get-urls",
      "version": "1.0.57",
      "description": "Build the link between the start and end points of a textring geometry.",
      "main": "tj-get-urls.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "String",
            "desc": "The main word as a string."
          },
          "baseurl": {
            "type": "String",
            "desc": "The base url for the folder where to find all files. ex : <dualbox.io/drive/TJ-3D-Files>. Note there is no / at the end"
          },
          "apptype": {
            "type": "String",
            "desc": "The kind of app, since the rule may be different for rings, bracelets, etc..."
          }
        },
        "output": {
          "letter_urls": {
            "type": "Array<json>"
          },
          "link_urls": {
            "type": "Array<json>"
          }
        },
        "object": "Module"
      },
      "hash": "9dcc7f9183bb116a3ac7bff6eca42e3ce5fc5d93"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-node-compute-bbox": {
    "hash": "1ba222c5240f5fbdb9725af5986ffdd17c7f7f2c",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-node-compute-bbox",
      "version": "1.0.52",
      "description": "Compute the bounding box of the given node. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-node-compute-bbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "node": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "bbox": {
            "type": "Box3",
            "desc": "Bounding box of the blobtree node scalar field."
          }
        },
        "object": "Module"
      },
      "hash": "1ba222c5240f5fbdb9725af5986ffdd17c7f7f2c"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-node-add-child": {
    "hash": "a9837cb0abb9b3901fe865e1d22906cfbe929ce3",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-node-add-child",
      "version": "1.0.52",
      "description": "Add a child to the given node. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-node-add-child.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "node": {
            "type": "json",
            "desc": "The node to which the child will be added.",
            "const": false
          },
          "child": {
            "type": "json",
            "desc": "The child to add to the node.",
            "const": true
          }
        },
        "output": {
          "node": {
            "type": "json",
            "desc": "The given node, augmented with a child."
          }
        },
        "object": "Module"
      },
      "hash": "a9837cb0abb9b3901fe865e1d22906cfbe929ce3"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-ricci-node": {
    "hash": "51ba703e269c22d6c3b6e5b20ace122b715f6890",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-ricci-node",
      "version": "1.0.52",
      "description": "Create a Blobtree RicciNode, a blending node proposed by Ricci in 1973. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-ricci-node.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "n": {
            "type": "Number",
            "value": 2,
            "desc": "The Ricci number. Scalar fields will be blended using formula v = k-root( Sum(c.value^k) ) for all c in node children. Default to 2.0."
          }
        },
        "output": {
          "ricci": {
            "type": "json",
            "desc": "JSON representation of a Blobtree RicciNode object."
          }
        },
        "object": "Module"
      },
      "hash": "51ba703e269c22d6c3b6e5b20ace122b715f6890"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-root": {
    "hash": "9f42542895e6e389d503734812a765e3c1d82d74",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-root",
      "version": "1.0.52",
      "description": "Create a Blobtree root. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-root.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "iso": {
            "type": "Number",
            "value": 1,
            "desc": "The iso value where the surface represented by this blobtree lies. Default is 1.0."
          }
        },
        "output": {
          "root": {
            "type": "json",
            "desc": "JSON representation of a Blobtree.Root object."
          }
        },
        "object": "Module"
      },
      "hash": "9f42542895e6e389d503734812a765e3c1d82d74"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-root-is-empty": {
    "hash": "f9c5dec21db0b84ac85e00933851952985388972",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-root-is-empty",
      "version": "1.0.52",
      "description": "Return true if the root given has no children, ie the blobtree is empty. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-root-is-empty.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "root": {
            "type": "json",
            "desc": "A Blobtree Root as JSON",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        },
        "object": "Module"
      },
      "hash": "f9c5dec21db0b84ac85e00933851952985388972"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-scalis-point": {
    "hash": "8a627213a53c65e4d97bfa0bd67ea8fe34a4f149",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-scalis-point",
      "version": "1.0.52",
      "description": "Create a Scalis Point primitive. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-scalis-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "density": {
            "type": "Number",
            "value": 1,
            "desc": "The wanted density. default to 1.0.",
            "const": true
          },
          "mat": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          }
        },
        "output": {
          "point": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Scalis Point object."
          }
        },
        "object": "Module"
      },
      "hash": "8a627213a53c65e4d97bfa0bd67ea8fe34a4f149"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-scalis-triangle": {
    "hash": "e0f9165e772dae9486a82d5bfe7f769f97ef9504",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-scalis-triangle",
      "version": "1.0.52",
      "description": "Create a Scalis triangle primitive. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-scalis-triangle.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v0": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "v1": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "v2": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "volType": {
            "type": "String",
            "value": "dist",
            "desc": "Volume type, either 'dist' for a distance field, and 'convol' for a convolution field. Default to dist.",
            "const": true
          },
          "mat0": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial at V0. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          },
          "mat1": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial at V1. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          },
          "mat2": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial at V2. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          }
        },
        "output": {
          "tri": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Scalis triangle object."
          }
        },
        "object": "Module"
      },
      "hash": "e0f9165e772dae9486a82d5bfe7f769f97ef9504"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-scalis-segment": {
    "hash": "58d90b69677598625da7abed84cf93f76d2b12ba",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-scalis-segment",
      "version": "1.0.52",
      "description": "Create a Scalis segment primitive. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-scalis-segment.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v0": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "v1": {
            "type": "json",
            "desc": "Scalis Vertex in JSON.",
            "const": true
          },
          "density": {
            "type": "Number",
            "value": 1,
            "desc": "The wanted density. default to 1.0.",
            "const": true
          },
          "volType": {
            "type": "String",
            "value": "dist",
            "desc": "Volume type, either 'dist' for a distance field, and 'convol' for a convolution field. Default to dist.",
            "const": true
          },
          "mat0": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial at V0. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          },
          "mat1": {
            "type": "json",
            "value": {
              "color": "#808080",
              "metalness": 0.8,
              "roughness": 0.2
            },
            "desc": "The wanted Metarial at V1. Default is 50% grey with 80% metalness and 20% roughness.",
            "const": true
          }
        },
        "output": {
          "seg": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Scalis segment object."
          }
        },
        "object": "Module"
      },
      "hash": "58d90b69677598625da7abed84cf93f76d2b12ba"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-scalis-vertex": {
    "hash": "f0eac39a552a2c88810ced1e07eb9ec3ec468e9e",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-scalis-vertex",
      "version": "1.0.53",
      "description": "Create a vertex to use in Scalis primitives. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-scalis-vertex.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "p": {
            "type": "Vector3",
            "desc": "The position of the vertex in space.",
            "const": true
          },
          "thick": {
            "type": "Number",
            "desc": "The wanted thickness at this vertex.",
            "const": true
          }
        },
        "output": {
          "vertex": {
            "type": "json",
            "desc": "JSON representation of a Blobtree Scalis Vertex object."
          }
        },
        "object": "Module"
      },
      "hash": "f0eac39a552a2c88810ced1e07eb9ec3ec468e9e"
    }
  },
  "@dualbox/dualbox-module-blobtree-json-sliding-mc": {
    "hash": "eb15040dbfc07a527af150bb45975649dedefa91",
    "pkg": {
      "name": "@dualbox/dualbox-module-blobtree-json-sliding-mc",
      "version": "1.0.53",
      "description": "Create a triangulated surface using a sliding Marching Cubes algorithm. blobtree-json modules are a set of modules to manipulate dualbox-lib-blobtree structures in json.",
      "main": "blobtree-json-sliding-mc.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-blobtree": "^1.0.38",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "blobtree": {
            "type": "json",
            "desc": "A blobtree as in JSON. The first node must be a Root.",
            "const": true
          },
          "bbox": {
            "type": "Box3",
            "value": null,
            "desc": "The box in which the marching cube must trinagulate the surface. If null, the entire blobtree will be triangulated.",
            "const": true
          },
          "detailRatio": {
            "type": "Number",
            "value": 1,
            "desc": "Ratio to be applied to the base subdivision proposed by the blobtree. Default is 1.0. Lower it to get a better definition of the object.",
            "const": true
          },
          "cvStep": {
            "type": "Number",
            "value": null,
            "desc": "If an integer value is provided, a Newton process will be setup for each vertices of the resulting mesh. cvStep defines the maximum number of newton steps. Note : this makes the trianguation slower. Default is null. Usually 10 steps is more than enough.",
            "const": true
          },
          "cvRatio": {
            "type": "Number",
            "value": null,
            "desc": "If a number in 0,1 is provided, a Newton process will be setup for each vertices of the resulting mesh. cvRatio defines how close to the surface the vertices will be, as a ratio of the smaller marching cube cell in the grid. Note : this makes the trianguation slower. Default is null. Usually 0.01 is more than enough.",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The triangulated surface."
          }
        },
        "object": "Module"
      },
      "hash": "eb15040dbfc07a527af150bb45975649dedefa91"
    }
  },
  "@dualbox/dualbox-module-zip-extract-file": {
    "hash": "ec871dfbe859917d8721c01fff42fa36aeb1115f",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-extract-file",
      "version": "1.0.58",
      "description": "Get the file content in a zip.",
      "main": "zip-extract-file.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.5",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "zip": {
            "type": "File",
            "const": true
          },
          "filename": {
            "type": "String",
            "value": null
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "ec871dfbe859917d8721c01fff42fa36aeb1115f"
    }
  },
  "@dualbox/dualbox-type-all3d": {
    "hash": "d12799d5e2c43784310654d2d1dec9131f1c75af",
    "pkg": {
      "name": "@dualbox/dualbox-type-all3d",
      "version": "1.0.55",
      "description": "Wrapper to get all 3D type packages.",
      "main": "dist/exports.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox-type-box2": "^1.0.20",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-cameraman": "^1.0.20",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-cylindrical": "^1.0.20",
        "@dualbox/dualbox-type-euler": "^1.0.20",
        "@dualbox/dualbox-type-heightmap": "^1.0.21",
        "@dualbox/dualbox-type-matrix3": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20",
        "@dualbox/dualbox-type-plane": "^1.0.20",
        "@dualbox/dualbox-type-quaternion": "^1.0.20",
        "@dualbox/dualbox-type-ray": "^1.0.20",
        "@dualbox/dualbox-type-segment3": "^1.0.20",
        "@dualbox/dualbox-type-sphere": "^1.0.20",
        "@dualbox/dualbox-type-spherical": "^1.0.20",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-light": "^1.0.20",
        "@dualbox/dualbox-type-line": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-displacementmap": "^1.0.20",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-texture": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20",
        "@dualbox/dualbox-type-mapping": "^1.0.20",
        "@dualbox/dualbox-type-pixeldatatype": "^1.0.20",
        "@dualbox/dualbox-type-pixelformat": "^1.0.20",
        "@dualbox/dualbox-type-shading": "^1.0.20",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-textureconst": "^1.0.20",
        "@dualbox/dualbox-type-texturefilter": "^1.0.20",
        "@dualbox/dualbox-type-usedcolor": "^1.0.20",
        "@dualbox/dualbox-type-vertexcolors": "^1.0.20",
        "@dualbox/dualbox-type-wrapping": "^1.0.20",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "concat-files": "^0.1.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "d12799d5e2c43784310654d2d1dec9131f1c75af"
    }
  },
  "@dualbox/dualbox-module-pdf-example": {
    "hash": "0310f388593412756f5ebc201b54246aea9ba1c4",
    "pkg": {
      "name": "@dualbox/dualbox-module-pdf-example",
      "version": "1.0.42",
      "description": "A simple module generating a pdf example for dualbox.",
      "main": "pdf-example.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "pdfkit": "^0.8.3"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A JPEG file."
          }
        },
        "output": {
          "file": {
            "type": "File",
            "desc": "An example of a pdf file we can build using DualBox"
          }
        }
      },
      "hash": "0310f388593412756f5ebc201b54246aea9ba1c4"
    }
  },
  "@dualbox/dualbox-module-zip-extract-files": {
    "hash": "123e3ff39871f257bc20057cdb6fc835d02faea3",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-extract-files",
      "version": "1.0.59",
      "description": "Get all files in zip and push them in an array. Array is sorted so that 2 zip with the same file names should return files in the same order.",
      "main": "zip-extract-files.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "zip": {
            "type": "File",
            "const": true
          }
        },
        "output": {
          "files": {
            "type": "Array<File>"
          }
        }
      },
      "hash": "123e3ff39871f257bc20057cdb6fc835d02faea3"
    }
  },
  "@dualbox/dualbox-module-zip-file": {
    "hash": "e847193ac5a522abf43e167b64b1ad6b5f49620a",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-file",
      "version": "1.0.58",
      "description": "",
      "main": "zip-file.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.5",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A file to put in the zip."
          },
          "filename": {
            "type": "String",
            "value": null,
            "const": "true",
            "desc": "The name of the final zip file, if null, the name of the given file will be used."
          }
        },
        "output": {
          "file": {
            "type": "File",
            "desc": "Resulting zip file"
          }
        }
      },
      "hash": "e847193ac5a522abf43e167b64b1ad6b5f49620a"
    }
  },
  "@dualbox/dualbox-module-zip-files": {
    "hash": "f6432a8446bcd8776c960cea62b0578cb808cf46",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-files",
      "version": "1.0.58",
      "description": "",
      "main": "ZipFiles.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "files": {
            "type": "Array<File>",
            "const": true,
            "desc": "A set of files to be added to the created zip"
          },
          "filename": {
            "type": "String",
            "const": "true",
            "desc": "The name of the final zip file"
          }
        },
        "output": {
          "file": {
            "type": "File",
            "desc": "Resulting zip file"
          }
        }
      },
      "hash": "f6432a8446bcd8776c960cea62b0578cb808cf46"
    }
  },
  "@dualbox/dualbox-module-zip-merge": {
    "hash": "cc381c0a85051457a8cb57f81b25e8dba6948175",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-merge",
      "version": "1.0.58",
      "description": "Merge a file into another. The 2 zip files must not contain files with the same path and filename or the module will throw an error.",
      "main": "zip-merge.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "zip1": {
            "type": "File",
            "const": true,
            "desc": "The first file. Note that it is set to non const since the content of the second file will be added to it"
          },
          "zip2": {
            "type": "File",
            "const": true
          },
          "filename": {
            "type": "String",
            "value": "untitled",
            "const": true
          }
        },
        "output": {
          "zip": {
            "type": "File",
            "desc": "A new file containing the content of both files."
          }
        }
      },
      "hash": "cc381c0a85051457a8cb57f81b25e8dba6948175"
    }
  },
  "@dualbox/dualbox-module-zip-getfile": {
    "hash": "ad392b78733163efcc5125c398d8d8813cab1d22",
    "pkg": {
      "name": "@dualbox/dualbox-module-zip-getfile",
      "version": "1.0.57",
      "description": "Get the file content in a zip.",
      "main": "zip-getfile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.5",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-buffer": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "zip": {
            "type": "Buffer",
            "const": true
          },
          "filename": {
            "type": "String",
            "value": null
          }
        },
        "output": {
          "buff": {
            "type": "Buffer"
          }
        }
      },
      "hash": "ad392b78733163efcc5125c398d8d8813cab1d22"
    }
  },
  "@dualbox/dualbox-ui-bootstrap-input-file": {
    "hash": "56fb320ff616ffc8af112dd51a7a175dffcdf0b0",
    "pkg": {
      "name": "@dualbox/dualbox-ui-bootstrap-input-file",
      "version": "1.0.65",
      "description": "Button to upload a file, and return it in the app as a Dualbox File.",
      "main": "dist/BootstrapInputFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "http": "^0.0.0",
        "https": "^1.0.0",
        "url-parse": "^1.2.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-bootstrap": "^1.0.14",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-lib-dualbox-fetch-file": "^1.0.23",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^4.12.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "accept": {
            "type": "String",
            "value": "*",
            "desc": "The type of files accepted by this input. For example : 'image/*', file_extension, audio/*,video/*,image/*,media_type. Several values must be saparated by a comma."
          },
          "btnText": {
            "type": "String",
            "value": "Select file",
            "desc": "The button text value."
          },
          "btnClass": {
            "type": "String",
            "value": "btn-primary",
            "desc": "The button class. Typically btn-primary, btn-success, btn-danger..."
          },
          "value": {
            "type": "JSON",
            "value": null,
            "desc": "Default value for the file input (use this or valueStr). Should be a file encoded in DualBox JSON format."
          },
          "valueStr": {
            "type": "String",
            "value": null,
            "desc": "Default url value for this input (use this or value). Will be downloaded and set as default output value."
          },
          "spanDefaultText": {
            "type": "String",
            "value": "no file selected",
            "desc": "Text displayed in the bow when no file is selected."
          }
        },
        "input": {},
        "output": {
          "file": {
            "type": "file"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "screenshot": {
            "desc": "Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "override": {
            "desc": "Override input's value with this event's data"
          },
          "trigger": {
            "desc": "Resolve all inputs then process"
          },
          "clearValue": {
            "desc": "Reset this input"
          }
        }
      },
      "hash": "56fb320ff616ffc8af112dd51a7a175dffcdf0b0"
    }
  },
  "@dualbox/dualbox-ui-widget3d-darboux": {
    "hash": "0ba33abb19f9e2053945c49d02e4a4f72ebc92a8",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-darboux",
      "version": "1.0.65",
      "description": "Simple Widget3D with 2 handles and a shape to draw a darboux surface.",
      "main": "dist/widget3d-darboux.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.3.9",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "minstep": {
            "type": "Number",
            "value": 0.01,
            "desc": "The step size when moving the handles. That means the resulting polylines will have all segment larger than this value, except for the last segment."
          }
        },
        "input": {
          "handleScale": {
            "type": "Number",
            "value": 1,
            "const": true,
            "desc": "The scale of the 3D Handles. Default is 1 with handles being sphere of radius 1"
          },
          "shape": {
            "type": "LineGeometry",
            "value": {
              "vertices": [
                0,
                0,
                0,
                1,
                1,
                0
              ]
            },
            "const": true,
            "desc": "[UNSED FOR NOW] The line to move around. Ideally should start and finish at initial handle positions."
          },
          "h1Positions": {
            "type": "Array<Array<Vector3>>",
            "value": [
              [
                {
                  "x": 0,
                  "y": 0,
                  "z": 0
                }
              ]
            ],
            "const": false,
            "desc": "Initial positions of handles 1. Must be consistant with h2Positions : for each array A = h1Positions[i] of Vector3, B = h2Positions[i] must be such that : A.length === B.length || A.length === 1 || B.length ===1."
          },
          "h2Positions": {
            "type": "Array<Array<Vector3>>",
            "value": [
              [
                {
                  "x": 10,
                  "y": 10,
                  "z": 10
                }
              ]
            ],
            "const": false,
            "desc": "Initial positions of handles 2. Must be consistant with h1Positions : for each array A = h1Positions[i] of Vector3, B = h2Positions[i] must be such that : A.length === B.length || A.length === 1 || B.length ===1."
          },
          "mat": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": 2646160
            },
            "const": true
          },
          "matHover": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": 2116980
            },
            "const": true
          }
        },
        "output": {
          "g": {
            "desc": "The darboux surface.",
            "type": "Geometry"
          }
        },
        "object": "UI"
      },
      "hash": "0ba33abb19f9e2053945c49d02e4a4f72ebc92a8"
    }
  },
  "@dualbox/dualbox-ui-colorpicker": {
    "hash": "b8a61b63774add9b6dfae264e198b139440d7545",
    "pkg": {
      "name": "@dualbox/dualbox-ui-colorpicker",
      "version": "1.0.64",
      "description": "HTML5 ColorPicker",
      "main": "dist/ColorPicker.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "lodash": "^4.17.4",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "label": {
            "type": "String",
            "value": "Color"
          },
          "value": {
            "type": "String",
            "value": "#ffffff",
            "desc": "The initial color value as Hex with #. Like #ff00ff"
          },
          "hidden": {
            "value": false,
            "desc": "True if this UI must be hidden by default."
          }
        },
        "input": {},
        "output": {
          "result": {
            "type": "Color"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide this component"
          },
          "show": {
            "desc": "Show this component"
          },
          "disable": {
            "desc": "Disable this component (user can't interact with it)"
          },
          "enable": {
            "desc": "Enable this component"
          },
          "override": {
            "desc": "Override input's value with this event's data"
          }
        }
      },
      "hash": "b8a61b63774add9b6dfae264e198b139440d7545"
    }
  },
  "@dualbox/dualbox-ui-canvas3d": {
    "hash": "2b8c520cffd9172f9cb5bb0cc8b9e55dc110df27",
    "pkg": {
      "name": "@dualbox/dualbox-ui-canvas3d",
      "version": "1.0.69",
      "description": "Canvas for 3D app visualisation/edit.",
      "main": "dist/Canvas3D.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.12.0",
        "element-resize-detector": "^1.1.12",
        "rollupify": "^0.4.0",
        "timers": "^0.1.1",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-three-ssao-96": "^1.0.1",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-light": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "browserify": "^13.3.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify",
            {}
          ],
          [
            "browserify-css"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Canvas3D",
        "attr": {
          "camPos": {
            "desc": "CameraMan position as defined by XTHREE CameraMan. If provided, the CameraMan will be initizalized with this position. This is DEPRECATED, please use the widget3d-cameraman instead."
          },
          "lights": {
            "desc": "An array of lights defined in JSON objects. Those will be the default lights in the scene. This is DEPRECATED, please use the corresponding input instead."
          },
          "cameraLights": {
            "desc": "An array of lights defined in JSON objects. Those will be the lights attached to the camera (and therefore moving with the camera). This is deprecated, please use the corresponding input instead."
          },
          "background": {
            "desc": "A JSON object describing the default background. Can be simple color or radial gradient. Syntax : {color:<color as JSON>} : radial:{center:<color as JSON>,border:<color as JSON>} Texture may be added later if requested."
          },
          "longTouchTimeout": {
            "type": "Number",
            "value": 1000,
            "desc": "[Advanced] Delay to consider an unmoving touch is a longtouch. Default is 1000ms."
          },
          "bufferIntervals": {
            "type": "Array<Number>",
            "value": [],
            "desc": "[ADVANCED USE] Set all intervals, in ms, for wich we want to buffer mousemove and mouseup events. For example, 32 will buffer events and send only one every 32ms (30fps) using the event name buffered32_mousemove/mouseup/touchmove/touchend."
          },
          "ssao": {
            "type": "JSON",
            "value": {
              "metadata": {
                "type": "JSON"
              },
              "data": {
                "active": false,
                "radius": 8,
                "aoClamp": 0.3,
                "lumInfluence": 0.5,
                "noiseAmount": 0.5
              }
            },
            "desc": "Active SSAO on this canvas"
          }
        },
        "input": {
          "mesh": {
            "type": "Mesh",
            "value": null
          },
          "snode": {
            "type": "SceneNode",
            "value": null
          },
          "lights": {
            "type": "Array<Light>",
            "value": null,
            "desc": "Lights to be added to the scene root. This is DEPRECATED. Please add lights to snode instead."
          },
          "cameraLights": {
            "type": "Array<Light>",
            "desc": "An array of lights defined in JSON objects. Those will be the lights attached to the camera (and therefore moving with the camera).",
            "value": [],
            "const": false
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide the canvas"
          },
          "show": {
            "desc": "Show the canvas"
          },
          "screenshot": {
            "desc": "[DEPRECATED] Triggers a screenshot of the current canvas display. This module will emit the 'screenshot' event, with { imgData, dataURL} as a parameter when done."
          },
          "trigger": {
            "desc": "Resolve all inputs then display the result of the computation"
          }
        }
      },
      "hash": "2b8c520cffd9172f9cb5bb0cc8b9e55dc110df27"
    }
  },
  "@dualbox/dualbox-ui-widget3d-cubemap-background": {
    "hash": "2e03ec4bc8f3b6ccead8cbacc6ee8cb1fbc592cf",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-cubemap-background",
      "version": "1.0.62",
      "description": "Set the background of an app with a cube map for pre-visualisation",
      "main": "dist/widget3d-cubemap-background.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SâÂ®bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "input": {
          "cubetexture": {
            "desc": "Texture used for the background",
            "type": "CubeTexture",
            "const": true
          }
        },
        "attr": {},
        "output": {},
        "events": {
          "trigger": {
            "desc": "Resolve all inputs then adapt the widget output and preview to the new setup."
          }
        }
      },
      "hash": "2e03ec4bc8f3b6ccead8cbacc6ee8cb1fbc592cf"
    }
  },
  "@dualbox/dualbox-lib-dualbox-fetch-file": {
    "hash": "e0f966bba496914305cdd56f16b9a623c3cff48c",
    "pkg": {
      "name": "@dualbox/dualbox-lib-dualbox-fetch-file",
      "version": "1.0.23",
      "description": "Function to load a file from a given URL.",
      "main": "dist/dualbox-fetch-file.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-file": "^1.0.16",
        "http": "^0.0.0",
        "https": "^1.0.0",
        "url-parse": "^1.2.0",
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "eslint": "^4.12.1",
        "uglifyjs": "^2.4.11"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "concat-files": "^0.1.1",
        "eslint": "^4.11.0",
        "fs-extra": "^4.0.2",
        "uglifyjs": "^2.4.11"
      },
      "files": [
        "dist/*"
      ],
      "browserify": {
        "transform": [
          [
            "babelify",
            {
              "presets": [
                "env"
              ],
              "compact": false
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "hash": "e0f966bba496914305cdd56f16b9a623c3cff48c"
    }
  },
  "@dualbox/dualbox-ui-widget3d-slider": {
    "hash": "9faf828843920f8a68e5d9633210577c1c119837",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-slider",
      "version": "1.0.66",
      "description": "Implement a 3D slider, which means a 3D model moving along a segment and returning a value in a given range.",
      "main": "dist/widget3d-slider.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-dualbox-3d": "^1.0.39",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-segment3": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Description of mouse and touch events handling for this widget"
          },
          "triggerOnSlide": {
            "desc": "If true, will trigger on slide. Else, will only trigger when a point has been moved and the position released.",
            "type": "Boolean",
            "value": true
          },
          "min": {
            "type": "Number",
            "value": 0
          },
          "max": {
            "type": "Number",
            "value": 1
          },
          "step": {
            "type": "Number",
            "value": 0.1
          },
          "value": {
            "type": "Number",
            "value": 1
          }
        },
        "input": {
          "shape": {
            "type": "Geometry"
          },
          "seg": {
            "type": "Segment3",
            "desc": "The segment on which the sliding will occur."
          },
          "mat": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": 153
            },
            "const": true
          },
          "matHover": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": 255
            },
            "const": true
          },
          "matrix": {
            "type": "Matrix4",
            "const": true,
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "desc": "Transformation matrix."
          },
          "visible": {
            "type": "Boolean",
            "value": true,
            "desc": "Decide if the widget is visible. Note that UI events like hide and show will be added to this condition : hide event will hide the widget, but show will only show it if visible input is also true."
          }
        },
        "output": {
          "x": {
            "desc": "The current slider value.",
            "type": "Number"
          }
        },
        "events": {
          "trigger": {
            "desc": "Resolve inputs"
          }
        }
      },
      "hash": "9faf828843920f8a68e5d9633210577c1c119837"
    }
  },
  "@dualbox/dualbox-ui-widget3d-trans-2d": {
    "hash": "286c40a9d0df33cc7415c2546c6e1deb8efef6d6",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-trans-2d",
      "version": "1.0.63",
      "description": "Implement a widget to scale, rotate and translate an object in a 3D plane. For now only works in X/Y.",
      "main": "dist/widget3d-trans-2d.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20",
        "@dualbox/dualbox-type-plane": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Description of mouse and touch events handling for this widget"
          },
          "triggerOnMove": {
            "desc": "If true, will trigger when a widget is moving. Else, will only trigger when a an element has been moved and released.",
            "type": "Boolean",
            "value": true
          }
        },
        "input": {
          "shapeTrans": {
            "type": "Geometry",
            "const": true,
            "value": {},
            "desc": "This is the shape which will act as a handler for translation. Any mesh of this scenenode will be used as an handler. All children objects will have there names set to <this widget id>#transnode#<children name>"
          },
          "shapeRot": {
            "type": "Geometry",
            "const": true,
            "value": {},
            "desc": "This is the shape which will act as a handler for rotation. Any mesh of this scenenode will be used as an handler. All children objects will have there names set to <this widget id>#rotnode#<children name>"
          },
          "shapeScale": {
            "type": "Geometry",
            "const": true,
            "value": {},
            "desc": "This is the shape which will act as a handler for scale. Any mesh of this scenenode will be used as an handler. All children objects will have there names set to <this widget id>#scalenode#<children name>"
          },
          "matTrans": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#000099",
              "side": "DoubleSide"
            }
          },
          "matRot": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#009900",
              "side": "DoubleSide"
            }
          },
          "matScale": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#990000",
              "side": "DoubleSide"
            }
          },
          "matHoverTrans": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#0000dd",
              "side": "DoubleSide"
            }
          },
          "matHoverRot": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#00dd00",
              "side": "DoubleSide"
            }
          },
          "matHoverScale": {
            "type": "Material",
            "const": true,
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#dd0000",
              "side": "DoubleSide"
            }
          },
          "matrix": {
            "type": "Matrix4",
            "const": true,
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "desc": "Initial transformation matrix. If changed, will reset the transformation to the given matrix."
          },
          "plane": {
            "type": "Plane",
            "const": true,
            "value": {
              "normal": {
                "x": 0,
                "y": 0,
                "z": 1
              },
              "constant": 0
            },
            "desc": "The plane on which the tranformation will occur."
          },
          "visible": {
            "type": "Boolean",
            "const": true,
            "value": true,
            "desc": "Decide if the widget is visible. Note that UI events like hide and show will be added to this condition : hide event will hide the widget, but show will only show it if visible input is also true."
          }
        },
        "output": {
          "matrix": {
            "desc": "The resulting transformation matrix.",
            "type": "Matrix4"
          }
        }
      },
      "hash": "286c40a9d0df33cc7415c2546c6e1deb8efef6d6"
    }
  },
  "@dualbox/dualbox-ui-widget3d-draw-line": {
    "hash": "1bb53f8e1b949e356a3c62a9cbf9a7504b5918df",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-draw-line",
      "version": "1.0.65",
      "description": "Simple Widget3D to draw a polyline.",
      "main": "dist/widget3d-draw-line.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "lodash": "^4.17.4",
        "@dualbox/dualbox-type-material": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "single": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, only one line can be drawn. When mouse is up and down, the previous line will be deleted."
          },
          "linesegments": {
            "type": "Boolean",
            "value": true,
            "desc": "Whether the line geometry is defined by segments or as a single line. Note that it cannot be false if single is false (ie, several disconnected lines cannot be represented with a non linesegment line)"
          },
          "hidden": {
            "type": "Boolean",
            "value": false,
            "desc": "True if the widget is hidden by default."
          }
        },
        "input": {
          "mat": {
            "type": "Material",
            "value": {
              "type": "LineBasicMaterial",
              "color": 153
            },
            "const": true
          }
        },
        "output": {
          "lg": {
            "desc": "The corresponding line geometry.",
            "type": "LineGeometry"
          }
        }
      },
      "hash": "1bb53f8e1b949e356a3c62a9cbf9a7504b5918df"
    }
  },
  "@dualbox/dualbox-ui-widget3d-rich-positions": {
    "hash": "034da3a2220f1e2d957eb7269d759687aad35555",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-rich-positions",
      "version": "1.0.58",
      "description": "Widget3D to move 3D points in the scene. This extends the widget3d-positions to add colors and scales to each positions.",
      "main": "dist/widget3d-rich-positions.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-ui-widget3d-positions": "^1.0.67",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maxime.quiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "attr": {
          "colorValue": {
            "type": "String",
            "value": "#337ab7",
            "desc": "The initial color value as Hex with #. Default is #337ab7."
          },
          "colorLabel": {
            "type": "String",
            "value": "Color",
            "desc": "The label for the colorpicker of this UI."
          },
          "metalValue": {
            "type": "Number",
            "value": 0.8,
            "desc": "The initial metalness value."
          },
          "roughValue": {
            "type": "Number",
            "value": 0.5,
            "desc": "The initial roughness value."
          },
          "scaleValue": {
            "type": "Vector3",
            "value": {
              "x": 1,
              "y": 1,
              "z": 1
            },
            "desc": "The initial scale value. Note that for now all coordinates must be the same. The Vector3 is here to provide good ground in the future for non uniform scaling. If you provide a scale value with non equals coordinates, the averagde of x, y and z will be used."
          },
          "scaleLabel": {
            "type": "String",
            "value": "Scale",
            "desc": "The label for the scale slider"
          },
          "scaleTxt": {
            "type": "String",
            "value": "__n__",
            "desc": "The string displaying the value of the scale above the scale slider. the tag __n__ in the string will be replaced by the actual value. __%n__ will display the number as a percentage instead of its actual value."
          },
          "scaleMin": {
            "type": "Number",
            "value": 0.1
          },
          "scaleMax": {
            "type": "Number",
            "value": 10
          },
          "scaleStep": {
            "type": "Number",
            "value": 0.1
          },
          "triggerOnSelect": {
            "value": false,
            "desc": "DEPRECATED If true, will trigger on select. Else, will only trigger when a point has been moved"
          },
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Description of mouse and touch events handling for this widget"
          }
        },
        "input": {
          "shape": {
            "type": "Geometry",
            "value": {
              "metadata": {
                "__dualbox": {
                  "type": "Geometry"
                }
              }
            },
            "const": true,
            "desc": "The shape of the positions widgets. Usually a sphere is good. Must be centered on 0,0,0 since some scaling may occur."
          },
          "scale": {
            "type": "Vector3",
            "value": {
              "metadata": {
                "type": "Vector3"
              },
              "data": {
                "x": 1,
                "y": 1,
                "z": 1
              }
            },
            "const": true,
            "desc": "The scale to apply when calling API to add a new position."
          },
          "color": {
            "type": "Color",
            "value": "#337ab7",
            "const": true,
            "desc": "The color to apply when calling API to add a new position."
          },
          "mat": {
            "type": "Material",
            "value": null,
            "const": true,
            "desc": "If not null, all non selected elements will display using this material. If null, a Basic material of the position's material color will be used."
          },
          "matSelect": {
            "type": "Material",
            "value": {
              "metadata": {
                "type": "Material"
              },
              "type": "MeshBasicMaterial",
              "color": 255
            },
            "const": true,
            "desc": "Color of a selected element"
          },
          "limit": {
            "type": "Number",
            "value": 50,
            "const": true
          },
          "restrict": {
            "type": "String",
            "value": "return p;",
            "const": true,
            "desc": "[ADVANCED] This allows you to setup a javascript function that will constrain the position mouvement. The function must take p as a parameter, which is a Vector3. For example, passing 'p.z=0; return p;' will contrain the positions to be on the XY plane."
          },
          "positions": {
            "type": "Array<Vector3>",
            "value": [],
            "desc": "Initial positions to set before user interaction. If changed, will reset the positions to the given values.",
            "const": true
          },
          "colors": {
            "type": "Array<Color>",
            "value": [],
            "desc": "Initial colors to set before user interaction. If changed, will reset the colors to the given values.",
            "const": true
          },
          "scales": {
            "type": "Array<Vector3>",
            "value": [],
            "desc": "Initial scales to set before user interaction. If changed, will reset the scales to the given values.",
            "const": true
          }
        },
        "output": {
          "positions": {
            "desc": "All Positions and their colors and size, in JSON. {positions:Array<Vector3 in JSON>,colors:Array<Color in JSON>,scales:Array<Vector3 in JSON>}",
            "type": "json"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide the widget"
          },
          "show": {
            "desc": "Show the widget"
          },
          "trigger": {
            "desc": "Resolve all inputs then adapt the widget output and preview to the new setup."
          }
        },
        "object": "UI"
      },
      "hash": "034da3a2220f1e2d957eb7269d759687aad35555"
    }
  },
  "@dualbox/dualbox-ui-widget3d-cameraman": {
    "hash": "a2fbaf887e03a9b308afc0fb13387a4bb953e575",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-cameraman",
      "version": "1.0.65",
      "description": "Simple Widget3D controling the canvas camera. For now, it controls the camera directly and does not output anything. If it was to output something, it would still be needed to decide if it is the camera position informations, or a CameraMan as a class.",
      "main": "dist/widget3d-cameraman.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Describes the mouse events bindings"
          },
          "maxDistFactor": {
            "type": "Number",
            "value": 20,
            "desc": "Determine the maximum distance allowed to the target point. This is a factor applied to the distance computed from the inputs. For example, if the CameraMan inputs are such that the last computed position of the camera is 10 units away from the target, then the maximum possible zoom out will be maxDistFactor*10. Note that other parameters like the type of zoom can limit the distance to the target."
          },
          "minDistFactor": {
            "type": "Number",
            "value": 0,
            "desc": "Determine the minimum distance allowed to the target point. This is a factor applied to the distance computed from the inputs. For example, if the CameraMan inputs are such that the last computed position of the camera is 10 units away from the target, then the maximum possible zoom in will be minDistFactor*10. Note that other parameters like the type of zoom can limit the distance to the target."
          },
          "rotMode": {
            "type": "String",
            "value": "trackball",
            "desc": "Determine the rotation mode : 'trackball', 'basic', 'Zbasic' or 'Ybasic'."
          }
        },
        "input": {
          "cameraType": {
            "desc": "Type of camera, can be either PerspectiveCamera or OrthographicCamera. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "String",
            "value": "PerspectiveCamera",
            "const": true
          },
          "target": {
            "desc": "Point on which the camera is centered, will zoom, etc... This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Vector3",
            "value": {
              "metadata": {
                "type": "Vector3"
              },
              "data": {
                "x": 0,
                "y": 0,
                "z": 0
              }
            },
            "const": true
          },
          "orientation": {
            "desc": "Absolute orientation of the camera around the target. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Vector3",
            "value": {
              "metadata": {
                "type": "Vector3"
              },
              "data": {
                "x": 0,
                "y": 0,
                "z": 0
              }
            },
            "const": true
          },
          "distToTarget": {
            "desc": "Distance to the target point of the camera. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Number",
            "value": 200,
            "const": true
          },
          "bottom": {
            "desc": "Only if cameraType is Orthographic : the bottom clipping plane position. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Number",
            "value": -1,
            "const": true
          },
          "top": {
            "desc": "Only if cameraType is Orthographic : the top clipping plane position. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Number",
            "value": 1,
            "const": true
          },
          "left": {
            "desc": "Only if cameraType is Orthographic : the left clipping plane position. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Number",
            "value": -1,
            "const": true
          },
          "right": {
            "desc": "Only if cameraType is Orthographic : the right clipping plane position. This is an initial value, if changed, the widget will be reset to the new position.",
            "type": "Number",
            "value": 1,
            "const": true
          },
          "resetMode": {
            "desc": "Define how the camera settings will reset on a change. 'total' : reset all settings to initial settings as far as at least one of the parameters has changed. 'local' : reset only the parmeters which have changed. if resetMode is changed, its last value will be used.",
            "type": "String",
            "value": "total",
            "const": true
          },
          "targetMode": {
            "desc": "How the camera will behave regarding its target. Target0 : the target of the camera is moved according to camera movement only. TargetSmart : the camera adapts the target to the point under the mouse, depending on the distance of the objects in the scene.",
            "type": "String",
            "value": "Target0",
            "const": true
          },
          "trackballHelper": {
            "desc": "Display 3 parenthesis as an helper to see where the trackball is",
            "type": "Boolean",
            "value": true,
            "const": true
          },
          "centered": {
            "desc": "If not null, will be used to center the camera on the given centerAABB. 1.0 will center as close as possible to the object, 1.2 will add a 20% margin, 0.80 will remove 20%, etc... Note that the centering is computed with respect to the larger dimension of the object, so that any rotation will ensure the required margin is respected. That means stretched objects may show larger margin.",
            "type": "Number",
            "value": 1.2,
            "const": true
          },
          "centeredAABB": {
            "desc": "AABB to feed centered with.",
            "type": "Box3",
            "value": null
          }
        },
        "output": {},
        "events": {
          "hide": {
            "desc": "Hide the widget"
          },
          "show": {
            "desc": "Show the widget"
          },
          "enable": {
            "desc": "Enable the widget"
          },
          "disable": {
            "desc": "Disable the widget"
          },
          "trigger": {
            "desc": "Resolve all inputs then adapt the widget output and preview to the new setup."
          },
          "override": {
            "desc": "Calling this will discard all user changes in camera position and ensure that the next trigger will compute a position based only on inputs. Can be useful to reposition the camera when a file is loaded, or in similar cases."
          }
        }
      },
      "hash": "a2fbaf887e03a9b308afc0fb13387a4bb953e575"
    }
  },
  "@dualbox/dualbox-module-bezierpath-apply-matrix4": {
    "hash": "3c483ed73dbf99e826cd0c565d1e101ac2eb0d75",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-apply-matrix4",
      "version": "1.0.62",
      "description": "Apply a Matrix to a bezier path.",
      "main": "bezierpath-apply-matrix4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "bezier": {
            "type": "BezierPath"
          }
        }
      },
      "hash": "3c483ed73dbf99e826cd0c565d1e101ac2eb0d75"
    }
  },
  "@dualbox/dualbox-ui-widget3d-positions": {
    "hash": "8e700eb4f7f2504f6a22e92497c01e2756e608d4",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-positions",
      "version": "1.0.67",
      "description": "Simple Widget3D to pin position on the scene objects.",
      "main": "dist/widget3d-positions.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "lodash": "^4.17.4",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "SÃ©bastien Najjar <sebastien.najjar@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Description of mouse and touch events handling for this widget"
          },
          "triggerOnSelect": {
            "desc": "If true, will trigger on select. Else, will only trigger when a point has been moved"
          }
        },
        "input": {
          "shape": {
            "type": "Geometry",
            "value": {
              "metadata": {
                "__dualbox": {
                  "type": "Geometry"
                }
              }
            },
            "const": true
          },
          "mat": {
            "type": "Material",
            "value": {
              "metadata": {
                "type": "Material"
              },
              "type": "MeshBasicMaterial",
              "color": 153
            },
            "const": true
          },
          "matSelect": {
            "type": "Material",
            "value": {
              "metadata": {
                "type": "Material"
              },
              "type": "MeshBasicMaterial",
              "color": 255
            },
            "const": true
          },
          "limit": {
            "type": "Number",
            "value": 50,
            "const": true
          },
          "restrict": {
            "type": "String",
            "value": "return p;",
            "const": true,
            "desc": "[ADVANCED] This allows you to setup a javascript function that will constrain the position mouvement. The function must take p as a parameter, which is a Vector3. For example, passing 'p.z=0; return p;' will contrain the positions to be on the XY plane."
          },
          "positions": {
            "type": "Array<Vector3>",
            "value": [],
            "desc": "Initial positions to set before user interaction. If changed, will reset the positions to the given values.",
            "const": true
          }
        },
        "output": {
          "positions": {
            "desc": "All position of manipulators.",
            "type": "Array<Vector3>"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide the widget"
          },
          "show": {
            "desc": "Show the widget"
          },
          "enable": {
            "desc": "Enable the widget"
          },
          "disable": {
            "desc": "Disable the widget"
          },
          "trigger": {
            "desc": "Resolve all inputs then adapt the widget output and preview to the new setup."
          }
        }
      },
      "hash": "8e700eb4f7f2504f6a22e92497c01e2756e608d4"
    }
  },
  "@dualbox/dualbox-module-bezierpath-compute-bbox": {
    "hash": "0186d674eec8a0654f097d64fa7b91a037a1d1aa",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-compute-bbox",
      "version": "1.0.62",
      "description": "Compute a bezierpath bounding box",
      "main": "bezierpath-compute-bbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": true
          }
        },
        "output": {
          "bbox": {
            "type": "Box3"
          }
        }
      },
      "hash": "0186d674eec8a0654f097d64fa7b91a037a1d1aa"
    }
  },
  "@dualbox/dualbox-ui-widget3d-image-composer-2d": {
    "hash": "9d3a03f5c8026abb9f857d1e2dde5b8bf88313a1",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-image-composer-2d",
      "version": "1.0.70",
      "description": "Implement a simple system to edit an 'image' in a given zone : add an image, add some text, rotate/scale/translate, etc... The output is still a 3D scene made of meshes in the X/Y plane, with Z used for layering the element.",
      "main": "dist/widget3d-image-composer-2d.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-bootstrap-slider": "^1.0.8",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-lib-dualbox-fetch-file": "^1.0.23",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "triggerOnMove": {
            "desc": "If true, will trigger when a widget is moving. Else, will only trigger when a an element has been moved and released.",
            "type": "Boolean",
            "value": true
          },
          "translateOnElement": {
            "type": "Boolean",
            "desc": "True if the translation handler is the element itself. Note that when this is true, shapeTrans input is ignored.",
            "value": true
          },
          "desaturate": {
            "desc": "If true, all images will be grey scale",
            "value": false,
            "type": "Boolean"
          },
          "maxImgSize": {
            "desc": "The maximum number of pixels of the imported image. The images will be resized to fit this limit. Default is 262144. Note that 2048*2048 = 4 194 304, 1024*1024 = 1 048 576, 512*512 = 262144, 256*256 = 65536, 128*128 = 16384, 64*64=4096, 32*32 = 1024.",
            "value": 1048576,
            "type": "Number"
          },
          "background": {
            "type": "Boolean",
            "value": true,
            "desc": "Set to true if the widget must draw a background to the image. It will be set just behind the drawing zone mesh."
          },
          "backgroundColor": {
            "type": "Color",
            "value": "#808080",
            "desc": "Color of the background."
          },
          "zoneColor": {
            "type": "Color",
            "value": "#ffffff",
            "desc": "Color of the drawing zone."
          },
          "fontPath": {
            "type": "String",
            "value": "https://d16lzdky72u47i.cloudfront.net/shapex/4cXm6sj3aZ7ZzQBxu/drive/Ressources/fonts/",
            "desc": "Path to the fonts files. Font files must respect the following convention for file names and format : be a typeface font in JSON with file name <fontname>_regular.typeface.json or <fontname>_bold.typeface.json."
          },
          "fontList": {
            "type": "Array<String>",
            "value": [
              "helvetiker",
              "gentilis",
              "optimer"
            ],
            "desc": "The font names to be found in fontPath. Note that for now all fonts are loaded when this widget is instanciated. To be improved in later versions."
          },
          "fontSize": {
            "type": "Number",
            "value": 64,
            "desc": "The default size when adding a text image. For now this size cannot be changed by the user, it should be setup with respect to the drawing zone size."
          },
          "labelFontSize": {
            "type": "String",
            "value": "Text Size",
            "desc": "Label of the font size slider."
          },
          "labelLoadingFonts": {
            "type": "String",
            "value": "Loading fonts... _LOADED_/_TOTAL_",
            "desc": "Label of the font size slider. Tags _LOADED_ and _TOTAL_ will be replaced dynamically with the number of loaded fonts, and total number of fonts."
          }
        },
        "input": {
          "zone": {
            "type": "Geometry",
            "desc": "This is the shape used to describe the drawing zone. It will appear white on a grey background. Note that 1 unit is 1 pixel."
          },
          "shapeRot": {
            "type": "Geometry",
            "value": null,
            "desc": "This is the shape used to build the rotation handlers. If set to null, a default handler will be set depending on the zone size. Note that 1 unit is 1 pixel."
          },
          "shapeScale": {
            "type": "Geometry",
            "value": null,
            "desc": "This is the shape  used to build the scaling from corner handlers. If set to null, a default handler will be set depending on the zone size. Note that 1 unit is 1 pixel."
          },
          "shapeDirScale": {
            "type": "Geometry",
            "value": null,
            "desc": "This is the shape  used to build the scaling from directional scaling. If set to null, a default handler will be set depending on the zone size. Note that 1 unit is 1 pixel."
          },
          "matBorder": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#337ab7",
              "side": "DoubleSide"
            }
          },
          "matRot": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#2e6da4",
              "side": "DoubleSide"
            }
          },
          "matScale": {
            "type": "Material",
            "value": {
              "type": "MeshBasicMaterial",
              "color": "#337ab7",
              "side": "DoubleSide"
            }
          },
          "visible": {
            "type": "Boolean",
            "value": true,
            "desc": "Decide if the widget is visible. Note that UI events like hide and show will be added to this condition : hide event will hide the widget, but show will only show it if visible input is also true."
          },
          "images": {
            "type": "Array<Mesh>",
            "value": [],
            "desc": "Initial values for images.",
            "const": false
          }
        },
        "output": {
          "elements": {
            "desc": "The resulting 3D meshes stored in JSON object in elements.meshes (as textured planes for images and meshes with 3D flat text geometries for texts). elements.data is an array containing JSON data with extra informations like the original image, the font, text size and weight, etc...",
            "type": "json"
          }
        }
      },
      "hash": "9d3a03f5c8026abb9f857d1e2dde5b8bf88313a1"
    }
  },
  "@dualbox/dualbox-module-bezierpath-get-points": {
    "hash": "500fe5ee658a747c3a5974879816406200e04c3f",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-get-points",
      "version": "1.0.63",
      "description": "Get a sequence of points from a BezierPath, points can be spaced according to parameterization, or equally spaced.",
      "main": "bezierpath-get-points.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": true
          },
          "divisions": {
            "type": "Number",
            "const": true,
            "desc": "The number of segments to be returned, ie the number of points will be divisions+1."
          },
          "spaced": {
            "type": "Boolean",
            "desc": "If true, the points will be equally spaced.",
            "value": false,
            "const": true
          }
        },
        "output": {
          "pts": {
            "type": "Array<Vector3>",
            "desc": "The sequence of points along the line."
          }
        }
      },
      "hash": "500fe5ee658a747c3a5974879816406200e04c3f"
    }
  },
  "@dualbox/dualbox-module-bezierpath-scale": {
    "hash": "7485f5740f418f7dffc32bf960c983bb0b795327",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-scale",
      "version": "1.0.62",
      "description": "Scale a bezier path.",
      "main": "bezierpath-scale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": false
          },
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "bezier": {
            "type": "BezierPath"
          }
        }
      },
      "hash": "7485f5740f418f7dffc32bf960c983bb0b795327"
    }
  },
  "@dualbox/dualbox-module-bezierpath-translate": {
    "hash": "4f739f0c031105136643adc7132ddba122e7e697",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-translate",
      "version": "1.0.62",
      "description": "Translate a bezier path.",
      "main": "bezierpath-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": false
          },
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "bezier": {
            "type": "BezierPath"
          }
        }
      },
      "hash": "4f739f0c031105136643adc7132ddba122e7e697"
    }
  },
  "@dualbox/dualbox-module-bezierpath-triangulate": {
    "hash": "589b269f5dc83ac41c5c8adbab0e1a7f5c4848d5",
    "pkg": {
      "name": "@dualbox/dualbox-module-bezierpath-triangulate",
      "version": "1.0.62",
      "description": "Triangulate a closed 2D bezier path. All z components of the shape will be ignored.",
      "main": "bezierpath-triangulate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezier": {
            "type": "BezierPath",
            "const": true
          },
          "acc": {
            "type": "Number",
            "value": 1,
            "desc": "Accuracy of the curve subdivision. Will be determining the resolution."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "589b269f5dc83ac41c5c8adbab0e1a7f5c4848d5"
    }
  },
  "@dualbox/dualbox-module-box2": {
    "hash": "5482e3d7c19a46044aee6a68559a35fcbf27c9d7",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2",
      "version": "1.0.62",
      "description": "Build a Box2 from 2 Vector2.",
      "main": "box2.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "min": {
            "type": "Vector2"
          },
          "max": {
            "type": "Vector2"
          }
        },
        "output": {
          "box": {
            "type": "Box2"
          }
        }
      },
      "hash": "5482e3d7c19a46044aee6a68559a35fcbf27c9d7"
    }
  },
  "@dualbox/dualbox-module-box2-containsbox": {
    "hash": "6e3e5e6d89f38d27dff522577c2d655752c49dc7",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-containsbox",
      "version": "1.0.62",
      "description": "Returns true if this box includes the entirety of a given box.",
      "main": "box2-containsbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box2_1": {
            "type": "Box2",
            "const": true
          },
          "box2_2": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "6e3e5e6d89f38d27dff522577c2d655752c49dc7"
    }
  },
  "@dualbox/dualbox-module-box2-containspoint": {
    "hash": "33ce66aa66a991e6108742984db6c79b9b0a5dd7",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-containspoint",
      "version": "1.0.62",
      "description": "Returns true if this box includes the entirety of a given point.",
      "main": "box2-containspoint.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2",
            "const": true
          },
          "p": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "33ce66aa66a991e6108742984db6c79b9b0a5dd7"
    }
  },
  "@dualbox/dualbox-module-box2-decompose": {
    "hash": "7109cb7f04e1b971513ec51e1107451bf1c1a3bb",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-decompose",
      "version": "1.0.64",
      "description": "Decompose a box2",
      "main": "box2-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2"
          }
        },
        "output": {
          "min": {
            "type": "Vector2"
          },
          "max": {
            "type": "Vector2"
          }
        }
      },
      "hash": "7109cb7f04e1b971513ec51e1107451bf1c1a3bb"
    }
  },
  "@dualbox/dualbox-module-box2-from-center-and-size": {
    "hash": "5cec4a58ced2e2a02ae4cf534d42dfa76959917c",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-from-center-and-size",
      "version": "1.0.64",
      "description": "Build a Box2 from its center and its size.",
      "main": "box2-from-center-and-size.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "center": {
            "type": "Vector2"
          },
          "size": {
            "type": "Vector2"
          }
        },
        "output": {
          "box": {
            "type": "Box2"
          }
        }
      },
      "hash": "5cec4a58ced2e2a02ae4cf534d42dfa76959917c"
    }
  },
  "@dualbox/dualbox-module-box2-getcenter": {
    "hash": "fa9102f8ffa36f1013a22f9c6d8fa2a75f203468",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-getcenter",
      "version": "1.0.64",
      "description": "Compute the center of a given box2.",
      "main": "box2-getcenter.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "p": {
            "type": "Vector2"
          }
        }
      },
      "hash": "fa9102f8ffa36f1013a22f9c6d8fa2a75f203468"
    }
  },
  "@dualbox/dualbox-module-box2-getsize": {
    "hash": "a7120ec8d1083d210761d4193911640da6d93ba7",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-getsize",
      "version": "1.0.56",
      "description": "Compute the proportion (width, height) of a given box2.",
      "main": "box2-getsize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "size": {
            "type": "Vector2"
          }
        }
      },
      "hash": "a7120ec8d1083d210761d4193911640da6d93ba7"
    }
  },
  "@dualbox/dualbox-module-box2-intersect": {
    "hash": "b3ebfc298ca411f9cd4641b7010aa254022eacf6",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-intersect",
      "version": "1.0.64",
      "description": "Compute the intersection between two given box2.",
      "main": "box2-intersect.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box2_1": {
            "type": "Box2",
            "const": true
          },
          "box2_2": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box2"
          }
        }
      },
      "hash": "b3ebfc298ca411f9cd4641b7010aa254022eacf6"
    }
  },
  "@dualbox/dualbox-module-box2-intersectsbox": {
    "hash": "9fb776b1165d88d0b3f99f39617f547384500d86",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-intersectsbox",
      "version": "1.0.64",
      "description": "Returns true if this box intersects with a given box.",
      "main": "box2-intersectsbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box2_1": {
            "type": "Box2",
            "const": true
          },
          "box2_2": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "9fb776b1165d88d0b3f99f39617f547384500d86"
    }
  },
  "@dualbox/dualbox-module-box2-tojson": {
    "hash": "e59c074176f0afa3dda01a85e9bd534410e8799e",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-tojson",
      "version": "1.0.64",
      "description": "Compute the union between two given box2.",
      "main": "box2-tojson.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "e59c074176f0afa3dda01a85e9bd534410e8799e"
    }
  },
  "@dualbox/dualbox-module-box2-translate": {
    "hash": "cbfd3c6580c058adce21bbc80891b59750ba566f",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-translate",
      "version": "1.0.64",
      "description": "Adds offset to both the upper and lower bounds of this box.",
      "main": "box2-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box2"
          },
          "v": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box2"
          }
        }
      },
      "hash": "cbfd3c6580c058adce21bbc80891b59750ba566f"
    }
  },
  "@dualbox/dualbox-module-box2-union": {
    "hash": "6b7ed8894e7d718e94b7e698dfe731b78562e058",
    "pkg": {
      "name": "@dualbox/dualbox-module-box2-union",
      "version": "1.0.63",
      "description": "Compute the union between two given box2.",
      "main": "box2-union.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box2_1": {
            "type": "Box2",
            "const": true
          },
          "box2_2": {
            "type": "Box2",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box2"
          }
        }
      },
      "hash": "6b7ed8894e7d718e94b7e698dfe731b78562e058"
    }
  },
  "@dualbox/dualbox-module-box3": {
    "hash": "dfd9db6562a8f4d02fbf15cb392229c0f373b764",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3",
      "version": "1.0.64",
      "description": "Build a Box3 from 2 Vector2.",
      "main": "box3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "min": {
            "type": "Vector3"
          },
          "max": {
            "type": "Vector3"
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "dfd9db6562a8f4d02fbf15cb392229c0f373b764"
    }
  },
  "@dualbox/dualbox-module-box3-center-scale": {
    "hash": "d02321e49f8864f64670908cfa2c744552e790b2",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-center-scale",
      "version": "1.0.64",
      "description": "Scale the box according to its center.",
      "main": "box3-center-scale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": false
          },
          "p": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "d02321e49f8864f64670908cfa2c744552e790b2"
    }
  },
  "@dualbox/dualbox-module-box3-containsbox": {
    "hash": "490217abc65a75e064acf2aeb7a01c9ad6e5c469",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-containsbox",
      "version": "1.0.64",
      "description": "Returns true if this box includes the entirety of a given box.",
      "main": "box3-containsbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box3_1": {
            "type": "Box3",
            "const": true
          },
          "box3_2": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "490217abc65a75e064acf2aeb7a01c9ad6e5c469"
    }
  },
  "@dualbox/dualbox-module-box3-containspoint": {
    "hash": "fd7bdba4fd3b0c84baee1be31c22560709675435",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-containspoint",
      "version": "1.0.64",
      "description": "Returns true if this box includes the entirety of a given point.",
      "main": "box3-containspoint.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": true
          },
          "p": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "fd7bdba4fd3b0c84baee1be31c22560709675435"
    }
  },
  "@dualbox/dualbox-module-pdfkit-direct-pdf": {
    "hash": "a4b045c4efa3492af908280e93e221d5b1ac89bd",
    "pkg": {
      "name": "@dualbox/dualbox-module-pdfkit-direct-pdf",
      "version": "1.0.37",
      "description": "This module is a joker if you prefer to create a pdf in dualbox using direct PDFKit commands. You can find PDFKit documentation here : https://github.com/devongovett/pdfkit/blob/master/docs/guide.pdf. You can set loop",
      "main": "pdfkit-direct-pdf.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "pdfkit": "^0.8.3",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "commands": {
            "type": "json",
            "const": true,
            "desc": "Array of commands in the right order. Arguments must be defined in the JSON. Special command 'PDFDocument' can be used first to setup document property according to pdfkit documentation."
          },
          "name": {
            "type": "String",
            "const": true,
            "desc": "Name of the pdf file to build"
          }
        },
        "output": {
          "file": {
            "type": "File",
            "desc": "The resulting PDF file."
          }
        },
        "object": "Module"
      },
      "hash": "a4b045c4efa3492af908280e93e221d5b1ac89bd"
    }
  },
  "@dualbox/dualbox-module-box3-decompose": {
    "hash": "f2fdb0e60d57fc7b4aa18a1532ce27ab283971ad",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-decompose",
      "version": "1.0.64",
      "description": "decompose a box3",
      "main": "box3-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3"
          }
        },
        "output": {
          "min": {
            "type": "Vector3"
          },
          "max": {
            "type": "Vector3"
          }
        }
      },
      "hash": "f2fdb0e60d57fc7b4aa18a1532ce27ab283971ad"
    }
  },
  "@dualbox/dualbox-module-box3-expand-by-point": {
    "hash": "52fae6ad34ff414130f860d777029f88f865c8d0",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-expand-by-point",
      "version": "1.0.64",
      "description": "Expand the given box to contain the given point.",
      "main": "box3-expand-by-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": false
          },
          "p": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "52fae6ad34ff414130f860d777029f88f865c8d0"
    }
  },
  "@dualbox/dualbox-module-box3-from-center-and-size": {
    "hash": "384590c4557c4f6154f8db70869c9ba522d320a0",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-from-center-and-size",
      "version": "1.0.64",
      "description": "Build a Box3 from its center and its size.",
      "main": "box3-from-center-and-size.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "center": {
            "type": "Vector3"
          },
          "size": {
            "type": "Vector3"
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "384590c4557c4f6154f8db70869c9ba522d320a0"
    }
  },
  "@dualbox/dualbox-module-box3-from-points": {
    "hash": "fbc3979efaf8a77250fff373e26548a33f871161",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-from-points",
      "version": "1.0.64",
      "description": "Expand the given box to contain the given point.",
      "main": "box3-from-points.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "points": {
            "type": "Array<Vector3>",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "fbc3979efaf8a77250fff373e26548a33f871161"
    }
  },
  "@dualbox/dualbox-module-box3-getcenter": {
    "hash": "8e63dcbdda5099f1aa0f206f8e6e4125f0e52849",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-getcenter",
      "version": "1.0.64",
      "description": "Compute the center of a given box3.",
      "main": "box3-getcenter.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "p": {
            "type": "Vector3"
          }
        }
      },
      "hash": "8e63dcbdda5099f1aa0f206f8e6e4125f0e52849"
    }
  },
  "@dualbox/dualbox-module-box3-getsize": {
    "hash": "0d652b2ccb52bb59d1685a6753b6f0bdb67a113c",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-getsize",
      "version": "1.0.64",
      "description": "Compute the proportion (width, height) of a given box3.",
      "main": "box3-getsize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "size": {
            "type": "Vector3"
          }
        }
      },
      "hash": "0d652b2ccb52bb59d1685a6753b6f0bdb67a113c"
    }
  },
  "@dualbox/dualbox-module-box3-intersect": {
    "hash": "cf8660423d03c5ced6d05b32face179f6bd81878",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-intersect",
      "version": "1.0.64",
      "description": "Compute the intersection between two given box3.",
      "main": "box3-intersect.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box3_1": {
            "type": "Box3",
            "const": true
          },
          "box3_2": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "cf8660423d03c5ced6d05b32face179f6bd81878"
    }
  },
  "@dualbox/dualbox-module-box3-intersectsbox": {
    "hash": "13686278c24232afa89ecd70b8589541bf73807e",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-intersectsbox",
      "version": "1.0.64",
      "description": "Returns true if this box intersects with a given box.",
      "main": "box3-intersectsbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box3_1": {
            "type": "Box3",
            "const": true
          },
          "box3_2": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "13686278c24232afa89ecd70b8589541bf73807e"
    }
  },
  "@dualbox/dualbox-module-box3-set": {
    "hash": "5aa7dfe299a0f82e294608c243afcde854d39fd4",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-set",
      "version": "1.0.64",
      "description": "Set min and max scalar values for the given box. If the value set for a component is null, the box will keep its current value.",
      "main": "box3-set.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3",
            "const": false
          },
          "minX": {
            "type": "Number",
            "const": true,
            "value": null
          },
          "minY": {
            "type": "Number",
            "const": true,
            "value": null
          },
          "minZ": {
            "type": "Number",
            "const": true,
            "value": null
          },
          "maxX": {
            "type": "Number",
            "const": true,
            "value": null
          },
          "maxY": {
            "type": "Number",
            "const": true,
            "value": null
          },
          "maxZ": {
            "type": "Number",
            "const": true,
            "value": null
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "5aa7dfe299a0f82e294608c243afcde854d39fd4"
    }
  },
  "@dualbox/dualbox-module-box3-translate": {
    "hash": "93a97d007b71a6d8e7d1def35b505248938099ac",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-translate",
      "version": "1.0.64",
      "description": "Adds offset to both the upper and lower bounds of this box.",
      "main": "box3-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box": {
            "type": "Box3"
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "93a97d007b71a6d8e7d1def35b505248938099ac"
    }
  },
  "@dualbox/dualbox-module-box3-union": {
    "hash": "0bf0ddae0496b36e9e819bb013344799b1f7d89a",
    "pkg": {
      "name": "@dualbox/dualbox-module-box3-union",
      "version": "1.0.60",
      "description": "Compute the union between two given box3.",
      "main": "box3-union.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "box3_1": {
            "type": "Box3",
            "const": true
          },
          "box3_2": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "0bf0ddae0496b36e9e819bb013344799b1f7d89a"
    }
  },
  "@dualbox/dualbox-module-boxgeometry": {
    "hash": "928ed998f57f46d218d7eae3ae256b21a04bc906",
    "pkg": {
      "name": "@dualbox/dualbox-module-boxgeometry",
      "version": "1.0.65",
      "description": "Simple module to create a 3D box.",
      "main": "BoxGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "width": {
            "type": "Number"
          },
          "height": {
            "type": "Number"
          },
          "depth": {
            "type": "Number"
          },
          "widthSegments": {
            "type": "Number",
            "value": 1
          },
          "heightSegments": {
            "type": "Number",
            "value": 1
          },
          "depthSegments": {
            "type": "Number",
            "value": 1
          },
          "normals": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex normals"
          },
          "uvs": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex texture coordinates. If false and parameter closed is null, then it will also affet the mesh which will be fully connected and closed."
          },
          "closed": {
            "type": "Boolean",
            "value": null,
            "desc": "Decides if the resulting mesh is closed. If true, all vertices will be connected to form a consistant shell. Note that uvs may be broken in this case. If false, the resulting geometry will be open on a line from the top to the bottom, which can be necessary for texture coordinates(uvs). If null, the geometry will be closed if uvs is false, and open if uvs is true."
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "928ed998f57f46d218d7eae3ae256b21a04bc906"
    }
  },
  "@dualbox/dualbox-module-cameraman-center": {
    "hash": "0eb8b4dbbb0c46303e32c70e36ebd08f578a5842",
    "pkg": {
      "name": "@dualbox/dualbox-module-cameraman-center",
      "version": "1.0.63",
      "description": "Tell the CameraMan to center the camera on a given AABB, with some margin ratio.",
      "main": "cameraman-center.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-cameraman": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "caman": {
            "type": "CameraMan",
            "desc": "A CameraMan.",
            "const": false
          },
          "ratio": {
            "desc": "If not null, will be used to center the camera on the given centerAABB. 1.0 will center as close as possible to the object, 1.2 will add a 20% margin, 0.80 will remove 20%, etc...",
            "type": "Number",
            "value": 1,
            "const": true
          },
          "box": {
            "desc": "AABB to center on.",
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "caman": {
            "type": "CameraMan",
            "value": "The CameraMan with centered camera."
          }
        }
      },
      "hash": "0eb8b4dbbb0c46303e32c70e36ebd08f578a5842"
    }
  },
  "@dualbox/dualbox-module-cameraman-get-camera": {
    "hash": "c047e6774838ecc089f907408c2d47a213528d76",
    "pkg": {
      "name": "@dualbox/dualbox-module-cameraman-get-camera",
      "version": "1.0.63",
      "description": "Get an autonomous camera from a CameraMan. This camera's settings corresond to the CameraMan settings. The name of the camera is reset.",
      "main": "cameraman-get-camera.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-cameraman": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "caman": {
            "desc": "A CameraMan",
            "type": "CameraMan",
            "const": true
          },
          "name": {
            "type": "String",
            "desc": "The camera man name. Default value is an empty name.",
            "value": "",
            "const": true
          }
        },
        "output": {
          "cam": {
            "type": "Camera",
            "value": "A transformed and autonomous Camera object."
          }
        }
      },
      "hash": "c047e6774838ecc089f907408c2d47a213528d76"
    }
  },
  "@dualbox/dualbox-module-cameraman-orthographic": {
    "hash": "b50ae2f4faee744a1e55c8960212874cd223513e",
    "pkg": {
      "name": "@dualbox/dualbox-module-cameraman-orthographic",
      "version": "1.0.63",
      "description": "Create a new CameraMan managing a OrthographicCamera. A CameraMan is a helper to manipulate the camera with abstractions such as target points, box to center the view on, etc...",
      "main": "cameraman-orthographic.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "target": {
            "desc": "Point on which the camera is centered, will zoom, etc...",
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            },
            "const": true
          },
          "orientation": {
            "desc": "Absolute orientation of the camera around the target.",
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            },
            "const": true
          },
          "distToTarget": {
            "desc": "Distance to the target point of the camera.",
            "type": "Number",
            "value": 200,
            "const": true
          },
          "name": {
            "desc": "The camera man name. Default value is an empty name.",
            "value": "",
            "type": "String",
            "const": true
          },
          "left": {
            "type": "Number",
            "value": -1,
            "desc": "Farmost left point of the camera. Note that aspect will be (right-left)/(bottom-top)."
          },
          "right": {
            "type": "Number",
            "value": 1,
            "desc": "Farmost right point of the camera. Note that aspect will be (right-left)/(bottom-top)."
          },
          "bottom": {
            "type": "Number",
            "value": -1,
            "desc": "Farmost bottom point of the camera. Note that aspect will be (right-left)/(bottom-top)."
          },
          "top": {
            "type": "Number",
            "value": 1,
            "desc": "Farmost top point of the camera. Note that aspect will be (right-left)/(bottom-top)."
          },
          "near": {
            "type": "Number",
            "value": 0,
            "desc": "Value for the near clipping plane. Anything closer to the camera will not be rendered. Default to 0."
          },
          "far": {
            "type": "Number",
            "value": 10000,
            "desc": "Value for the far clipping plane. Anything closer to the camera will not be rendered. Default to 10000."
          }
        },
        "output": {
          "caman": {
            "type": "CameraMan",
            "desc": "A CameraMan."
          }
        }
      },
      "hash": "b50ae2f4faee744a1e55c8960212874cd223513e"
    }
  },
  "@dualbox/dualbox-module-cameraman-perspective": {
    "hash": "5b8cfcf90be3327dd10ee0a8445d6e25ffcfd9ea",
    "pkg": {
      "name": "@dualbox/dualbox-module-cameraman-perspective",
      "version": "1.0.63",
      "description": "Create a new CameraMan managing a PerspectiveCamera. A CameraMan is a helper to manipulate the camera with abstractions such as target points, box to center the view on, etc...",
      "main": "cameraman-perspective.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "target": {
            "desc": "Point on which the camera is centered, will zoom, etc...",
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            },
            "const": true
          },
          "orientation": {
            "desc": "Absolute orientation of the camera around the target.",
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            },
            "const": true
          },
          "distToTarget": {
            "desc": "Distance to the target point of the camera.",
            "type": "Number",
            "value": 200,
            "const": true
          },
          "name": {
            "desc": "The camera man name. Default value is an empty name.",
            "value": "",
            "type": "String",
            "const": true
          },
          "fov": {
            "type": "Number",
            "value": 45,
            "desc": "Field of view, in degree. Default to 45."
          },
          "near": {
            "type": "Number",
            "value": 1,
            "desc": "Value for the near clipping plane. Anything closer to the camera will not be rendered. Default to 1."
          },
          "far": {
            "type": "Number",
            "value": 10000,
            "desc": "Value for the near clipping plane. Anything closer to the camera will not be rendered. Default to 10000."
          },
          "aspect": {
            "type": "Number",
            "value": 1,
            "desc": "The aspect ratio of the camera (ie 16/9 = 1.7777777, 4/3 = 1.3333333, 16/10 = 1.6... ). default is 1 (square image)."
          }
        },
        "output": {
          "caman": {
            "type": "CameraMan",
            "value": "A CameraMan."
          }
        }
      },
      "hash": "5b8cfcf90be3327dd10ee0a8445d6e25ffcfd9ea"
    }
  },
  "@dualbox/dualbox-module-catmullromcurve3": {
    "hash": "cfaf9f9abff320b516165688fb35e63e9d9a0214",
    "pkg": {
      "name": "@dualbox/dualbox-module-catmullromcurve3",
      "version": "1.0.63",
      "description": "Build a catmullromcurve3",
      "main": "catmullromcurve3.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "a": {
            "type": "Array",
            "const": true,
            "desc": "An array of Vector3 points"
          }
        },
        "output": {
          "curve": {
            "type": "curve"
          }
        }
      },
      "hash": "cfaf9f9abff320b516165688fb35e63e9d9a0214"
    }
  },
  "@dualbox/dualbox-module-color": {
    "hash": "3895773eccfc12f1d51fee3e6ebb760404330901",
    "pkg": {
      "name": "@dualbox/dualbox-module-color",
      "version": "1.0.63",
      "description": "Build a Color from 3 (Red,Green,Blue) components",
      "main": "color.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "r": {
            "type": "Number",
            "value": 0
          },
          "g": {
            "type": "Number",
            "value": 0
          },
          "b": {
            "type": "Number",
            "value": 0
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "3895773eccfc12f1d51fee3e6ebb760404330901"
    }
  },
  "@dualbox/dualbox-module-color-add": {
    "hash": "b970194242c590c35ea5f9a5df054f686435e51d",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-add",
      "version": "1.0.63",
      "description": "Add 2 colors",
      "main": "color-add.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "c1": {
            "type": "Color"
          },
          "c2": {
            "type": "Color"
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "b970194242c590c35ea5f9a5df054f686435e51d"
    }
  },
  "@dualbox/dualbox-module-color-decompose": {
    "hash": "cb79c07a9777122b30c8055792afb274654670dd",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-decompose",
      "version": "1.0.63",
      "description": "Decompose a Color into 3 components values (red, green, blue).",
      "main": "color-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-color": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "c": {
            "type": "Color",
            "const": true
          }
        },
        "output": {
          "r": {
            "type": "Number"
          },
          "g": {
            "type": "Number"
          },
          "b": {
            "type": "Number"
          }
        }
      },
      "hash": "cb79c07a9777122b30c8055792afb274654670dd"
    }
  },
  "@dualbox/dualbox-module-color-from-hsl": {
    "hash": "e92a732e5a950466242892aa13d7bde770acf308",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-from-hsl",
      "version": "1.0.63",
      "description": "Build a Color from HSL values.",
      "main": "color-from-hsl.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "h": {
            "type": "Number"
          },
          "s": {
            "type": "Number"
          },
          "l": {
            "type": "Number"
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "e92a732e5a950466242892aa13d7bde770acf308"
    }
  },
  "@dualbox/dualbox-module-color-fromhex": {
    "hash": "ef4db972fa669c0d6e54d9ce510fe62f9f9a5011",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-fromhex",
      "version": "1.0.63",
      "description": "Build a Color from an hexadecimal color (string) starting with #",
      "main": "color-fromhex.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "hex": {
            "type": "String",
            "value": "#000000"
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "ef4db972fa669c0d6e54d9ce510fe62f9f9a5011"
    }
  },
  "@dualbox/dualbox-module-color-multiply": {
    "hash": "c228e31fe64616b04430e57abc90896ff44a64fb",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-multiply",
      "version": "1.0.63",
      "description": "Multiply 2 colors",
      "main": "color-multiply.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-color": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "c1": {
            "type": "Color"
          },
          "c2": {
            "type": "Color"
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "c228e31fe64616b04430e57abc90896ff44a64fb"
    }
  },
  "@dualbox/dualbox-module-color-sub": {
    "hash": "9b78018dfdb689f9100183397649f8a3bc569532",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-sub",
      "version": "1.0.63",
      "description": "Sub 2 colors",
      "main": "color-sub.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-color": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "c1": {
            "type": "Color"
          },
          "c2": {
            "type": "Color"
          }
        },
        "output": {
          "c": {
            "type": "Color"
          }
        }
      },
      "hash": "9b78018dfdb689f9100183397649f8a3bc569532"
    }
  },
  "@dualbox/dualbox-module-color-to-hsl": {
    "hash": "e4fcc5de4abe9a8e5a5b03c91cc2bf9b71fdd525",
    "pkg": {
      "name": "@dualbox/dualbox-module-color-to-hsl",
      "version": "1.0.63",
      "description": "Get HSL values from a color object.",
      "main": "color-to-hsl.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-color": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "c": {
            "type": "Color"
          }
        },
        "output": {
          "h": {
            "type": "Number"
          },
          "s": {
            "type": "Number"
          },
          "l": {
            "type": "Number"
          }
        }
      },
      "hash": "e4fcc5de4abe9a8e5a5b03c91cc2bf9b71fdd525"
    }
  },
  "@dualbox/dualbox-module-cubicbeziercurve": {
    "hash": "e701f4f37756069a9efe260cc7028eabf3907213",
    "pkg": {
      "name": "@dualbox/dualbox-module-cubicbeziercurve",
      "version": "1.0.63",
      "description": "Build a cubicbeziercurve",
      "main": "cubicbeziercurve.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v0": {
            "type": "Vector2",
            "const": true
          },
          "v1": {
            "type": "Vector2",
            "const": true
          },
          "v2": {
            "type": "Vector2",
            "const": true
          },
          "v3": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "curve": {
            "type": "curve"
          }
        }
      },
      "hash": "e701f4f37756069a9efe260cc7028eabf3907213"
    }
  },
  "@dualbox/dualbox-module-cylindrical": {
    "hash": "c49e8fa1ad540d29acc2c5b63cecd87a20e20ce7",
    "pkg": {
      "name": "@dualbox/dualbox-module-cylindrical",
      "version": "1.0.63",
      "description": "Build a cylindrical from 3 coordinate values.",
      "main": "cylindrical.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radius": {
            "type": "Number",
            "value": 0,
            "desc": "distance from the origin to a point in the x-z plane."
          },
          "theta": {
            "type": "Number",
            "value": 0,
            "desc": "counterclockwise angle in the x-z plane measured in radians from the positive z-axis."
          },
          "y": {
            "type": "Number",
            "value": 0,
            "desc": "Height."
          }
        },
        "output": {
          "cyl": {
            "type": "Cylindrical"
          }
        }
      },
      "hash": "c49e8fa1ad540d29acc2c5b63cecd87a20e20ce7"
    }
  },
  "@dualbox/dualbox-module-cylindrical-to-vector3": {
    "hash": "c5547011572932e89e676ec9bb5f3f743d0e8a3b",
    "pkg": {
      "name": "@dualbox/dualbox-module-cylindrical-to-vector3",
      "version": "1.0.63",
      "description": "Build a Vector3 from a cylindrical coordinates object.",
      "main": "cylindrical-to-vector3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-cylindrical": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "cyl": {
            "type": "Cylindrical",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "c5547011572932e89e676ec9bb5f3f743d0e8a3b"
    }
  },
  "@dualbox/dualbox-module-displacementmap-from-imagedata": {
    "hash": "96d797569fd6a66c76e4fd299fe66344a999277f",
    "pkg": {
      "name": "@dualbox/dualbox-module-displacementmap-from-imagedata",
      "version": "1.0.63",
      "description": "Build a DisplacementMap from an ImageData.",
      "main": "dispmap-from-imgdata.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": true,
            "desc": "The image to use as a field of displacement values. The image will be greyscaled and each values mapped to [-1,1], -1 being for black pixels, and 1 for white pixels."
          },
          "lambda": {
            "type": "Number",
            "const": true,
            "value": 1,
            "desc": "Amplitude of the displacement. After mapping values od the image data to [-1,1], all values will be multiplied by lambda/2. That means for a complete greyscale image, the amplitude of the total displacement will be lambda."
          }
        },
        "output": {
          "dispmap": {
            "type": "DisplacementMap"
          }
        }
      },
      "hash": "96d797569fd6a66c76e4fd299fe66344a999277f"
    }
  },
  "@dualbox/dualbox-module-euler": {
    "hash": "8d98c105fecd24a78da64767ab0eb21aab4110f2",
    "pkg": {
      "name": "@dualbox/dualbox-module-euler",
      "version": "1.0.63",
      "description": "Build an Euler angles from 3 axis values and an order for the axis.",
      "main": "euler.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "y": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "z": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "s": {
            "type": "String",
            "value": "XYZ",
            "const": true
          }
        },
        "output": {
          "euler": {
            "type": "Euler"
          }
        }
      },
      "hash": "8d98c105fecd24a78da64767ab0eb21aab4110f2"
    }
  },
  "@dualbox/dualbox-module-euler-decompose": {
    "hash": "e681c8118dab7d6094c36a699a5279b29859567a",
    "pkg": {
      "name": "@dualbox/dualbox-module-euler-decompose",
      "version": "1.0.63",
      "description": "Decompose an euler element.",
      "main": "euler-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-euler": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "euler": {
            "type": "Euler"
          }
        },
        "output": {
          "x": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "y": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "z": {
            "type": "Number",
            "value": 0,
            "const": true
          },
          "s": {
            "type": "String",
            "value": "XYZ",
            "const": true
          }
        }
      },
      "hash": "e681c8118dab7d6094c36a699a5279b29859567a"
    }
  },
  "@dualbox/dualbox-module-euler-fromrotationmatrix": {
    "hash": "c0abcf93ebf916d0481007ba290a25e800a1fb02",
    "pkg": {
      "name": "@dualbox/dualbox-module-euler-fromrotationmatrix",
      "version": "1.0.63",
      "description": "Build an Euler angles from a rotation matrix (a Matrix3).",
      "main": "euler-fromrotationmatrix.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix3": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m3": {
            "type": "Matrix3",
            "const": true
          },
          "s": {
            "type": "String",
            "value": "XYZ",
            "const": true
          }
        },
        "output": {
          "euler": {
            "type": "Euler"
          }
        }
      },
      "hash": "c0abcf93ebf916d0481007ba290a25e800a1fb02"
    }
  },
  "@dualbox/dualbox-module-euler-quaternion": {
    "hash": "8a88476c8f4e41aa99243d2d5cd04f7079383a83",
    "pkg": {
      "name": "@dualbox/dualbox-module-euler-quaternion",
      "version": "1.0.63",
      "description": "Build an Euler angles from a quaternion (a Vector4).",
      "main": "euler-fromquaternion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v4": {
            "type": "Vector4",
            "const": true
          },
          "s": {
            "type": "String",
            "value": "XYZ",
            "const": true
          }
        },
        "output": {
          "euler": {
            "type": "Euler"
          }
        }
      },
      "hash": "8a88476c8f4e41aa99243d2d5cd04f7079383a83"
    }
  },
  "@dualbox/dualbox-module-font-to-geometry": {
    "hash": "cc26a36b1f29e5dee895348bddfc5f09be0e0038",
    "pkg": {
      "name": "@dualbox/dualbox-module-font-to-geometry",
      "version": "1.0.63",
      "description": "Creates a geometry with a given text and font.",
      "main": "font-to-geometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "text": {
            "type": "String"
          },
          "font": {
            "type": "json"
          },
          "size": {
            "type": "Number",
            "value": 80
          },
          "height": {
            "type": "Number",
            "value": 5
          },
          "curveSegments": {
            "type": "Number",
            "value": 12
          },
          "bevelEnabled": {
            "type": "Boolean",
            "value": true
          },
          "bevelThickness": {
            "type": "Number",
            "value": 5
          },
          "bevelSize": {
            "type": "Number",
            "value": 4
          },
          "bevelSegments": {
            "type": "Number",
            "value": 2
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "cc26a36b1f29e5dee895348bddfc5f09be0e0038"
    }
  },
  "@dualbox/dualbox-module-font-to-geometry-2": {
    "hash": "384d095b8bee603ae5614fd9e1883772de8ced74",
    "pkg": {
      "name": "@dualbox/dualbox-module-font-to-geometry-2",
      "version": "1.0.63",
      "description": "Creates several geometries with a given text and font.",
      "main": "font-to-geometry-2.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "text": {
            "type": "String"
          },
          "font": {
            "type": "json",
            "desc": "JSON fonts can be generated with usual font files, using the following converter : https://gero3.github.io/facetype.js/"
          },
          "size": {
            "type": "Number",
            "value": 80
          },
          "accuracy": {
            "type": "Number",
            "value": 1
          }
        },
        "output": {
          "t": {
            "type": "Array<geometry>"
          }
        }
      },
      "hash": "384d095b8bee603ae5614fd9e1883772de8ced74"
    }
  },
  "@dualbox/dualbox-module-geometry-add-vertex-colors": {
    "hash": "db1c2c2e6c4b83431f1fc63b3b1f5bfd13f4e5fc",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-add-vertex-colors",
      "version": "1.0.52",
      "description": "Add a color attribute to vertices of this geometry. Attributes are additional properties of a geometry, like color, roughness, metalness, reflectivity, etc... It is used for OpenGL rendering.",
      "main": "geometry-add-vertex-colors.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "The geometry"
          },
          "name": {
            "type": "String",
            "value": "color",
            "const": true,
            "desc": "Name of the color attribute. Default is 'color', but you may need to add more than one color attribute, in this case you need to change the name."
          },
          "value": {
            "type": "Color",
            "value": {
              "r": 0,
              "g": 0,
              "b": 0
            },
            "const": true,
            "desc": "The default color value to set for all vertices. Default is black."
          },
          "alpha": {
            "type": "Number",
            "value": null,
            "const": true,
            "desc": "Set to a number in 0,1 if the colors must have an alpha channel. The value will be used as default alpha value."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "db1c2c2e6c4b83431f1fc63b3b1f5bfd13f4e5fc"
    }
  },
  "@dualbox/dualbox-module-geometry-apply-displacementmap": {
    "hash": "278f4c936d4a3a4c79fac516bfe8bee97ea3564b",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-apply-displacementmap",
      "version": "1.0.63",
      "description": "Apply the given displacement map on the given geometry using the normals defined on the geometry.",
      "main": "geometry-apply-displacementmap.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-displacementmap": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "The geometry on which vertices should be displaced. Note that uv coordinate (attribute 'uv') must be defined, along with normals."
          },
          "dispmap": {
            "type": "DisplacementMap",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "278f4c936d4a3a4c79fac516bfe8bee97ea3564b"
    }
  },
  "@dualbox/dualbox-module-geometry-apply-matrix4": {
    "hash": "51740f1979e982864747fef57bc9e13f03b1e7d1",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-apply-matrix4",
      "version": "1.0.63",
      "description": "Apply the given transformation matrix to the given geometry.",
      "main": "geometry-apply-matrix4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "51740f1979e982864747fef57bc9e13f03b1e7d1"
    }
  },
  "@dualbox/dualbox-module-file-to-texture": {
    "hash": "2098d7c9d8ece6b476666c906f82fac3e6a1cfbe",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-texture",
      "version": "1.0.63",
      "description": "Simple module to create a Texture from an image file.",
      "main": "file-to-texture.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-mapping": "^1.0.20",
        "@dualbox/dualbox-type-wrapping": "^1.0.20",
        "@dualbox/dualbox-type-texturefilter": "^1.0.20",
        "@dualbox/dualbox-type-pixelformat": "^1.0.20",
        "@dualbox/dualbox-type-pixeldatatype": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "desc": "The file to be the image for this texture. Should be JPEG or PNG",
            "const": true
          },
          "mapping": {
            "type": "Mapping",
            "desc": "How the image is applied to the object. An object type of UVMapping is the default, where the U,V coordinates are used to apply the map.",
            "const": true,
            "value": "UVMapping"
          },
          "wrapS": {
            "type": "Wrapping",
            "value": "ClampToEdgeWrapping",
            "const": true,
            "desc": "This defines how the texture is wrapped horizontally and corresponds to U in UV mapping. The default is ClampToEdgeWrapping, where the edge is clamped to the outer edge texels."
          },
          "wrapT": {
            "type": "Wrapping",
            "value": "ClampToEdgeWrapping",
            "const": true,
            "desc": "This defines how the texture is wrapped vertically and corresponds to V in UV mapping. The default is ClampToEdgeWrapping, where the edge is clamped to the outer edge texels."
          },
          "magFilter": {
            "type": "TextureFilter",
            "value": "LinearFilter",
            "const": true,
            "desc": "How the texture is sampled when a texel covers more than one pixel. The default is LinearFilter, which takes the four closest texels and bilinearly interpolates among them. The other option is NearestFilter, which uses the value of the closest texel."
          },
          "minFilter": {
            "type": "TextureFilter",
            "value": "LinearFilter",
            "const": true,
            "desc": "How the texture is sampled when a texel covers less than one pixel. The default is LinearMipMapLinearFilter, which uses mipmapping and a trilinear filter."
          },
          "anisotropy": {
            "type": "Number",
            "value": 1,
            "const": true,
            "desc": "The number of samples taken along the axis through the pixel that has the highest density of texels. By default, this value is 1. A higher value gives a less blurry result than a basic mipmap, at the cost of more texture samples being used. Use renderer.getMaxAnisotropy() to find the maximum valid anisotropy value for the GPU; this value is usually a power of 2."
          },
          "format": {
            "type": "PixelFormat",
            "value": "RGBAFormat",
            "const": true,
            "desc": "The default is RGBAFormat, although this module will automatically set this to RGBFormat for JPG images. "
          },
          "type": {
            "type": "PixelDataType",
            "value": "UnsignedByteType",
            "const": true,
            "desc": "This must correspond to the .format. The default is UnsignedByteType, which will be used for most texture formats."
          }
        },
        "output": {
          "texture": {
            "type": "Texture"
          }
        }
      },
      "hash": "2098d7c9d8ece6b476666c906f82fac3e6a1cfbe"
    }
  },
  "@dualbox/dualbox-module-geometry-array-merge": {
    "hash": "07f5adcd11f8b17e4dc3a647236a864a66832e0a",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-array-merge",
      "version": "1.0.64",
      "description": "Merge the given geometries. Input is an array here since it is more efficient than using a feedback loop on a geometry-merge.",
      "main": "geometry-array-merge.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "gs": {
            "type": "Array<Geometry>",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "07f5adcd11f8b17e4dc3a647236a864a66832e0a"
    }
  },
  "@dualbox/dualbox-module-geometry-average-faces-normals": {
    "hash": "5b991c8b13034fb7dea2134baa218e6287fd5924",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-average-faces-normals",
      "version": "1.0.38",
      "description": "Compute the average normal vector of all faces.",
      "main": "geometry-average-faces-normals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "5b991c8b13034fb7dea2134baa218e6287fd5924"
    }
  },
  "@dualbox/dualbox-module-geometry-capsule": {
    "hash": "1b1427e1e222190afbbd9ca0773b52f25a792172",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-capsule",
      "version": "1.0.52",
      "description": "Simple module to create a 3D capsule.",
      "main": "CapsuleGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radiusTop": {
            "type": "Number",
            "value": 1
          },
          "radiusBottom": {
            "type": "Number",
            "value": 1
          },
          "height": {
            "type": "Number",
            "value": 2
          },
          "radialSegments": {
            "type": "Number",
            "value": 8
          },
          "heightSegments": {
            "type": "Number",
            "value": 1
          },
          "capsTopSegments": {
            "type": "Number",
            "value": 4
          },
          "capsBottomSegments": {
            "type": "Number",
            "value": 4
          },
          "thetaStart": {
            "type": "Number",
            "value": 0
          },
          "thetaLength": {
            "type": "Number",
            "value": null
          },
          "normals": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex normals"
          },
          "uvs": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex texture coordinates"
          },
          "closed": {
            "type": "Boolean",
            "value": null,
            "desc": "Decides if the resulting mesh is closed. If true, all vertices will be connected to form a consistant shell. Note that uvs may be broken in this case. If false, the resulting geometry will be open on a line from the top to the bottom, which can be necessary for texture coordinates(uvs). If null, the geometry will be closed if uvs is false, and open if uvs is true."
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "1b1427e1e222190afbbd9ca0773b52f25a792172"
    }
  },
  "@dualbox/dualbox-module-geometry-compute-vertex-barycentric": {
    "hash": "c892627765e332cb3226707003e4a11601cf761b",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-compute-vertex-barycentric",
      "version": "1.0.63",
      "description": "Unindex the geometry, if indexed, and compute vertex barycentric coordinates. ",
      "main": "geometry-compute-vertex-barycentric.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry"
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "c892627765e332cb3226707003e4a11601cf761b"
    }
  },
  "@dualbox/dualbox-module-geometry-computebbox": {
    "hash": "a7898c0a230b0cee1c322a1739c1812de2f45757",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-computebbox",
      "version": "1.0.63",
      "description": "Compute the geometry Axis aligned bounding box.",
      "main": "geometrycomputebbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "bbox": {
            "type": "Box3"
          }
        }
      },
      "hash": "a7898c0a230b0cee1c322a1739c1812de2f45757"
    }
  },
  "@dualbox/dualbox-module-geometry-computevertexnormals": {
    "hash": "8e7f7bc86f5dc110325e73d834e702267ce24501",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-computevertexnormals",
      "version": "1.0.63",
      "description": "Compute vertex normals based on the mesh faces.",
      "main": "geometry-computevertexnormals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry"
          },
          "overwrite": {
            "type": "Boolean",
            "value": true,
            "desc": "If true, normals will be recomputed even if they are already defined. If false, any geometry with normals given to this module will get out as id."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "8e7f7bc86f5dc110325e73d834e702267ce24501"
    }
  },
  "@dualbox/dualbox-module-geometry-copy-uv-uv2": {
    "hash": "c2120adaf91f822ae02669fbf45f7f483a1796b3",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-copy-uv-uv2",
      "version": "1.0.63",
      "description": "Copy uv attribute to uv2 attribute. Especially useful to apply aoMap of lightMap to a geometry with one set of uv. Geometry uvs MUST be defined or the module will crash. If the geometry already has a uv2 attribute, it will be overwritten.",
      "main": "geometry-copy-uv-uv2.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false,
            "desc": "A geometry with attribute uv defined."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "c2120adaf91f822ae02669fbf45f7f483a1796b3"
    }
  },
  "@dualbox/dualbox-module-geometry-create-index": {
    "hash": "5a20c0cd8d3fb79e157f01b5b778fd55f332156f",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-create-index",
      "version": "1.0.63",
      "description": "Will create a naive indexing for the geometry, if it is currently non indexed. Vertices will not be merged contrary to module geometr--to-indexed",
      "main": "geometry-create-index.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "5a20c0cd8d3fb79e157f01b5b778fd55f332156f"
    }
  },
  "@dualbox/dualbox-module-geometry-crop-vertices": {
    "hash": "af9f959427ea58e670e47e25d65472edbb8e0fdc",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-crop-vertices",
      "version": "1.0.63",
      "description": "Remove all vertices outside the given box. Faces containing those vertices will be removed too.",
      "main": "geometry-crop-vertices.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          },
          "box": {
            "type": "Box3",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "af9f959427ea58e670e47e25d65472edbb8e0fdc"
    }
  },
  "@dualbox/dualbox-module-geometry-crop-vertices-polygon": {
    "hash": "bc4ea207e00af9e7d50a2e5be53661af6b88bae1",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-crop-vertices-polygon",
      "version": "1.0.38",
      "description": "Remove all vertices outside the given polygon. The polygon must be closed and well defined.",
      "main": "geometry-crop-vertices-polygon.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          },
          "polygon": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "bc4ea207e00af9e7d50a2e5be53661af6b88bae1"
    }
  },
  "@dualbox/dualbox-module-geometry-distance-simplify": {
    "hash": "fc06cfb94ca17a92e5b690b12fc7c6fe157d1990",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-distance-simplify",
      "version": "1.0.63",
      "description": "Simplify an OBJ ensuring a maximum authorized distance with it.",
      "main": "distance-simplify.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to simplify. A new geometry will be returned, containing only the remaining data."
          },
          "distance": {
            "type": "Number",
            "const": true,
            "desc": "Positive number describing the maximum authorized length (according to Hausdorff Distance) with the original geometry."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "fc06cfb94ca17a92e5b690b12fc7c6fe157d1990"
    }
  },
  "@dualbox/dualbox-module-geometry-extrude": {
    "hash": "59e95d93c89e3925ae363b394646348ada69e059",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-extrude",
      "version": "1.0.63",
      "description": "Extrude a geometry",
      "main": "extrude.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to extrude. A new geometry will be returned."
          },
          "dist": {
            "type": "Number",
            "const": true
          },
          "dir": {
            "type": "Vector3",
            "const": true
          },
          "patch": {
            "type": "Boolean",
            "const": true,
            "value": false
          },
          "round": {
            "type": "Boolean",
            "const": true,
            "value": false
          },
          "scale": {
            "type": "Number",
            "const": true,
            "value": 1
          },
          "resolution": {
            "type": "Number",
            "const": true,
            "value": 1
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "59e95d93c89e3925ae363b394646348ada69e059"
    }
  },
  "@dualbox/dualbox-module-geometry-flat-subdivide": {
    "hash": "e9ddeb7aedef529d27809b0fbda1334a57adb272",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-flat-subdivide",
      "version": "1.0.63",
      "description": "Subdivide an OBJ by adding new vertices between old vertices, without moving them",
      "main": "flatsubdivide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to subdivide. A new geometry will be returned."
          },
          "mode": {
            "type": "String",
            "const": true,
            "value": "full"
          },
          "faces": {
            "type": "Array",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "e9ddeb7aedef529d27809b0fbda1334a57adb272"
    }
  },
  "@dualbox/dualbox-module-geometry-flip-side": {
    "hash": "902020f785e45fc358f10a1bb85d68ea551d6b81",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-flip-side",
      "version": "1.0.63",
      "description": "Flip triangles sides in the geometry. Faces will be oriented in the opposite as they were.",
      "main": "geometry-flip-side.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "902020f785e45fc358f10a1bb85d68ea551d6b81"
    }
  },
  "@dualbox/dualbox-module-file-to-array-light": {
    "hash": "0dc108760bd3780d6959f75f202f02b71d7a55d1",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-array-light",
      "version": "1.0.63",
      "description": "",
      "main": "FileToArrayLight.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-file": "^1.0.18"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A file representing an array of lights. Accepted format : JSON."
          }
        },
        "output": {
          "arr": {
            "type": "Array<Light>"
          }
        }
      },
      "hash": "0dc108760bd3780d6959f75f202f02b71d7a55d1"
    }
  },
  "@dualbox/dualbox-module-geometry-fractal": {
    "hash": "74a334faeb715f1c2bffee3029b08c2656eaae47",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-fractal",
      "version": "1.0.55",
      "description": "Build a fractal geometry using a L system. See https://en.wikipedia.org/wiki/L-system",
      "main": "geometry-fractal.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "variables": {
            "type": "Map<String,Geometry>",
            "const": false,
            "desc": "Variables of the L system are geometries. Attributes can be set on geometries, but constants (functions), must handle them or at least conserve them. Key of the map are the variable names to be used in rules and axiom. Use only caracters in Aa-Zz and 0-9."
          },
          "constants": {
            "type": "Map<String,json>",
            "const": true,
            "desc": "Constants are functions which tranform a given geometry. Input parameters are the geometry and it must return a geometry (which can be the same object, modified). Key of the map are the function names to be used in rules and axiom. Use only caracters in Aa-Zz and 0-9. JSON will describe the function which can be javascript code evaluated {f:<string to be evaluated, DualBox3D si defined in the context>} or a special function defined for you. Special functions are {f:'applyMatrix4',mat:<Matrix4 in JSON>} (Simple matrix transformation), {f:'Translate',v:<Vector3 in JSON>}, {f:'Scale',v:<Vector3 in JSON>}, {f:'Rotate',angle:number, axis:<Vector3 in JSON>}."
          },
          "axiom": {
            "type": "String",
            "const": true,
            "desc": "Axiom of the L system"
          },
          "rules": {
            "type": "Map<String,String>",
            "const": true,
            "desc": "The rules to generate the fractal. You can use only variables or constant. For now the key strings are limited to variables (ie only variables can be replaced)."
          },
          "n": {
            "type": "Number",
            "const": "true",
            "desc": "The number of iterations to perform."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "74a334faeb715f1c2bffee3029b08c2656eaae47"
    }
  },
  "@dualbox/dualbox-module-file-to-bezierpaths": {
    "hash": "a8c98219a55cca04ba2e5f5ecfb82c627aef8bc3",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-bezierpaths",
      "version": "1.0.63",
      "description": "Parse an OBJ file to return all bezier path inside. Note that the bezier paths must be defined as particular bsplines in the obj file. ",
      "main": "FileToBezierPaths.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-lib-xthree": "^1.0.15"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A 3D geometry file. Accepted extensions are OBJ. If null will return an empty array."
          }
        },
        "output": {
          "beziers": {
            "type": "Array<BezierPath>"
          }
        }
      },
      "hash": "a8c98219a55cca04ba2e5f5ecfb82c627aef8bc3"
    }
  },
  "@dualbox/dualbox-module-geometry-from-json": {
    "hash": "d32d1df80d09804541cac17f14727b2fe599d50a",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-from-json",
      "version": "1.0.63",
      "description": "Parse a JSON object to build a Geometry.",
      "main": "geometry-from-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "d32d1df80d09804541cac17f14727b2fe599d50a"
    }
  },
  "@dualbox/dualbox-module-file-to-geometry": {
    "hash": "07cd9185c8567f074eaecfdd004d4085fb03c465",
    "pkg": {
      "name": "@dualbox/dualbox-module-file-to-geometry",
      "version": "1.0.65",
      "description": "",
      "main": "FileToGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "file": {
            "type": "File",
            "const": true,
            "desc": "A 3D geometry file. Accepted extensions are OBJ and STL. If null will return an empty geometry (be careful with empty bounding box)."
          },
          "vn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex normals"
          },
          "vt": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex texture coords"
          },
          "vc": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex colors."
          },
          "fn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load face normals"
          },
          "ft": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load face texture coords"
          },
          "reconnect": {
            "type": "Boolean",
            "value": false,
            "desc": "Will merge vertices which are at the same position. Note that this may lead to some badly defined triangle models, like non manifold meshes. Whenever possible, use consistant formats which provide connectivity informations, such as OBJ."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "07cd9185c8567f074eaecfdd004d4085fb03c465"
    }
  },
  "@dualbox/dualbox-module-geometry-fromobj": {
    "hash": "2cb0d92374b76cfa3553fe18a2ebb8a81edca14f",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-fromobj",
      "version": "1.0.64",
      "description": "Parse an OBJ string to build a geometry. Note that Geometry do not support face normals/uvs and indexing. If texture coords or normals are specified per face, the result will be an unindeed polygon soup.",
      "main": "GeometryFromObj.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "obj": {
            "type": "String",
            "const": true
          },
          "vn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex normals"
          },
          "vt": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex texture coords"
          },
          "fn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load face normals"
          },
          "ft": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load face texture coords"
          },
          "vc": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertices colors."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "2cb0d92374b76cfa3553fe18a2ebb8a81edca14f"
    }
  },
  "@dualbox/dualbox-module-geometry-get-surface": {
    "hash": "bfbcc353700b817a6974748f91ca9de6a6bdad04",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-get-surface",
      "version": "1.0.64",
      "description": "Compute the geometry's Surface.",
      "main": "geometry-get-surface.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "bfbcc353700b817a6974748f91ca9de6a6bdad04"
    }
  },
  "@dualbox/dualbox-module-geometry-get-volume": {
    "hash": "5e7a9eda49a342083e6418cb0e9cd6e5c0315f73",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-get-volume",
      "version": "1.0.63",
      "description": "Compute the geometry's volume.",
      "main": "geometry-get-volume.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "5e7a9eda49a342083e6418cb0e9cd6e5c0315f73"
    }
  },
  "@dualbox/dualbox-module-geometry-has-attribute": {
    "hash": "bb29649d5ad859c0fb359532bb16e23b8c2763b0",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-has-attribute",
      "version": "1.0.63",
      "description": "Return true if the given geometry defines the given attribute name.",
      "main": "geometry-has-attribute.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          },
          "name": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "bb29649d5ad859c0fb359532bb16e23b8c2763b0"
    }
  },
  "@dualbox/dualbox-module-geometry-length-flat-subdivide": {
    "hash": "3020893ea8d43ba73cf15aeeea36579ac0498c6c",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-length-flat-subdivide",
      "version": "1.0.63",
      "description": "Subdivide an OBJ until reaching a maximum edge length",
      "main": "geometry-length-flat-subdivide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to subdivide. A new geometry will be returned."
          },
          "max_length": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "3020893ea8d43ba73cf15aeeea36579ac0498c6c"
    }
  },
  "@dualbox/dualbox-module-geometry-merge": {
    "hash": "71599f1d42568318f6e0afa9e5e69ed1c791a7d8",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-merge",
      "version": "1.0.63",
      "description": "Merge the given geometries.",
      "main": "geometry-merge.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g1": {
            "type": "Geometry",
            "const": true
          },
          "g2": {
            "type": "Geometry",
            "const": true
          },
          "g3": {
            "type": "Geometry",
            "value": null,
            "const": true
          },
          "g4": {
            "type": "Geometry",
            "value": null,
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "71599f1d42568318f6e0afa9e5e69ed1c791a7d8"
    }
  },
  "@dualbox/dualbox-module-geometry-offset-from-geometry": {
    "hash": "48e47b24df1aca8820e9b9ed92abda3027d5d3e2",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-offset-from-geometry",
      "version": "1.0.64",
      "description": "Offset the first ",
      "main": "geometry-offset-from-geometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false,
            "desc": "The geometry to offset, this geometry will be modified (translated)"
          },
          "gOff": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry from which g will be offset"
          },
          "dir": {
            "type": "Vector3",
            "const": true,
            "desc": "The direction in which the geometry will be translated according to the computed offset"
          },
          "offset": {
            "type": "Number",
            "const": true,
            "desc": "The wanted offset."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "48e47b24df1aca8820e9b9ed92abda3027d5d3e2"
    }
  },
  "@dualbox/dualbox-module-geometry-plane": {
    "hash": "02ae9ce2f9cf9716a00965e3878dcc9b56761b2a",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-plane",
      "version": "1.0.63",
      "description": "Create a simple square plane geometry, with uv etc...",
      "main": "geometry-plane.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "width": {
            "type": "Number",
            "desc": "The width of the plane.",
            "const": true
          },
          "height": {
            "type": "Number",
            "desc": "The height of the plane.",
            "const": true
          },
          "widthSegments": {
            "type": "Number",
            "value": 1,
            "desc": "The number of subdivision along the width. Default to 1",
            "const": true
          },
          "heightSegments": {
            "type": "Number",
            "value": 1,
            "desc": "The number of subdivision along the height. Default to 1",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "02ae9ce2f9cf9716a00965e3878dcc9b56761b2a"
    }
  },
  "@dualbox/dualbox-module-geometry-project-on-heightmap": {
    "hash": "b3933be31c34da35684428fda402d8774d16ee72",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-project-on-heightmap",
      "version": "1.0.62",
      "description": "Project the given geometry points on the given HeightMap if it can be found in the given direction.",
      "main": "geometry-project-on-heightmap.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-heightmap": "^1.0.21",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "The geometry to be projected.",
            "const": false
          },
          "hmap": {
            "type": "HeightMap",
            "const": true
          },
          "dir": {
            "type": "Vector3",
            "value": null,
            "desc": "The projection direction. If null, geometry normals direction will be used. Note that if dir is not directed in z, only Bicubic interpolated HeightMaps will give accurate results. Contact Dualbox team if this is a strong issue for you."
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The geometry with points projected."
          }
        }
      },
      "hash": "b3933be31c34da35684428fda402d8774d16ee72"
    }
  },
  "@dualbox/dualbox-module-geometry-roll-around-axis": {
    "hash": "c45221db204e44bba54212d8799bb95b4e983eac",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-roll-around-axis",
      "version": "1.0.63",
      "description": "Roll the given geometry around the given axis.",
      "main": "geometry-roll-around-axis.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "o": {
            "type": "Vector3",
            "desc": "The origin of the axis",
            "const": true
          },
          "dir": {
            "type": "Vector3",
            "desc": "The direction of the axis",
            "const": true
          },
          "invar_dir": {
            "type": "Vector3",
            "desc": "The direction orthogonal to dir such that the plane dir,invar_dir is made of invariant points.",
            "const": true
          },
          "radius": {
            "type": "Number",
            "desc": "The radius of the cylinder around wich we want to roll the geometry."
          },
          "g": {
            "type": "Geometry"
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "c45221db204e44bba54212d8799bb95b4e983eac"
    }
  },
  "@dualbox/dualbox-module-geometry-rounded-cylinder": {
    "hash": "8f34f4b85dd48514ab39fc60ee2f612c6a4d795c",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-rounded-cylinder",
      "version": "1.0.53",
      "description": "Simple module to create a 3D rounded cylinder. Note that for now radiusBottom cannot be defined, radius top will actually be the radius of the cylinder.",
      "main": "RoundedCylinder.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radiusTop": {
            "type": "Number",
            "value": 4
          },
          "cornerRadiusTop": {
            "type": "Number",
            "value": 1
          },
          "cornerRadiusBottom": {
            "type": "Number",
            "value": 1
          },
          "cornerTopSegments": {
            "type": "Number",
            "value": 3
          },
          "cornerBottomSegments": {
            "type": "Number",
            "value": 3
          },
          "height": {
            "type": "Number",
            "value": 8
          },
          "radialSegments": {
            "type": "Number",
            "value": 8
          },
          "heightSegments": {
            "type": "Number",
            "value": 1
          },
          "capsTopSegments": {
            "type": "Number",
            "value": 2
          },
          "capsBottomSegments": {
            "type": "Number",
            "value": 2
          },
          "thetaStart": {
            "type": "Number",
            "value": 0
          },
          "thetaLength": {
            "type": "Number",
            "value": null
          },
          "normals": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex normals"
          },
          "uvs": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex texture coordinates"
          },
          "closed": {
            "type": "Boolean",
            "value": null,
            "desc": "Decides if the resulting mesh is closed. If true, all vertices will be connected to form a consistant shell. Note that uvs may be broken in this case. If false, the resulting geometry will be open on a line from the top to the bottom, which can be necessary for texture coordinates(uvs). If null, the geometry will be closed if uvs is false, and open if uvs is true."
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "8f34f4b85dd48514ab39fc60ee2f612c6a4d795c"
    }
  },
  "@dualbox/dualbox-module-geometry-scale": {
    "hash": "c7fe3044febc58dfd7646467c02503ec861053e0",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-scale",
      "version": "1.0.63",
      "description": "Simple module to scale a mesh",
      "main": "geometryscale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          },
          "z": {
            "type": "Number"
          },
          "g": {
            "type": "Geometry"
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "c7fe3044febc58dfd7646467c02503ec861053e0"
    }
  },
  "@dualbox/dualbox-module-geometry-segment-twist": {
    "hash": "e8123ba88c97e152c9714e0b2f81c6fbdcca238d",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-segment-twist",
      "version": "1.0.65",
      "description": "Apply a twist transformation from a point to another according to the given angle range. Note : angle is interpolated linearly from start to end. Contact Dualbox team if you need this module to have extra interpolation capabilities (like smooth step).",
      "main": "geometry-segment-twist.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "The geometry to be twisted",
            "const": false
          },
          "start": {
            "type": "Vector3",
            "desc": "The starting point of the twist. Points located under the plane of normal [start,end] and passing through start won't be moved.",
            "const": true
          },
          "end": {
            "type": "Vector3",
            "desc": "The ending point of the twist. Points located after the plane of normal [start,end] and passing through end won't be moved. Points ",
            "const": true
          },
          "thetaStart": {
            "type": "Number",
            "value": 0,
            "desc": "Angular rotation at start. Default is 0.",
            "const": true
          },
          "thetaEnd": {
            "type": "Number",
            "desc": "Angular rotation at end. Can be more that 2*PI to have several complete twist aloong the segment."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "e8123ba88c97e152c9714e0b2f81c6fbdcca238d"
    }
  },
  "@dualbox/dualbox-module-geometry-set-projective-uvs": {
    "hash": "f2d13b11606efaa75baa5b0623717d1a2461abe2",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-set-projective-uvs",
      "version": "1.0.39",
      "description": "Set uvs for the geometry considering a 2D texture projected on the geometry. Basic setting will create a volumic 3D texture from a 2D texture but TODO : options can be used to consider occlusion (feel free to contact Dualbox staff if you need this feature).",
      "main": "geometry-set-projective-uvs.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "desc": "Define the orientation, scale and position of the projection. Default is identity, the texture being projected in -z direction, on the [-1,1] square and from the origin.",
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "f2d13b11606efaa75baa5b0623717d1a2461abe2"
    }
  },
  "@dualbox/dualbox-module-geometry-simplify": {
    "hash": "8249f1405377541827e0eca038c9c4b86008e074",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-simplify",
      "version": "1.0.63",
      "description": "Simplify an OBJ ",
      "main": "simplify.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to simplify. A new geometry will be returned, containing only the remaining data."
          },
          "ratio": {
            "type": "Number",
            "const": true,
            "desc": "Number in ]0,1[ giving the proportion of vertices that should be removed. Ex : 0.4 will lead to 40% vertices reduction."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "8249f1405377541827e0eca038c9c4b86008e074"
    }
  },
  "@dualbox/dualbox-module-geometry-smoothtube": {
    "hash": "5e7234e4db5700e30287ad8789e574fd33787414",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-smoothtube",
      "version": "1.0.63",
      "description": "Created a smooth tube between 2 positions.",
      "main": "geometry-smoothtube.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "start": {
            "desc": "Starting point where we want a tube",
            "type": "Vector3",
            "const": true
          },
          "end": {
            "desc": "Ending position of the tube",
            "type": "Vector3",
            "const": true
          },
          "dir_start": {
            "desc": "Direction at starting point. Use length to control the curviness (see this vector as Bezier control point).",
            "type": "Vector3",
            "const": true
          },
          "dir_end": {
            "desc": "Direction at ending point. Use length to control the curviness (see this vector as Bezier control point).",
            "type": "Vector3",
            "const": true
          },
          "radius": {
            "desc": "Radius of the tube",
            "type": "Number"
          },
          "caps": {
            "desc": "Style of the tube's end",
            "type": "String",
            "value": "round"
          },
          "line_res": {
            "desc": "Resolution along the tube. No Guarantee that it will be even in length.",
            "type": "Number"
          },
          "radial_res": {
            "desc": "Radial resolution of the tube",
            "type": "Number"
          },
          "n": {
            "dec": "True if the output geometry should have normals",
            "type": "Boolean",
            "value": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "5e7234e4db5700e30287ad8789e574fd33787414"
    }
  },
  "@dualbox/dualbox-module-geometry-sphere": {
    "hash": "9a0592d440d7ddf5d41fa1a379c376670100e852",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-sphere",
      "version": "1.0.64",
      "description": "Simple module to create a 3D sphere.",
      "main": "SphereGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radius": {
            "type": "Number",
            "value": 1
          },
          "widthSegments": {
            "type": "Number",
            "value": 8
          },
          "heightSegments": {
            "type": "Number",
            "value": 6
          },
          "phiStart": {
            "type": "Number",
            "value": 0
          },
          "phiLength": {
            "type": "Number",
            "value": 6.283185307179586
          },
          "thetaStart": {
            "type": "Number",
            "value": 0
          },
          "thetaLength": {
            "type": "Number",
            "value": 3.141592653589793
          },
          "normals": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex normals"
          },
          "uvs": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex texture coordinates. If false and parameter closed is null, then it will also affet the mesh which will be fully connected and closed."
          },
          "closed": {
            "type": "Boolean",
            "value": null,
            "desc": "Decides if the resulting mesh is closed. If true, all vertices will be connected to form a consistant shell. Note that uvs may be broken in this case. If false, the resulting geometry will be open on a line from the top to the bottom, which can be necessary for texture coordinates(uvs). If null, the geometry will be closed if uvs is false, and open if uvs is true."
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "9a0592d440d7ddf5d41fa1a379c376670100e852"
    }
  },
  "@dualbox/dualbox-module-geometry-subdivide": {
    "hash": "13a4f379c041ec43f076f6e74e8a082e7da55396",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-subdivide",
      "version": "1.0.63",
      "description": "Subdivide an OBJ ",
      "main": "subdivide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry to subdivide. A new geometry will be returned."
          },
          "subdiv": {
            "type": "Number",
            "const": true,
            "value": 1
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "13a4f379c041ec43f076f6e74e8a082e7da55396"
    }
  },
  "@dualbox/dualbox-module-geometry-to-file": {
    "hash": "47f8193839aab472a0d36c428bc2d487f8f28061",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-to-file",
      "version": "1.0.64",
      "description": "",
      "main": "GeometryToFile.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-file": "^1.0.18",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true,
            "desc": "The Geometry to set in the file."
          },
          "name": {
            "type": "String",
            "value": "untitled-geometry",
            "const": true,
            "desc": "Name for the file."
          },
          "format": {
            "type": "String",
            "value": "obj",
            "const": true,
            "desc": "Format for the file, OBJ, STL, JSON or BinarySTL."
          },
          "vn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex normals"
          },
          "vt": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex texture coords."
          },
          "vc": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to load vertex colors."
          },
          "fn": {
            "type": "Boolean",
            "value": false,
            "desc": "set to false if you don't want to load face normals"
          },
          "ft": {
            "type": "Boolean",
            "value": false,
            "desc": "set to false if you don't want to load face texture coords"
          },
          "toFixed": {
            "type": "Number",
            "value": null,
            "desc": "Keep only this number of digit after 0. Useful to limit the size of text format files."
          },
          "toPrec": {
            "type": "Number",
            "value": null,
            "desc": "Keep only this number of significant digit. Useful to limit the size of text format files."
          }
        },
        "output": {
          "file": {
            "type": "File"
          }
        }
      },
      "hash": "47f8193839aab472a0d36c428bc2d487f8f28061"
    }
  },
  "@dualbox/dualbox-module-geometry-to-indexed": {
    "hash": "3d499966cfefc747013269c370318824314ed998",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-to-indexed",
      "version": "1.0.63",
      "description": "Will index the geometry, ie set indices for each vertex and conect the faces together.",
      "main": "geometry-to-indexed.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry"
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "3d499966cfefc747013269c370318824314ed998"
    }
  },
  "@dualbox/dualbox-module-geometry-tojson": {
    "hash": "6777b49bd0c49f9d2f9223cd67af1e322d76e982",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-tojson",
      "version": "1.0.64",
      "description": "Compute the union between two given box2.",
      "main": "geometry-tojson.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          },
          "vn": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to save vertex normals."
          },
          "vt": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to save vertex texture coords."
          },
          "vc": {
            "type": "Boolean",
            "value": true,
            "desc": "set to false if you don't want to save vertex colors."
          },
          "toFixed": {
            "type": "Number",
            "value": null,
            "desc": "Keep only this number of digit after 0. Useful to limit the size of text format files."
          },
          "toPrec": {
            "type": "Number",
            "value": null,
            "desc": "Keep only this number of significant digit. Useful to limit the size of text format files."
          },
          "threejs": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, will return raw JSON formated as in THREE.JS engine. If false, will add DualBox3D markers to be natively recognizable by DualBox loaders and modules."
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "6777b49bd0c49f9d2f9223cd67af1e322d76e982"
    }
  },
  "@dualbox/dualbox-module-light-get-intensity": {
    "hash": "663944b022bd8203826adbce0fa3b3e4166a6aad",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-get-intensity",
      "version": "1.0.54",
      "description": "Get the intensity of the given light.",
      "main": "light-get-intensity.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-light": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "light": {
            "type": "Light",
            "desc": "The light",
            "const": true
          }
        },
        "output": {
          "i": {
            "type": "Number"
          }
        }
      },
      "hash": "663944b022bd8203826adbce0fa3b3e4166a6aad"
    }
  },
  "@dualbox/dualbox-module-geometry-translate": {
    "hash": "f2ba9d91e4e3fd592027ca4de5c238fd2b37aa84",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-translate",
      "version": "1.0.63",
      "description": "Translate the given geometry.",
      "main": "geometry-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": false
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "f2ba9d91e4e3fd592027ca4de5c238fd2b37aa84"
    }
  },
  "@dualbox/dualbox-module-geometry-vertices-positions": {
    "hash": "9b3d1163126e19f55b928b17c149ef56e7ef063e",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-vertices-positions",
      "version": "1.0.64",
      "description": "Get an array containing all vertices positions of the given geometry.",
      "main": "geometry-vertices-positions.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "vs": {
            "type": "Array<Vector3>"
          }
        }
      },
      "hash": "9b3d1163126e19f55b928b17c149ef56e7ef063e"
    }
  },
  "@dualbox/dualbox-module-heightmap-to-geometry": {
    "hash": "cd150bb952dcc8e574a86a00a1ed9a26ba6aa9c2",
    "pkg": {
      "name": "@dualbox/dualbox-module-heightmap-to-geometry",
      "version": "1.0.63",
      "description": "Return a Geometry representing the height map.",
      "main": "heightmap-to-geometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-heightmap": "^1.0.21",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "hmap": {
            "type": "HeightMap",
            "const": true
          },
          "acc": {
            "type": "Number",
            "value": 1,
            "desc": "Accuracy factor : 1 means the resolution will correspond to the map resolution width*height. A number n above 1 will generate a map of resolution n*width * n*height. Default to 1.",
            "const": true
          },
          "interp": {
            "type": "String",
            "value": null,
            "desc": "The interpolation to be used. Default is set to the default interpolation of the given Height Map, which is usually Bicubic.",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The Geometry built from Bilinear interpolation. Contact Dualbox team for more advanced options."
          }
        }
      },
      "hash": "cd150bb952dcc8e574a86a00a1ed9a26ba6aa9c2"
    }
  },
  "@dualbox/dualbox-module-heightmap-get-height": {
    "hash": "5065b7c042466a593e93f730ccdebfd99dace201",
    "pkg": {
      "name": "@dualbox/dualbox-module-heightmap-get-height",
      "version": "1.0.62",
      "description": "Return the height of the map at X,Y in the map reference.",
      "main": "heightmap-get-height.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-heightmap": "^1.0.21",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "hmap": {
            "type": "HeightMap",
            "const": true
          },
          "x": {
            "type": "Number",
            "desc": "X coordinate."
          },
          "y": {
            "type": "Number",
            "desc": "Y coordinate."
          },
          "interp": {
            "type": "String",
            "value": "bicubic",
            "desc": "Interpolation method : bicubic, bilinear or nearest. Default to bicubic."
          }
        },
        "output": {
          "x": {
            "type": "Number",
            "desc": "The height at the given point"
          }
        }
      },
      "hash": "5065b7c042466a593e93f730ccdebfd99dace201"
    }
  },
  "@dualbox/dualbox-module-imagedata-hue-saturation": {
    "hash": "4c92892d538605af6a3279dc71597e852cdb2857",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-hue-saturation",
      "version": "1.0.63",
      "description": "This is a module to simulate the hue saturation tool from photoshop where the colorize checkbox is enabled.",
      "main": "imagedata-hue-saturation.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imgdata": {
            "type": "ImageData",
            "const": false
          },
          "hue": {
            "type": "Number",
            "const": true,
            "desc": "Photoshop hue value, a number in 0,360."
          },
          "saturation": {
            "type": "Number",
            "const": true,
            "desc": "Photoshop saturation value. A number in 0 100."
          },
          "lightness": {
            "type": "Number",
            "const": true,
            "desc": "Photoshop Lightness value. A number in -100 100"
          }
        },
        "output": {
          "imgdata": {
            "type": "ImageData",
            "desc": "The recolorized imagedata"
          }
        }
      },
      "hash": "4c92892d538605af6a3279dc71597e852cdb2857"
    }
  },
  "@dualbox/dualbox-module-imagedata-to-cube": {
    "hash": "938a0ac8ddb41dd46d458b5ec87397e8c8ab8992",
    "pkg": {
      "name": "@dualbox/dualbox-module-imagedata-to-cube",
      "version": "1.0.63",
      "description": "Convert a sphere map (equirectangular) to a cube map.",
      "main": "imagedata-to-cube.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "imagedata": {
            "type": "ImageData",
            "const": true
          },
          "nb_sample": {
            "type": "Number",
            "value": 4,
            "desc": "hz * hz sample will be us to determine a pixel",
            "const": true
          },
          "resolution": {
            "type": "Number",
            "value": 9,
            "desc": "resolution of the outputs",
            "const": true
          }
        },
        "output": {
          "up": {
            "type": "ImageData"
          },
          "down": {
            "type": "ImageData"
          },
          "front": {
            "type": "ImageData"
          },
          "back": {
            "type": "ImageData"
          },
          "right": {
            "type": "ImageData"
          },
          "left": {
            "type": "ImageData"
          }
        }
      },
      "hash": "938a0ac8ddb41dd46d458b5ec87397e8c8ab8992"
    }
  },
  "@dualbox/dualbox-module-light-set-intensity": {
    "hash": "79ad72b3b7b3cb344cf3b0cab1ee66363fbc041b",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-set-intensity",
      "version": "1.0.54",
      "description": "Get the intensity of the given light.",
      "main": "light-set-intensity.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "i": {
            "type": "Number",
            "desc": "The wanted intensity.",
            "const": true
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "79ad72b3b7b3cb344cf3b0cab1ee66363fbc041b"
    }
  },
  "@dualbox/dualbox-module-light": {
    "hash": "e77d7a0de708897509678fd44df3e23b77800c68",
    "pkg": {
      "name": "@dualbox/dualbox-module-light",
      "version": "1.0.63",
      "description": "Build a Light from a set of parameters.",
      "main": "light.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "type": {
            "type": "String",
            "value": "DirectionalLight",
            "desc": "The type of light, should be among DirectionalLight, PointLight, HemisphereLight or AmbientLight"
          },
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The light color"
          },
          "intensity": {
            "type": "Number",
            "value": 1,
            "desc": "The light intensity, default is 1."
          },
          "position": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 1,
              "z": 0
            },
            "desc": "The position of the light, only for DirectionalLight and PointLight"
          },
          "groundColor": {
            "type": "Color",
            "value": null,
            "desc": "The ground light color, for HemisphereLight only."
          },
          "decay": {
            "type": "Number",
            "value": 1,
            "desc": "Only for PointLight, default to 1."
          },
          "distance": {
            "type": "Number",
            "value": 0,
            "desc": "Only for PointLight, default to 0."
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "e77d7a0de708897509678fd44df3e23b77800c68"
    }
  },
  "@dualbox/dualbox-module-light-ambient": {
    "hash": "eaab43bbb24456e6c0b70648964f8e8605fedeaf",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-ambient",
      "version": "1.0.63",
      "description": "Build an Ambient Light from a set of parameters.",
      "main": "light-ambient.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The light color"
          },
          "intensity": {
            "type": "Number",
            "value": 1,
            "desc": "The light intensity, default is 1."
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "eaab43bbb24456e6c0b70648964f8e8605fedeaf"
    }
  },
  "@dualbox/dualbox-module-light-directional": {
    "hash": "f7a4795b1744339021fa47526b818067e19a9c9e",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-directional",
      "version": "1.0.63",
      "description": "Build a Directional Light from a set of parameters.",
      "main": "light-directional.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The light color, default is white."
          },
          "intensity": {
            "type": "Number",
            "value": 1,
            "desc": "The light intensity, default is 1."
          },
          "position": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 1,
              "z": 0
            },
            "desc": "The position of the light. Note that this defines the direction more than the actual position."
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "f7a4795b1744339021fa47526b818067e19a9c9e"
    }
  },
  "@dualbox/dualbox-module-light-hemisphere": {
    "hash": "1fa4bbc6d9256c734e6ede621c1eafaf097b1f31",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-hemisphere",
      "version": "1.0.63",
      "description": "Build a Hemisphere Light from a set of parameters.",
      "main": "light-hemisphere.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The light color, default is white."
          },
          "groundColor": {
            "type": "Color",
            "value": null,
            "desc": "The ground light color, for HemisphereLight only."
          },
          "intensity": {
            "type": "Number",
            "value": 1,
            "desc": "The light intensity, default is 1."
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "1fa4bbc6d9256c734e6ede621c1eafaf097b1f31"
    }
  },
  "@dualbox/dualbox-module-light-point": {
    "hash": "0af8b5cf23064397d75463abd9dd06e659640b1e",
    "pkg": {
      "name": "@dualbox/dualbox-module-light-point",
      "version": "1.0.63",
      "description": "Build a Point Light from a set of parameters.",
      "main": "light-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The light color"
          },
          "intensity": {
            "type": "Number",
            "value": 1,
            "desc": "The light intensity, default is 1."
          },
          "position": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 1,
              "z": 0
            },
            "desc": "The position of the light."
          },
          "decay": {
            "type": "Number",
            "value": 1,
            "desc": "Only for PointLight, default to 1."
          },
          "distance": {
            "type": "Number",
            "value": 0,
            "desc": "Only for PointLight, default to 0."
          }
        },
        "output": {
          "light": {
            "type": "Light"
          }
        }
      },
      "hash": "0af8b5cf23064397d75463abd9dd06e659640b1e"
    }
  },
  "@dualbox/dualbox-module-line": {
    "hash": "97883006b8f466a8eade3d39c01e6d5aa65e166d",
    "pkg": {
      "name": "@dualbox/dualbox-module-line",
      "version": "1.0.63",
      "description": "Simple module to create a Line or LineSegments.",
      "main": "Line.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "desc": "Line geometry.",
            "const": true
          },
          "mat": {
            "type": "Material",
            "desc": "Line material.",
            "const": true
          },
          "renderOrder": {
            "type": "Number",
            "value": 0,
            "desc": "Determine a priority for this line to be rendered. All objects with lower renderOrder will necessary be drawn before this object. Default is 0."
          }
        },
        "output": {
          "line": {
            "type": "Line"
          }
        }
      },
      "hash": "97883006b8f466a8eade3d39c01e6d5aa65e166d"
    }
  },
  "@dualbox/dualbox-module-linegeometry-apply-matrix4": {
    "hash": "e2a8d476f1098ed983ea737e19d9e8443056b4c5",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-apply-matrix4",
      "version": "1.0.56",
      "description": "Apply the given transformation matrix to the given LineGeometry.",
      "main": "linegeometry-apply-matrix4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "e2a8d476f1098ed983ea737e19d9e8443056b4c5"
    }
  },
  "@dualbox/dualbox-module-linegeometry-crop-heightmap": {
    "hash": "8a68445d10d75cbe585f134a2554b6266144b683",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-crop-heightmap",
      "version": "1.0.61",
      "description": "Crop the given line geometry depending on the given height map and return a new LineGeometry.",
      "main": "linegeometry-crop-heightmap.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-heightmap": "^1.0.21",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": false
          },
          "hmap": {
            "type": "HeightMap",
            "const": true
          },
          "side": {
            "type": "String",
            "value": "under",
            "desc": "Decide if we should crop vertices under the heightmap or or above. Accepted values are under and above."
          },
          "infiniteMap": {
            "type": "Boolean",
            "value": "false",
            "desc": "Restricted to false, true not implemented. Contact Dualbox team if you need more. For now the height map is considered to be located in a finite part of space, no extension on the border. That means all points of the LineGeometry must be in the map zone. If they are not, they will be cropped before processing."
          }
        },
        "output": {
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "8a68445d10d75cbe585f134a2554b6266144b683"
    }
  },
  "@dualbox/dualbox-module-linegeometry-get-polyline-points": {
    "hash": "cd479f9f6a987abcf7435c521b421f5523eeaf62",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-get-polyline-points",
      "version": "1.0.56",
      "description": "Return points from a LineGeometry.",
      "main": "linegeometry-get-polyline-points.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": true
          },
          "lineSegments": {
            "type": "Boolean",
            "value": false,
            "const": true,
            "desc": "If true, will return the line described as line segments, ie for a line P1,P2,P3, will return P1,P2,P2,P3. Default is false but if the given LineGeometry is line segments, then the returned points will necessary be line segments."
          }
        },
        "output": {
          "pts": {
            "type": "Array<Vector3>"
          }
        }
      },
      "hash": "cd479f9f6a987abcf7435c521b421f5523eeaf62"
    }
  },
  "@dualbox/dualbox-module-linegeometry-from-points": {
    "hash": "b41280662f3934e8a260aaa73cceb7c0246a9569",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-from-points",
      "version": "1.0.58",
      "description": "Build a linegeometry from a set of points.",
      "main": "linegeometry-from-points.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "points": {
            "type": "Array<Vector3>",
            "const": true,
            "desc": "The set of vertices along the polyline. Note that if the last point is equal to the first point, the line will be considered closed by most modules processing LineGeometry elements."
          },
          "lineSegments": {
            "type": "Boolean",
            "const": true,
            "value": false,
            "desc": "True is the resulting LineGeometry is defined by a segm of segments instead of a list of successive points."
          }
        },
        "output": {
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "b41280662f3934e8a260aaa73cceb7c0246a9569"
    }
  },
  "@dualbox/dualbox-module-linegeometry-grid": {
    "hash": "268d0baadee4720943bbf52b89f9876edf5737d9",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-grid",
      "version": "1.0.59",
      "description": "Build a grid in a LineGeometry object as a set of segments, on plane X,Y centered at 0,0,0.",
      "main": "linegeometry-grid.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "sizeX": {
            "type": "Number",
            "const": true,
            "value": 10,
            "desc": "The size of the plane grid along the X axis"
          },
          "sizeY": {
            "type": "Number",
            "const": true,
            "value": 10,
            "desc": "The size of the plane grid along the Y axis"
          },
          "divX": {
            "type": "Number",
            "const": true,
            "value": 10,
            "desc": "Number of tiles in X direction"
          },
          "divY": {
            "type": "Number",
            "const": true,
            "value": 10,
            "desc": "Number of tiles in Y direction"
          }
        },
        "output": {
          "g": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "268d0baadee4720943bbf52b89f9876edf5737d9"
    }
  },
  "@dualbox/dualbox-module-linegeometry-make-tube": {
    "hash": "43f3ba5a2647658416561dbaabfab0b795f4ef64",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-make-tube",
      "version": "1.0.56",
      "description": "Build a 3D tube around the given 3D line.",
      "main": "linegeometry-make-tube.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": true
          },
          "radialSegments": {
            "type": "Number",
            "const": true,
            "value": 16,
            "desc": "The number of segment around a cut."
          },
          "caps": {
            "type": "String",
            "const": true,
            "value": "flat",
            "desc": "Aspect of the extremities : round or flat. Default to flat."
          },
          "radius": {
            "type": "Number",
            "const": true,
            "value": 1,
            "desc": "Radius of the cut. Default is 1."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "43f3ba5a2647658416561dbaabfab0b795f4ef64"
    }
  },
  "@dualbox/dualbox-module-linegeometry-scale": {
    "hash": "577f3a26e5532d5037c3ec7638818058e627b24a",
    "pkg": {
      "name": "@dualbox/dualbox-module-linegeometry-scale",
      "version": "1.0.63",
      "description": "Simple module to scale a LineGeometry.",
      "main": "linegeometry-scale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          },
          "z": {
            "type": "Number"
          },
          "lg": {
            "type": "LineGeometry"
          }
        },
        "output": {
          "lg": {
            "type": "LineGeometry"
          }
        }
      },
      "hash": "577f3a26e5532d5037c3ec7638818058e627b24a"
    }
  },
  "@dualbox/dualbox-module-material-basic": {
    "hash": "72eb7e9c727bd7a76c63bb29f8e3e5e4989ad074",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-basic",
      "version": "1.0.62",
      "description": "Simple module to create a DualBox3D BasicMaterial.",
      "main": "BasicMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-texture": "^1.0.20",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-vertexcolors": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-textureconst": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "const": true,
            "desc": "Set material color"
          },
          "map": {
            "type": "Texture",
            "value": null,
            "desc": "Set texture map.",
            "const": true
          },
          "envMap": {
            "type": "CubeTexture",
            "value": null,
            "desc": "Set env map.",
            "const": true
          },
          "lightMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set light map. The lightMap requires a second set of UVs.",
            "const": true
          },
          "lightMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Intensity of the baked light. Default is 1.",
            "const": true
          },
          "lights": {
            "type": "Boolean",
            "value": false,
            "desc": "Whether the material is affected by lights. Default is false.",
            "const": true
          },
          "combine": {
            "type": "TextureConst",
            "value": "MultiplyOperation",
            "desc": "How to combine the result of the surface's color with the environment map, if any. Options are Multiply (default), MixOperation, AddOperation. If mix is chosen, the .reflectivity is used to blend between the two colors.",
            "const": true
          },
          "alphaMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set alpha map.",
            "const": true
          },
          "aoMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set ao map.",
            "const": true
          },
          "aoMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Set ao map intensity.",
            "const": true
          },
          "morphTargets": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses morphTargets.",
            "const": true
          },
          "reflectivity": {
            "type": "Number",
            "value": 1,
            "desc": "Set reflectivity.",
            "const": true
          },
          "refractionRatio": {
            "type": "Number",
            "value": 0.98,
            "desc": "Set refraction ratio.",
            "const": true
          },
          "skinning": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses skinning.",
            "const": true
          },
          "wireframe": {
            "type": "Boolean",
            "value": false,
            "desc": "Render geometry as wireframe. Default is false.",
            "const": true
          },
          "wireframeLinewidth": {
            "type": "Number",
            "value": 1,
            "desc": "Line thickness.",
            "const": true
          },
          "wireframeLinecap": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line ends.",
            "const": true
          },
          "wireframeLinejoin": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line joints.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Default to Front faces only for performances. For transparent material, setup SpaheX3D.DoubleSide.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "vertexColors": {
            "type": "VertexColors",
            "value": "NoColors",
            "desc": "Set the object color pick. NoColors, VertexColors (the geometry must then define per vertex colors, ie 'color' attribute), or FaceColors. Default to NoColors.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "72eb7e9c727bd7a76c63bb29f8e3e5e4989ad074"
    }
  },
  "@dualbox/dualbox-module-material-normal": {
    "hash": "03c13a502f43cf370bd13d87ad680eb1515f23da",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-normal",
      "version": "1.0.61",
      "description": "Simple module to create a DualBox3D NormalMaterial.",
      "main": "NormalMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lights": {
            "type": "Boolean",
            "value": false,
            "const": true,
            "desc": "Whether the material is affected by lights. Default is false."
          },
          "morphTargets": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses morphTargets. Default is false.",
            "const": true
          },
          "wireframe": {
            "type": "Boolean",
            "value": false,
            "desc": "Render geometry as wireframe. Default is false (i.e. render as smooth shaded).",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "DoubleSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Very useful for transparent materials.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "03c13a502f43cf370bd13d87ad680eb1515f23da"
    }
  },
  "@dualbox/dualbox-module-material-line-basic": {
    "hash": "42cb67fc93f3f95760689fe4b95a2a4f7b2b872c",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-line-basic",
      "version": "1.0.61",
      "description": "Simple module to create a DualBox3D LineBasicMaterial.",
      "main": "LineBasicMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "const": true,
            "desc": "Set material color"
          },
          "lights": {
            "type": "Boolean",
            "value": false,
            "desc": "Whether the material is affected by lights. Default is false.",
            "const": true
          },
          "depthTest": {
            "type": "Boolean",
            "value": true,
            "desc": "Whether to have depth test enabled when rendering this material. Default is true.",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "42cb67fc93f3f95760689fe4b95a2a4f7b2b872c"
    }
  },
  "@dualbox/dualbox-module-material-pbr": {
    "hash": "a563507fc5938d01601928e8c8eea461306d5566",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-pbr",
      "version": "1.0.61",
      "description": "First version of a module to create a PBR material. This material uses 6 envmap with different blur levels to render roughness (see module pbr-cubemap-loader for grouped loading). Light direction is fixed for now.",
      "main": "PBRMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "envMap0": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap1": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap2": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap3": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap4": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap5": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "diffuseMap": {
            "type": "CubeTexture",
            "desc": "Diffuse cubmap encoding the surrounding lights and colors of the cubemap.",
            "const": true
          },
          "color": {
            "type": "Color",
            "value": {
              "r": 0.5,
              "g": 0.5,
              "b": 0.5
            },
            "desc": "Base color of the material",
            "const": true
          },
          "roughness": {
            "type": "Number",
            "value": 0.3,
            "desc": "Set texture map.",
            "const": true
          },
          "metallic": {
            "type": "Number",
            "value": 0.5,
            "desc": "Set light map.",
            "const": true
          },
          "lightIntensity": {
            "type": "Number",
            "value": 1.5,
            "desc": "Set light intensity.",
            "const": true
          },
          "saturation": {
            "type": "Number",
            "value": 1,
            "desc": "Set the saturation of the envmap reflexion on the material (hacky parameter to easily influence the saturation of the envmap). default is 1.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Very useful for transparent materials.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "a563507fc5938d01601928e8c8eea461306d5566"
    }
  },
  "@dualbox/dualbox-module-material-pbr-refracted": {
    "hash": "3714e1e56fe418e476771ef60a77d80048b2251d",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-pbr-refracted",
      "version": "1.0.61",
      "description": "First version of a module to create a PBR material. This material uses 6 envmap with different blur levels to render roughness (see module pbr-cubemap-loader for grouped loading). Light direction is fixed for now. Refractive index is available.",
      "main": "PBRMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "envMap0": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap1": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap2": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap3": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap4": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "envMap5": {
            "type": "CubeTexture",
            "desc": "6 cubemap with different blur level to simulate different specular behavior (ie roughness).",
            "const": true
          },
          "diffuseMap": {
            "type": "CubeTexture",
            "desc": "Diffuse cubmap encoding the surrounding lights and colors of the cubemap.",
            "const": true
          },
          "color": {
            "type": "Color",
            "value": {
              "r": 0.5,
              "g": 0.5,
              "b": 0.5
            },
            "desc": "Base color of the material",
            "const": true
          },
          "roughness": {
            "type": "Number",
            "value": 0.3,
            "desc": "Set texture map.",
            "const": true
          },
          "metallic": {
            "type": "Number",
            "value": 0.5,
            "desc": "Set light map.",
            "const": true
          },
          "lightIntensity": {
            "type": "Number",
            "value": 1.5,
            "desc": "Set light intensity.",
            "const": true
          },
          "saturation": {
            "type": "Number",
            "value": 1,
            "desc": "Set the saturation of the envmap reflexion on the material (hacky parameter to easily influence the saturation of the envmap). default is 1.",
            "const": true
          },
          "refractiveIndex": {
            "type": "Number",
            "value": 1,
            "desc": "Refractive index of the material. Shader will consider the outside index is 1 (air).",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "The opacity for this material. if different from 1, this material will be considered transparent.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Very useful for transparent materials.",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "3714e1e56fe418e476771ef60a77d80048b2251d"
    }
  },
  "@dualbox/dualbox-module-material-phong": {
    "hash": "d050fc9b2b3e8e3cf491d8687dc8d803a9489de1",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-phong",
      "version": "1.0.61",
      "description": "Simple module to create a DualBox3D PhongMaterial.",
      "main": "PhongMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-texture": "^1.0.20",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-textureconst": "^1.0.20",
        "@dualbox/dualbox-type-usedcolor": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "const": true,
            "desc": "Set material color"
          },
          "specular": {
            "type": "Color",
            "value": {
              "r": 0.05,
              "g": 0.05,
              "b": 0.05
            },
            "desc": "Set specular color",
            "const": true
          },
          "shininess": {
            "type": "Number",
            "value": 30,
            "desc": "Set shininess",
            "const": true
          },
          "map": {
            "type": "Texture",
            "value": null,
            "desc": "Set texture map.",
            "const": true
          },
          "lightMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set light map.",
            "const": true
          },
          "lightMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Set light map intensity.",
            "const": true
          },
          "aoMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set ao map.",
            "const": true
          },
          "aoMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Set ao map intensity.",
            "const": true
          },
          "emissive": {
            "type": "Color",
            "value": {
              "r": 0,
              "g": 0,
              "b": 0
            },
            "desc": "Set emissive color.",
            "const": true
          },
          "emissiveMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set emissive map.",
            "const": true
          },
          "bumpMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set bump map.",
            "const": true
          },
          "bumpScale": {
            "type": "Number",
            "value": 1,
            "desc": "Set bump map scale.",
            "const": true
          },
          "normalMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set normal map.",
            "const": true
          },
          "normalScale": {
            "type": "Vector2",
            "value": {
              "x": 1,
              "y": 1
            },
            "desc": "Set normal map scale.",
            "const": true
          },
          "displacementMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set displacement map.",
            "const": true
          },
          "displacementScale": {
            "type": "Number",
            "value": 1,
            "desc": "Set displacement scale.",
            "const": true
          },
          "displacementBias": {
            "type": "Number",
            "value": 0,
            "desc": "Set displacement offset.",
            "const": true
          },
          "specularMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set specular map.",
            "const": true
          },
          "alphaMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set alpha map.",
            "const": true
          },
          "envMap": {
            "type": "CubeTexture",
            "value": null,
            "desc": "Set env map.",
            "const": true
          },
          "combine": {
            "type": "TextureConst",
            "value": "MultiplyOperation",
            "desc": "Set combine operation.",
            "const": true
          },
          "reflectivity": {
            "type": "Number",
            "value": 1,
            "desc": "Set reflectivity.",
            "const": true
          },
          "refractionRatio": {
            "type": "Number",
            "value": 0.98,
            "desc": "Set refraction ratio.",
            "const": true
          },
          "fog": {
            "type": "Boolean",
            "value": true,
            "desc": "Define whether the material color is affected by global fog settings.",
            "const": true
          },
          "flatShading": {
            "type": "Boolean",
            "value": false,
            "desc": "Define shading type : true for flat. Default to false.",
            "const": true
          },
          "wireframe": {
            "type": "Boolean",
            "value": false,
            "desc": "Render geometry as wireframe. Default is false.",
            "const": true
          },
          "wireframeLinewidth": {
            "type": "Number",
            "value": 1,
            "desc": "Line thickness.",
            "const": true
          },
          "wireframeLinecap": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line ends.",
            "const": true
          },
          "wireframeLinejoin": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line joints.",
            "const": true
          },
          "vertexColors": {
            "type": "UsedColor",
            "value": "NoColors",
            "desc": "Define how the vertices gets colored.",
            "const": true
          },
          "skinning": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses skinning.",
            "const": true
          },
          "morphTargets": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses morphTargets.",
            "const": true
          },
          "morphNormals": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses morphNormals.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Default to Front faces only for performances. For transparent material, setup SpaheX3D.DoubleSide.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "d050fc9b2b3e8e3cf491d8687dc8d803a9489de1"
    }
  },
  "@dualbox/dualbox-module-material-sem": {
    "hash": "621070e6f998ced27320bcc953d5b119e1bb0bb0",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-sem",
      "version": "1.0.61",
      "description": "Simple Module to create a Spherical Environment Mapping material. (SEM).",
      "main": "SEMMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-texture": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 0.5,
              "g": 0.5,
              "b": 0.5
            },
            "const": true,
            "desc": "Set material color"
          },
          "map": {
            "type": "Texture",
            "const": true,
            "desc": "Spherical Environment map in a single image."
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Default to Front faces only for performances. For transparent material, setup SpaheX3D.DoubleSide.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "621070e6f998ced27320bcc953d5b119e1bb0bb0"
    }
  },
  "@dualbox/dualbox-module-material-standard": {
    "hash": "4c364b7ee1345f464c623313a334e0b62cdf69e5",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-standard",
      "version": "1.0.61",
      "description": "Simple module to create a DualBox3D StandardMaterial.",
      "main": "StandardMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-texture": "^1.0.20",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-side": "^1.0.20",
        "@dualbox/dualbox-type-blending": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-shading": "^1.0.20",
        "@dualbox/dualbox-type-usedcolor": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "const": true,
            "desc": "Set material color"
          },
          "metalness": {
            "type": "Number",
            "desc": "How much the material is like a metal. Non-metallic materials such as wood or stone use 0.0, metallic use 1.0, nothing in between. A value between 0.0 and 1.0 could be used for a rusty metal look.",
            "const": true
          },
          "roughness": {
            "type": "Number",
            "desc": "Set material roughness. From 0 to 1, 0 being a perfectly smooth material.",
            "const": true
          },
          "alphaMap": {
            "type": "Texture",
            "value": null,
            "desc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null. Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
            "const": true
          },
          "aoMap": {
            "type": "Texture",
            "value": null,
            "desc": "The ambient occlusion map. Default is null.",
            "const": true
          },
          "aoMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
            "const": true
          },
          "bumpMap": {
            "type": "Texture",
            "value": null,
            "desc": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
            "const": true
          },
          "bumpScale": {
            "type": "Number",
            "value": 1,
            "desc": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
            "const": true
          },
          "displacementMap": {
            "type": "Texture",
            "value": null,
            "desc": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
            "const": true
          },
          "displacementScale": {
            "type": "Number",
            "value": 1,
            "desc": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
            "const": true
          },
          "displacementBias": {
            "type": "Number",
            "value": 0,
            "desc": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
            "const": true
          },
          "emissive": {
            "type": "Color",
            "value": {
              "r": 0,
              "g": 0,
              "b": 0
            },
            "desc": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black.",
            "const": true
          },
          "emissiveMap": {
            "type": "Texture",
            "value": null,
            "desc": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.",
            "const": true
          },
          "emissiveIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Intensity of the emissive light. Modulates the emissive color. Default is 1.",
            "const": true
          },
          "envMap": {
            "type": "Texture",
            "value": null,
            "desc": "The environment map. Default is null. Should be a Cube UV texture . <link to an example to come soon>",
            "const": true
          },
          "envMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Scales the effect of the environment map by multiplying its color. Default is 1.",
            "const": true
          },
          "lightMap": {
            "type": "Texture",
            "value": null,
            "desc": "The light map. Default is null. The lightMap requires a second set of UVs.",
            "const": true
          },
          "lightMapIntensity": {
            "type": "Number",
            "value": 1,
            "desc": "Intensity of the baked light. Default is 1.",
            "const": true
          },
          "map": {
            "type": "Texture",
            "value": null,
            "desc": "The color map. Default is null. The texture map color is modulated by the diffuse .color.",
            "const": true
          },
          "metalnessMap": {
            "type": "Texture",
            "value": null,
            "desc": "The red channel of this texture is used to alter the metalness of the material.",
            "const": true
          },
          "morphNormals": {
            "type": "Boolean",
            "value": false,
            "desc": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the Geometry to the shader. Default is false.",
            "const": true
          },
          "morphTargets": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses morphTargets. Default is false.",
            "const": true
          },
          "normalMap": {
            "type": "Texture",
            "value": null,
            "desc": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting.",
            "const": true
          },
          "normalScale": {
            "type": "Vector2",
            "value": {
              "x": 1,
              "y": 1
            },
            "desc": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
            "const": true
          },
          "refractionRatio": {
            "type": "Number",
            "value": 0.98,
            "desc": "The index of refraction for an environment map using THREE.CubeRefractionMapping. Default is 0.98.",
            "const": true
          },
          "roughnessMap": {
            "type": "Texture",
            "value": null,
            "desc": "The red channel of this texture is used to alter the roughness of the material.",
            "const": true
          },
          "skinning": {
            "type": "Boolean",
            "value": false,
            "desc": "Define whether the material uses skinning. Default is false.",
            "const": true
          },
          "wireframe": {
            "type": "Boolean",
            "value": false,
            "desc": "Render geometry as wireframe. Default is false.",
            "const": true
          },
          "wireframeLinewidth": {
            "type": "Number",
            "value": 1,
            "desc": "Line thickness.",
            "const": true
          },
          "wireframeLinecap": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line ends.",
            "const": true
          },
          "wireframeLinejoin": {
            "type": "String",
            "value": "round",
            "desc": "Define appearance of line joints.",
            "const": true
          },
          "shading": {
            "type": "Shading",
            "value": "SmoothShading",
            "desc": "Define shading type (SmoothShading or FlatShading).",
            "const": true
          },
          "vertexColors": {
            "type": "UsedColor",
            "value": "NoColors",
            "desc": "Define how the vertices gets colored : NoColors (use color map or base color), VertexColors, FaceColors.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "FrontSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Default to Front faces only for performances. For transparent material, setup SpaheX3D.DoubleSide.",
            "const": true
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          },
          "blending": {
            "type": "Blending",
            "value": "NormalBlending",
            "desc": "Set the blending mode for this material. Default to NormalBlending. Blending is an advanced feature based on THREE.JS blending. You can find more here : https://threejs.org/examples/webgl_materials_blending.html"
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "4c364b7ee1345f464c623313a334e0b62cdf69e5"
    }
  },
  "@dualbox/dualbox-module-material-wireframe": {
    "hash": "d66d224c1eb7bcbd5cfdb505974770e54d3d788a",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-wireframe",
      "version": "1.0.61",
      "description": "Create a nice wireframe material. Important : the geometry on wich this material is applied must be non indexed and have barycentric coordinates set. ",
      "main": "WireframeMaterial.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "color": {
            "type": "Color",
            "value": {
              "r": 0.5,
              "g": 0.5,
              "b": 0.5
            },
            "const": true,
            "desc": "Set material color."
          },
          "lineColor": {
            "type": "Color",
            "value": {
              "r": 0,
              "g": 0,
              "b": 0
            },
            "const": true,
            "desc": "Set wireframe color."
          },
          "lineWidth": {
            "type": "Number",
            "value": 1,
            "desc": "Width of the wireframe, in pixel. Does not work on all graphic hardware (must support GL_OES_standard_derivatives)."
          },
          "side": {
            "type": "Side",
            "value": "DoubleSide",
            "desc": "Which side of the polygon must be drawn, default to DoubleSide."
          },
          "opacity": {
            "type": "Number",
            "value": 1,
            "desc": "Set the object opacity. 1 is 100% opaque. Default is 1.",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        }
      },
      "hash": "d66d224c1eb7bcbd5cfdb505974770e54d3d788a"
    }
  },
  "@dualbox/dualbox-module-matrix3": {
    "hash": "4018baf27546e08d6c6b31fd5b9d48927562833e",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3",
      "version": "1.0.61",
      "description": "Build a Matrix3 from 9 coordinate values. Identity matrix by default",
      "main": "matrix3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x1": {
            "type": "Number",
            "value": 1
          },
          "y1": {
            "type": "Number",
            "value": 0
          },
          "z1": {
            "type": "Number",
            "value": 0
          },
          "x2": {
            "type": "Number",
            "value": 0
          },
          "y2": {
            "type": "Number",
            "value": 1
          },
          "z2": {
            "type": "Number",
            "value": 0
          },
          "x3": {
            "type": "Number",
            "value": 0
          },
          "y3": {
            "type": "Number",
            "value": 0
          },
          "z3": {
            "type": "Number",
            "value": 1
          }
        },
        "output": {
          "m": {
            "type": "Matrix3"
          }
        }
      },
      "hash": "4018baf27546e08d6c6b31fd5b9d48927562833e"
    }
  },
  "@dualbox/dualbox-module-matrix3-decompose": {
    "hash": "c518c7400a77abd9757e5a2e9e666d56d7fba493",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-decompose",
      "version": "1.0.61",
      "description": "Decompose a matrix3 into 9 coordinate values.",
      "main": "matrix3-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "x1": {
            "type": "Number"
          },
          "y1": {
            "type": "Number"
          },
          "z1": {
            "type": "Number"
          },
          "x2": {
            "type": "Number"
          },
          "y2": {
            "type": "Number"
          },
          "z2": {
            "type": "Number"
          },
          "x3": {
            "type": "Number"
          },
          "y3": {
            "type": "Number"
          },
          "z3": {
            "type": "Number"
          }
        }
      },
      "hash": "c518c7400a77abd9757e5a2e9e666d56d7fba493"
    }
  },
  "@dualbox/dualbox-module-matrix3-determinant": {
    "hash": "c84da7d583e850bfdcdf6e62b5fb4cd4c0ae047f",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-determinant",
      "version": "1.0.61",
      "description": "Give the determinant of a matrix",
      "main": "matrix3-determinant.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "i": {
            "type": "Number"
          }
        }
      },
      "hash": "c84da7d583e850bfdcdf6e62b5fb4cd4c0ae047f"
    }
  },
  "@dualbox/dualbox-module-matrix3-get-inverse": {
    "hash": "e2126deb9a88232be3e753e814990f074f975ae1",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-get-inverse",
      "version": "1.0.61",
      "description": "Inverse a matrix3. If the matrix is not invertible, set this to the 3x3 identity matrix.",
      "main": "matrix3-get-inverse.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix3"
          }
        }
      },
      "hash": "e2126deb9a88232be3e753e814990f074f975ae1"
    }
  },
  "@dualbox/dualbox-module-matrix3-multiply-matrices": {
    "hash": "c527004ae412ba8e3a8b0bc80ce00049b1298a4f",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-multiply-matrices",
      "version": "1.0.61",
      "description": "Multiply 2 matrices.",
      "main": "matrix3-multiply-matrices.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m1": {
            "type": "Matrix3",
            "const": true
          },
          "m2": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix3"
          }
        }
      },
      "hash": "c527004ae412ba8e3a8b0bc80ce00049b1298a4f"
    }
  },
  "@dualbox/dualbox-module-matrix3-multiply-number": {
    "hash": "64a8ce3702d628167a0ad2365d8730de50fd3fca",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-multiply-number",
      "version": "1.0.61",
      "description": "Multiply every component of the matrix by a number.",
      "main": "matrix3-multiply-number.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          },
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix3"
          }
        }
      },
      "hash": "64a8ce3702d628167a0ad2365d8730de50fd3fca"
    }
  },
  "@dualbox/dualbox-module-matrix3-transpose": {
    "hash": "a3002da032510d1ab58c611a9b2a58eca185bfb5",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix3-transpose",
      "version": "1.0.61",
      "description": "Transpose the matrix",
      "main": "matrix3-transpose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix3"
          }
        }
      },
      "hash": "a3002da032510d1ab58c611a9b2a58eca185bfb5"
    }
  },
  "@dualbox/dualbox-module-matrix4": {
    "hash": "5be0c218a63f585a5cc92c8c4a5cf67f0ed92b74",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4",
      "version": "1.0.61",
      "description": "Build a Matrix4 from 12 coordinate values. Identity matrix by default",
      "main": "matrix4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "e11": {
            "type": "Number",
            "value": 1
          },
          "e12": {
            "type": "Number",
            "value": 0
          },
          "e13": {
            "type": "Number",
            "value": 0
          },
          "e14": {
            "type": "Number",
            "value": 0
          },
          "e21": {
            "type": "Number",
            "value": 0
          },
          "e22": {
            "type": "Number",
            "value": 1
          },
          "e23": {
            "type": "Number",
            "value": 0
          },
          "e24": {
            "type": "Number",
            "value": 0
          },
          "e31": {
            "type": "Number",
            "value": 0
          },
          "e32": {
            "type": "Number",
            "value": 0
          },
          "e33": {
            "type": "Number",
            "value": 1
          },
          "e34": {
            "type": "Number",
            "value": 0
          },
          "e41": {
            "type": "Number",
            "value": 0
          },
          "e42": {
            "type": "Number",
            "value": 0
          },
          "e43": {
            "type": "Number",
            "value": 0
          },
          "e44": {
            "type": "Number",
            "value": 1
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "5be0c218a63f585a5cc92c8c4a5cf67f0ed92b74"
    }
  },
  "@dualbox/dualbox-module-matrix4-decompose": {
    "hash": "799dbba3b1d355fc3b434fd5a2b3a2f8648bfca5",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-decompose",
      "version": "1.0.61",
      "description": "Decompose a matrix4 into 12 coordinate values.",
      "main": "matrix4-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "e11": {
            "type": "Number"
          },
          "e12": {
            "type": "Number"
          },
          "e13": {
            "type": "Number"
          },
          "e14": {
            "type": "Number"
          },
          "e21": {
            "type": "Number"
          },
          "e22": {
            "type": "Number"
          },
          "e23": {
            "type": "Number"
          },
          "e24": {
            "type": "Number"
          },
          "e31": {
            "type": "Number"
          },
          "e32": {
            "type": "Number"
          },
          "e33": {
            "type": "Number"
          },
          "e34": {
            "type": "Number"
          },
          "e41": {
            "type": "Number"
          },
          "e42": {
            "type": "Number"
          },
          "e43": {
            "type": "Number"
          },
          "e44": {
            "type": "Number"
          }
        }
      },
      "hash": "799dbba3b1d355fc3b434fd5a2b3a2f8648bfca5"
    }
  },
  "@dualbox/dualbox-module-matrix4-determinant": {
    "hash": "940de101589788062d00a2fcc8ac908341a117c9",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-determinant",
      "version": "1.0.61",
      "description": "Give the determinant of a matrix4",
      "main": "matrix4-determinant.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "940de101589788062d00a2fcc8ac908341a117c9"
    }
  },
  "@dualbox/dualbox-module-matrix4-get-inverse": {
    "hash": "04c0de8e6e90bc3e4463f9ef3b8a8a9cac806cef",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-get-inverse",
      "version": "1.0.61",
      "description": "Inverse a matrix4. If the matrix is not invertible, set this to the 4x4 identity matrix.",
      "main": "matrix4-get-inverse.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "04c0de8e6e90bc3e4463f9ef3b8a8a9cac806cef"
    }
  },
  "@dualbox/dualbox-module-matrix4-make-rotation-from-axis": {
    "hash": "262400e5b9268c73ca68cb2d37bd4df5dd752f24",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-make-rotation-from-axis",
      "version": "1.0.61",
      "description": "Sets this matrix as rotation transform around axis by theta radians.",
      "main": "matrix4-make-rotation-from-axis.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "theta": {
            "type": "Number",
            "const": true
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "262400e5b9268c73ca68cb2d37bd4df5dd752f24"
    }
  },
  "@dualbox/dualbox-module-matrix4-make-rotation-from-euler": {
    "hash": "8fc7aa860963b73a864948128d6f4b2350fbaf2e",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-make-rotation-from-euler",
      "version": "1.0.61",
      "description": "Sets the rotation component (the upper left 3x3 matrix) of this matrix to the rotation specified by the given Euler Angle. The rest of the matrix is set to the identity. ",
      "main": "matrix4-make-rotation-from-euler.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-euler": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "euler": {
            "type": "Euler",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "8fc7aa860963b73a864948128d6f4b2350fbaf2e"
    }
  },
  "@dualbox/dualbox-module-matrix4-make-rotation-from-quaternion": {
    "hash": "bdbb48f6e2c124593adf7da2cd458c2e45037e9c",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-make-rotation-from-quaternion",
      "version": "1.0.61",
      "description": "Sets the rotation component of this matrix to the rotation specified by q. The rest of the matrix is set to the identity. ",
      "main": "matrix4-make-rotation-from-quaternion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "q": {
            "type": "Vector4",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "bdbb48f6e2c124593adf7da2cd458c2e45037e9c"
    }
  },
  "@dualbox/dualbox-module-matrix4-make-scale": {
    "hash": "97f7704e130168d919af48fc12385d6ea0a34855",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-make-scale",
      "version": "1.0.61",
      "description": "Sets this matrix as scale transform.",
      "main": "matrix4-make-scale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "97f7704e130168d919af48fc12385d6ea0a34855"
    }
  },
  "@dualbox/dualbox-module-matrix4-make-translation": {
    "hash": "2aa2465dbee77cf93f468cd3468ea7afe6c7ce0d",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-make-translation",
      "version": "1.0.61",
      "description": "Sets this matrix as a translation transform.",
      "main": "matrix4-make-translation.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "2aa2465dbee77cf93f468cd3468ea7afe6c7ce0d"
    }
  },
  "@dualbox/dualbox-module-matrix4-multiply-matrices": {
    "hash": "e0c43f8eeaa79832e38cd42f237aa21dd29103ee",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-multiply-matrices",
      "version": "1.0.61",
      "description": "Multiply 2 matrices.",
      "main": "matrix4-multiply-matrices.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m1": {
            "type": "Matrix4",
            "const": true
          },
          "m2": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "e0c43f8eeaa79832e38cd42f237aa21dd29103ee"
    }
  },
  "@dualbox/dualbox-module-material-pbr-cubemap-loader": {
    "hash": "4544d33f55224dc4d6eecdcf2e4ee90e8c33e2cb",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-pbr-cubemap-loader",
      "version": "1.0.61",
      "description": "This module loads all cubemap necessary for dualbox-module-pbr, based on a static URL path. The 6 specular maps must be available in urlsPath/specular, with names 0i_nx/0i_ny/0i_nz/0i_px/0i_py/0i_pz where i is the index of the cubmap 0 being the full reflexion environment map, 6 the full blurred map. The diffuse light map must be available in urlsPath/diffuse with names nx/ny/nz/px/py/pz.",
      "main": "PBRCubemapLoader.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-buffer": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "zip": {
            "type": "Buffer",
            "const": true,
            "desc": "Zip file containing images to be loaded in CubeTextures. Zip is given as a Bufffer element, any loaded buffer occuring not to be a zip will lead to a crash."
          },
          "imageFormat": {
            "type": "String",
            "value": "png",
            "desc": "Specular and diffuse images format, png is set as default format."
          }
        },
        "output": {
          "specular0": {
            "type": "CubeTexture"
          },
          "specular1": {
            "type": "CubeTexture"
          },
          "specular2": {
            "type": "CubeTexture"
          },
          "specular3": {
            "type": "CubeTexture"
          },
          "specular4": {
            "type": "CubeTexture"
          },
          "specular5": {
            "type": "CubeTexture"
          },
          "diffuse": {
            "type": "CubeTexture"
          }
        }
      },
      "hash": "4544d33f55224dc4d6eecdcf2e4ee90e8c33e2cb"
    }
  },
  "@dualbox/dualbox-module-matrix4-multiply-number": {
    "hash": "ab4e66d240307ca89865eb06fad4459a681884c7",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-multiply-number",
      "version": "1.0.61",
      "description": "Multiply every component of the matrix by a number.",
      "main": "matrix4-multiply-number.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "ab4e66d240307ca89865eb06fad4459a681884c7"
    }
  },
  "@dualbox/dualbox-module-matrix4-transpose": {
    "hash": "e5d588217d574e31332146a994a553b874f41a64",
    "pkg": {
      "name": "@dualbox/dualbox-module-matrix4-transpose",
      "version": "1.0.61",
      "description": "Transpose the matrix",
      "main": "matrix4-transpose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "m": {
            "type": "Matrix4"
          }
        }
      },
      "hash": "e5d588217d574e31332146a994a553b874f41a64"
    }
  },
  "@dualbox/dualbox-module-mesh": {
    "hash": "70e555e025a2d992579e7c671df846338c862655",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh",
      "version": "1.0.62",
      "description": "Simple module to create a Mesh.",
      "main": "Mesh.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-material": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "Mesh geometry.",
            "const": true
          },
          "mat": {
            "type": "Material",
            "desc": "Mesh material.",
            "const": true
          },
          "renderOrder": {
            "type": "Number",
            "value": 0,
            "desc": "Determine a priority for this mesh to be rendered. All meshes with lower renderOrder will necessary be drawn before this mesh. Default is 0."
          },
          "position": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            }
          },
          "rotation": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            }
          },
          "scale": {
            "type": "Vector3",
            "value": {
              "x": 1,
              "y": 1,
              "z": 1
            }
          },
          "name": {
            "type": "String",
            "value": ""
          },
          "raycast": {
            "type": "String",
            "value": "Normal",
            "desc": "If set to BoundingOnly, the raycasting on this mesh will only consider the boudning box. This can be useful for faster raycasting in some situation. It can especially speed up Canvas mouse events."
          }
        },
        "output": {
          "mesh": {
            "type": "Mesh"
          }
        }
      },
      "hash": "70e555e025a2d992579e7c671df846338c862655"
    }
  },
  "@dualbox/dualbox-module-mesh-compute-bbox": {
    "hash": "3b350345ce298efe34326146d7970b9cbf5691d9",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-compute-bbox",
      "version": "1.0.61",
      "description": "Compute bounding box of a given Mesh.",
      "main": "mesh-compute-bbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "const": true,
            "desc": "Mesh."
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "3b350345ce298efe34326146d7970b9cbf5691d9"
    }
  },
  "@dualbox/dualbox-module-mesh-decompose": {
    "hash": "fd3cedd145ea5e3922c68a81c3b9b096ff818c47",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-decompose",
      "version": "1.0.61",
      "description": "Simple module to create a Mesh.",
      "main": "mesh-decompose.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          },
          "mat": {
            "type": "Material"
          },
          "renderOrder": {
            "type": "Number"
          },
          "position": {
            "type": "Vector3"
          }
        }
      },
      "hash": "fd3cedd145ea5e3922c68a81c3b9b096ff818c47"
    }
  },
  "@dualbox/dualbox-module-mesh-fit-unit-box": {
    "hash": "c4eec452d3cdfaa6b566bfc06b37837390fd72f6",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-fit-unit-box",
      "version": "1.0.61",
      "description": "Transform the given mesh (position and scale) to fit in the cube [-1,1]. The given mesh must have no other transformation applied.",
      "main": "mesh-fit-unit-box.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-box3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh"
          },
          "bbox": {
            "type": "Box3",
            "value": null,
            "desc": "An optional bounding box. If provided (ie not null), it will be used as reference for positionning and scaling. If not provided, the mesh geometry's bounding box is used."
          }
        },
        "output": {
          "mesh": {
            "type": "Mesh"
          }
        }
      },
      "hash": "c4eec452d3cdfaa6b566bfc06b37837390fd72f6"
    }
  },
  "@dualbox/dualbox-module-material-standard-cubemap-loader": {
    "hash": "308e17a3a42d4b07cb81b09c74e6df7bde0662a6",
    "pkg": {
      "name": "@dualbox/dualbox-module-material-standard-cubemap-loader",
      "version": "1.0.61",
      "description": "This module loads all cubemap necessary for dualbox-module-material-standard, based on a static URL path to 6 cubemap images nx/ny/nz/px/py/pz. This module will bake those images into a cubemap with roughness approximation used in the standard material. A faster loading can be achieved by loading the baked image directly. TODO : give link to an app to bake and save the image, and to a module loading the baked image directly.",
      "main": "StandardCubemapLoader.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "jszip": "^3.1.3",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "nx": {
            "type": "String",
            "const": true,
            "desc": "Image of the negative X view for the cubemap. .hdr images are not supported yet."
          },
          "ny": {
            "type": "String",
            "const": true,
            "desc": "Image of the negative Y view for the cubemap. .hdr images are not supported yet."
          },
          "nz": {
            "type": "String",
            "const": true,
            "desc": "Image of the negative Z view for the cubemap. .hdr images are not supported yet."
          },
          "px": {
            "type": "String",
            "const": true,
            "desc": "Image of the positive X view for the cubemap. .hdr images are not supported yet."
          },
          "py": {
            "type": "String",
            "const": true,
            "desc": "Image of the positive Y view for the cubemap. .hdr images are not supported yet."
          },
          "pz": {
            "type": "String",
            "const": true,
            "desc": "Image of the positive Z view for the cubemap. .hdr images are not supported yet."
          }
        },
        "output": {
          "envMap": {
            "type": "Texture",
            "desc": "The resulting Texture, resolution is forced to 1024 x 1024 for now."
          },
          "dataURL": {
            "type": "String",
            "desc": "The resulting texture as an image in a dataURL format. This can be used to be saved and then loaded later. TODO : insert example with this kind of image loading in DualBox."
          }
        }
      },
      "hash": "308e17a3a42d4b07cb81b09c74e6df7bde0662a6"
    }
  },
  "@dualbox/dualbox-module-mesh-get-geometry": {
    "hash": "dab454458f0b7d1b2a179b70dd704535db9f5015",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-get-geometry",
      "version": "1.0.51",
      "description": "Decompose a mesh to retuen its geometry.",
      "main": "mesh-get-geometry.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "const": true
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "dab454458f0b7d1b2a179b70dd704535db9f5015"
    }
  },
  "@dualbox/dualbox-module-mesh-set-geometry": {
    "hash": "fa83f4d0a9e13de90ea32ea1899457e3c7af4caf",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-set-geometry",
      "version": "1.0.61",
      "description": "Change the mesh geometry with the given one. Note : a mesh is a SceneNode with a geometry (set of triangles) and a material.",
      "main": "mesh-set-geometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "const": false
          },
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "mesh": {
            "type": "Mesh"
          }
        }
      },
      "hash": "fa83f4d0a9e13de90ea32ea1899457e3c7af4caf"
    }
  },
  "@dualbox/dualbox-module-mesh-translate": {
    "hash": "1a86b5c2abc441ffc9c4fd19d743c010d08dae0d",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-translate",
      "version": "1.0.61",
      "description": "Simple module to translate a Mesh",
      "main": "mesh-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "desc": "A mesh."
          },
          "v": {
            "type": "Vector3",
            "desc": "Translation vector for the mesh."
          }
        },
        "output": {
          "mesh": {
            "type": "Mesh"
          }
        }
      },
      "hash": "1a86b5c2abc441ffc9c4fd19d743c010d08dae0d"
    }
  },
  "@dualbox/dualbox-module-mesh-set-matrix": {
    "hash": "f04c69432c7f185fe1e21583e079a5c8351f07d0",
    "pkg": {
      "name": "@dualbox/dualbox-module-mesh-set-matrix",
      "version": "1.0.61",
      "description": "Simple module to set the matrix of a mesh.",
      "main": "mesh-set-matrix.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-mesh": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "mesh": {
            "type": "Mesh",
            "desc": "A mesh.",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "desc": "Matrix for the mesh."
          }
        },
        "output": {
          "mesh": {
            "type": "Mesh"
          }
        }
      },
      "hash": "f04c69432c7f185fe1e21583e079a5c8351f07d0"
    }
  },
  "@dualbox/dualbox-module-meshscale": {
    "hash": "06092e0efcba95f6c4a80aa99841b969f26d76bf",
    "pkg": {
      "name": "@dualbox/dualbox-module-meshscale",
      "version": "1.0.62",
      "description": "Simple module to scale a mesh",
      "main": "meshscale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          },
          "z": {
            "type": "Number"
          },
          "mesh": {
            "type": "Mesh"
          }
        },
        "output": {
          "result": {
            "type": "Mesh"
          }
        }
      },
      "hash": "06092e0efcba95f6c4a80aa99841b969f26d76bf"
    }
  },
  "@dualbox/dualbox-module-objtogeometry": {
    "hash": "481f17c186e21ab7e3a76f904f782fa3c80ec6c9",
    "pkg": {
      "name": "@dualbox/dualbox-module-objtogeometry",
      "version": "1.0.61",
      "description": "Parse an OBJ string to build a geometry.",
      "main": "ObjToGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "obj": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "481f17c186e21ab7e3a76f904f782fa3c80ec6c9"
    }
  },
  "@dualbox/dualbox-module-plane-decompose": {
    "hash": "778b8b8942c707ad683d45ef194664298d0aff12",
    "pkg": {
      "name": "@dualbox/dualbox-module-plane-decompose",
      "version": "1.0.38",
      "description": "Decompose a plane object into a normal and a constant.",
      "main": "plane-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-plane": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "plane": {
            "type": "Plane",
            "const": true,
            "desc": "A plane object."
          }
        },
        "output": {
          "n": {
            "type": "Vector3"
          },
          "c": {
            "type": "Number"
          }
        }
      },
      "hash": "778b8b8942c707ad683d45ef194664298d0aff12"
    }
  },
  "@dualbox/dualbox-module-plane-fit-to-points": {
    "hash": "96f97c1e35a9278609654575720c22a8dd425a6f",
    "pkg": {
      "name": "@dualbox/dualbox-module-plane-fit-to-points",
      "version": "1.0.38",
      "description": "Create a plane (mathematical object, not a Geometry) fitting the given set of Vector3.",
      "main": "plane-fit-to-points.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "points": {
            "type": "Array<Vector3>",
            "const": true,
            "desc": "An array of 3D points to be approximated by a plane using least square method."
          }
        },
        "output": {
          "plane": {
            "type": "Plane"
          }
        }
      },
      "hash": "96f97c1e35a9278609654575720c22a8dd425a6f"
    }
  },
  "@dualbox/dualbox-module-polyline2-polygonize": {
    "hash": "cf95ae8fcd89c5cc0978e4dbc6c1ee6d3b790dec",
    "pkg": {
      "name": "@dualbox/dualbox-module-polyline2-polygonize",
      "version": "1.0.38",
      "description": "Extrude a geometry",
      "main": "polyline2-polygonize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "points": {
            "type": "Array<*>",
            "const": true,
            "desc": "An array of objects with x and y component. Should be a closed path, ie last and first point should be equals. If theyr are not, the path will be closed. * Can be Vector2, Vector3, a JSON {x:...,y:...}, etc..."
          },
          "holes": {
            "type": "Array<Array<*>>",
            "const": true,
            "value": [],
            "desc": "An array of array of objects with x and y component. * Can be Vector2, Vector3, a JSON {x:...,y:...}, etc..."
          },
          "acc": {
            "type": "Number",
            "value": 0,
            "const": true,
            "desc": "If this number is set to something else than 0, points will be added on a grid of resolution acc. This helps to get a nice triangle distribution when necessary."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        }
      },
      "hash": "cf95ae8fcd89c5cc0978e4dbc6c1ee6d3b790dec"
    }
  },
  "@dualbox/dualbox-module-quadraticbeziercurve": {
    "hash": "3a43bb33ca1e5150e809b6fe1abfd063d3ee219f",
    "pkg": {
      "name": "@dualbox/dualbox-module-quadraticbeziercurve",
      "version": "1.0.61",
      "description": "Build a quadraticbeziercurve",
      "main": "quadraticbeziercurve.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v0": {
            "type": "Vector2",
            "const": true,
            "desc": "The startpoint"
          },
          "v1": {
            "type": "Vector2",
            "const": true,
            "desc": "The control point"
          },
          "v2": {
            "type": "Vector2",
            "const": true,
            "desc": "The endpoint"
          }
        },
        "output": {
          "curve": {
            "type": "curve"
          }
        }
      },
      "hash": "3a43bb33ca1e5150e809b6fe1abfd063d3ee219f"
    }
  },
  "@dualbox/dualbox-module-quadraticbeziercurve3": {
    "hash": "20ce33d328eeb46adb823724c32cc962a89d10fd",
    "pkg": {
      "name": "@dualbox/dualbox-module-quadraticbeziercurve3",
      "version": "1.0.61",
      "description": "Build a quadraticbeziercurve3",
      "main": "quadraticbeziercurve3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v0": {
            "type": "Vector3",
            "const": true,
            "desc": "The startpoint"
          },
          "v1": {
            "type": "Vector3",
            "const": true,
            "desc": "The control point"
          },
          "v2": {
            "type": "Vector3",
            "const": true,
            "desc": "The endpoint"
          }
        },
        "output": {
          "curve": {
            "type": "curve"
          }
        }
      },
      "hash": "20ce33d328eeb46adb823724c32cc962a89d10fd"
    }
  },
  "@dualbox/dualbox-module-ray": {
    "hash": "7187aee666ab26be018a7e7df993c1463e2ba3a4",
    "pkg": {
      "name": "@dualbox/dualbox-module-ray",
      "version": "1.0.61",
      "description": "Create a ray from an origin and a direction (both Vector3).",
      "main": "ray.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "ray": {
            "type": "Ray"
          }
        }
      },
      "hash": "7187aee666ab26be018a7e7df993c1463e2ba3a4"
    }
  },
  "@dualbox/dualbox-module-render-scene": {
    "hash": "233fbce3ab06f6d1a76a88dca0ca90ae59fd4397",
    "pkg": {
      "name": "@dualbox/dualbox-module-render-scene",
      "version": "1.0.62",
      "description": "Render a given scene using the given parameters.",
      "main": "render-scene.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-camera": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-light": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "scene": {
            "type": "SceneNode",
            "const": true,
            "desc": "The scene to render. The scene must contain the lights, the camera, the models and everything needed to actually make a render."
          },
          "camera": {
            "type": "Camera",
            "const": true,
            "desc": "The camera to render from. Must be detached from any SceneNode. If it's not, or/and if its name can be found in the scene input, the camera with the same name in the scene will be used for render. Note that the camera aspect will be adapted to width and height."
          },
          "height": {
            "type": "Number",
            "value": 512,
            "desc": "The pixel height of the final image, default to 512. Width will be computed from the camera aspect ratio."
          },
          "bgColor": {
            "type": "Color",
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "The color of the background for this scene. "
          },
          "bgAlpha": {
            "type": "Number",
            "value": 1,
            "desc": "The color of the background for this scene. "
          },
          "camLights": {
            "type": "Array<Light>",
            "value": [],
            "desc": "All lights to be attached to the camera before rendering."
          },
          "lights": {
            "type": "Array<Light>",
            "value": [],
            "desc": "Lights to be added to the scene root before render. They will be removed after rendering so the scene remains untouched. You can also have lights defined in the scene."
          }
        },
        "output": {
          "dataURL": {
            "type": "String",
            "value": "PNG Image as a dataURL string"
          }
        }
      },
      "hash": "233fbce3ab06f6d1a76a88dca0ca90ae59fd4397"
    }
  },
  "@dualbox/dualbox-module-rgbcolor": {
    "hash": "5163c0b2dc149c1d65ab36a9e0993ceb34c0fc62",
    "pkg": {
      "name": "@dualbox/dualbox-module-rgbcolor",
      "version": "1.0.61",
      "description": "Simple module to build a color from RGB value.",
      "main": "rgbcolor.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "r": {
            "type": "Number"
          },
          "g": {
            "type": "Number"
          },
          "b": {
            "type": "Number"
          }
        },
        "output": {
          "color": {
            "type": "Color"
          }
        }
      },
      "hash": "5163c0b2dc149c1d65ab36a9e0993ceb34c0fc62"
    }
  },
  "@dualbox/dualbox-module-scene-axis-helper": {
    "hash": "a2baf26344e9f7515f5a0e52463c4075823df862",
    "pkg": {
      "name": "@dualbox/dualbox-module-scene-axis-helper",
      "version": "1.0.38",
      "description": "Create a helper to visualize the 3 axis. X is red, Y is green and Z is blue.",
      "main": "scene-axis-helper.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "length": {
            "type": "Number",
            "const": true,
            "desc": "Length of the lines to show the axis."
          },
          "radius": {
            "type": "Mesh",
            "desc": "Radius of the 4 diamonds showing the origin and the 3 unit points.",
            "const": true
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "a2baf26344e9f7515f5a0e52463c4075823df862"
    }
  },
  "@dualbox/dualbox-module-scenenode-addlight": {
    "hash": "6bff4657734d4ac6382c11d5dbaccfb36bd6e42e",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-addlight",
      "version": "1.0.61",
      "description": "Simple module to add a light to a SceneNode",
      "main": "scenenode-addlight.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-light": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "light": {
            "type": "Light",
            "desc": "A light to be added to children of this node.",
            "const": false
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "6bff4657734d4ac6382c11d5dbaccfb36bd6e42e"
    }
  },
  "@dualbox/dualbox-module-scenenode-addchild": {
    "hash": "75c3a7971da95912a9ccc4146947f618ddc2ae3d",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-addchild",
      "version": "1.0.61",
      "description": "Simple module to add a scenenode to another as a child.",
      "main": "scenenode-addchild.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "child": {
            "type": "SceneNode",
            "const": false,
            "desc": "A node to be added to children of this node."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "75c3a7971da95912a9ccc4146947f618ddc2ae3d"
    }
  },
  "@dualbox/dualbox-module-scenenode-addline": {
    "hash": "edeff6076bd9678f14c2a645d9ed5052c291d3e8",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-addline",
      "version": "1.0.62",
      "description": "Simple module to add a line to a SceneNode",
      "main": "scenenode-addline.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-line": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "line": {
            "type": "Line",
            "const": false,
            "desc": "A line to be added to children of this node."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "edeff6076bd9678f14c2a645d9ed5052c291d3e8"
    }
  },
  "@dualbox/dualbox-module-scenenode-addmesh": {
    "hash": "dd5953c18bc68ed5d5872cfd59fa180247111538",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-addmesh",
      "version": "1.0.61",
      "description": "Simple module to add a mesh to a SceneNode",
      "main": "scenenode-addmesh.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-mesh": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "mesh": {
            "type": "Mesh",
            "desc": "A mesh to be added to children of this node.",
            "const": false
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "dd5953c18bc68ed5d5872cfd59fa180247111538"
    }
  },
  "@dualbox/dualbox-module-scenenode-compute-bbox": {
    "hash": "3ee1351add6744a88a9d4054ff2b7262b5fb7d0e",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-compute-bbox",
      "version": "1.0.61",
      "description": "Compute bounding box of a given SceneNode.",
      "main": "scenenode-compute-bbox.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-scenenode": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": true,
            "desc": "Scene node."
          }
        },
        "output": {
          "box": {
            "type": "Box3"
          }
        }
      },
      "hash": "3ee1351add6744a88a9d4054ff2b7262b5fb7d0e"
    }
  },
  "@dualbox/dualbox-module-scenenode-set-matrix": {
    "hash": "a51f67cde34db0f7a35b29ad56dcaf15e42b216a",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-set-matrix",
      "version": "1.0.61",
      "description": "Simple module to set the matrix of a scenenode.",
      "main": "scenenode-set-matrix.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "desc": "A SceneNode.",
            "const": false
          },
          "m": {
            "type": "Matrix4",
            "desc": "Matrix for the mesh."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "a51f67cde34db0f7a35b29ad56dcaf15e42b216a"
    }
  },
  "@dualbox/dualbox-module-scenenode-set-name": {
    "hash": "bce84e77feadc5125cba8e298e761546fff08471",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-set-name",
      "version": "1.0.61",
      "description": "Set a node name.",
      "main": "scenenode-set-name.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "desc": "Scene node.",
            "const": false
          },
          "name": {
            "type": "String",
            "desc": "The name for this node"
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "bce84e77feadc5125cba8e298e761546fff08471"
    }
  },
  "@dualbox/dualbox-module-scenenode-translate": {
    "hash": "700bc368435ae0a81461eecb8b1f7dc0e428b97f",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-translate",
      "version": "1.0.62",
      "description": "Simple module to translate a SceneNode",
      "main": "scenenode-translate.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "desc": "Scene node.",
            "const": false
          },
          "v": {
            "type": "Vector3",
            "desc": "Translation vector for the node."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode"
          }
        }
      },
      "hash": "700bc368435ae0a81461eecb8b1f7dc0e428b97f"
    }
  },
  "@dualbox/dualbox-module-scenenode-vertex-global-occlusion": {
    "hash": "83383bb02fe12fbe86e29e558600b075effedf4b",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-vertex-global-occlusion",
      "version": "1.0.35",
      "description": "Traverse a scene to compute a vertex based 'global' occlusion for each object with a MeshStandardMaterial. The result can be very close to an ambient occlusion estimation, but emissive objects and complex environment cube maps will contribute. See ReadMe.md file for more details on how each object is considered and what will be computed.",
      "main": "scenenode-vertex-global-occlusion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "bgColor": {
            "type": "Color",
            "const": true,
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "Background color. Default is white (uniform lighting in all directions)."
          },
          "bgEnvMap": {
            "type": "CubeTexture",
            "const": true,
            "value": null,
            "desc": "An environment for the background. Will occlude the bgColor."
          },
          "bounces": {
            "type": "Number",
            "value": 1,
            "desc": "Number of light bounce simulated. The more the slower, but the more accurate the shadows. Default is 1, and for most situations  it's already slow enough."
          },
          "selectors": {
            "type": "String",
            "value": "*",
            "desc": "Description of which objects should be considered for occlusion computation. Default is '*', which means all objects will be processed. '/*' is none. '/* + my-mesh-name' will only compute the occlusion for the given mesh name. See Readme.md for more details on this. "
          },
          "target": {
            "type": "String",
            "value": "color",
            "desc": "The target attribute to store the reslting computation. Default is color. You can change that and even create a new attribute to later be used in a custom shader or interpolated with other attributes."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode",
            "desc": "A scene with all concerned object's geometry filled with the target attribute computation for a 'global occlusion'."
          }
        }
      },
      "hash": "83383bb02fe12fbe86e29e558600b075effedf4b"
    }
  },
  "@dualbox/dualbox-module-scenenode-vertex-ambient-occlusion": {
    "hash": "9ee73dcd314dafe311a632fbc5daf0968a2f4d86",
    "pkg": {
      "name": "@dualbox/dualbox-module-scenenode-vertex-ambient-occlusion",
      "version": "1.0.35",
      "description": "Traverse a scene to compute a vertex based ambient occlusion for each object with a MeshStandardMaterial. See ReadMe.md file for more details on how each object is considered and what will be computed.",
      "main": "scenenode-vertex-ambient-occlusion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-scenenode": "^1.0.20",
        "@dualbox/dualbox-type-color": "^1.0.20",
        "@dualbox/dualbox-type-cubetexture": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "snode": {
            "type": "SceneNode",
            "const": false,
            "desc": "Scene node."
          },
          "bgColor": {
            "type": "Color",
            "const": true,
            "value": {
              "r": 1,
              "g": 1,
              "b": 1
            },
            "desc": "Background color. Default is white (uniform lighting in all directions)."
          },
          "bgEnvMap": {
            "type": "CubeTexture",
            "const": true,
            "value": null,
            "desc": "An environment for the background. Will occlude the bgColor."
          },
          "bounces": {
            "type": "Number",
            "value": 1,
            "desc": "Number of light bounce simulated. The more the slower, but the more accurate the shadows."
          },
          "method": {
            "type": "String",
            "value": "wwwtyro",
            "desc": "Either iquilezles or wwwtyro. The first will use multiple render at vertex positions, the second will average shadow maps. Default is wwwtyro."
          }
        },
        "output": {
          "snode": {
            "type": "SceneNode",
            "desc": "A scene with all concerned object modified to show the AO component."
          }
        }
      },
      "hash": "9ee73dcd314dafe311a632fbc5daf0968a2f4d86"
    }
  },
  "@dualbox/dualbox-module-segment3": {
    "hash": "c006bfdcfaf313ccc19371ded6ca22aa4137c230",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3",
      "version": "1.0.61",
      "description": "Build a segment3 from 2 points (Vector3).",
      "main": "segment3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "p1": {
            "type": "Vector3",
            "const": true
          },
          "p2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "seg": {
            "type": "Segment3"
          }
        }
      },
      "hash": "c006bfdcfaf313ccc19371ded6ca22aa4137c230"
    }
  },
  "@dualbox/dualbox-module-segment3-at": {
    "hash": "b8670abf51dcdd56664556d6fee356922458608f",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3-at",
      "version": "1.0.61",
      "description": "Returns a vector at a certain position along the segment. When t = 0, it returns the start vector, and when t = 1 it returns the end vector.",
      "main": "segment3-at.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-segment3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "seg": {
            "type": "Segment3",
            "const": true
          },
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "b8670abf51dcdd56664556d6fee356922458608f"
    }
  },
  "@dualbox/dualbox-module-segment3-decompose": {
    "hash": "52f692d9425a663837caebc2d205e296c4bd0f1c",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3-decompose",
      "version": "1.0.61",
      "description": "Decompose a segment3 into 2 vector3 values.",
      "main": "segment3-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-segment3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "seg": {
            "type": "Segment3",
            "const": true
          }
        },
        "output": {
          "p1": {
            "type": "Vector3"
          },
          "p2": {
            "type": "Vector3"
          }
        }
      },
      "hash": "52f692d9425a663837caebc2d205e296c4bd0f1c"
    }
  },
  "@dualbox/dualbox-module-segment3-get-center": {
    "hash": "70aed59b673445b8703413d781b5a7e9e3e3ed1c",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3-get-center",
      "version": "1.0.61",
      "description": "Return the center of a segment.",
      "main": "segment3-get-center.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-segment3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "seg": {
            "type": "Segment3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "70aed59b673445b8703413d781b5a7e9e3e3ed1c"
    }
  },
  "@dualbox/dualbox-module-segment3-length": {
    "hash": "aa8e12740967b004c75eb970173ab43b7b5cba2e",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3-length",
      "version": "1.0.61",
      "description": "Give the length of a segment.",
      "main": "segment3-length.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-segment3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "seg": {
            "type": "Segment3",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "aa8e12740967b004c75eb970173ab43b7b5cba2e"
    }
  },
  "@dualbox/dualbox-module-segment3-projection-point": {
    "hash": "bc3aa506800de1b096a0fbcd315f01979180007c",
    "pkg": {
      "name": "@dualbox/dualbox-module-segment3-projection-point",
      "version": "1.0.61",
      "description": "Compute the projection of a point on the segment. This mean, the closest point of the segment to this point.",
      "main": "segment3-projection-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-segment3": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "seg": {
            "type": "Segment3",
            "const": true
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "bc3aa506800de1b096a0fbcd315f01979180007c"
    }
  },
  "@dualbox/dualbox-module-spheregeometry": {
    "hash": "caf528b5eda5a84c8faab8fb36e4cc963f65c7dc",
    "pkg": {
      "name": "@dualbox/dualbox-module-spheregeometry",
      "version": "1.0.61",
      "description": "Simple module to create a 3D sphere.",
      "main": "SphereGeometry.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-boolean": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radius": {
            "type": "Number",
            "value": 1
          },
          "widthSegments": {
            "type": "Number",
            "value": 8
          },
          "heightSegments": {
            "type": "Number",
            "value": 6
          },
          "phiStart": {
            "type": "Number",
            "value": 0
          },
          "phiLength": {
            "type": "Number",
            "value": 6.283185307179586
          },
          "thetaStart": {
            "type": "Number",
            "value": 0
          },
          "thetaLength": {
            "type": "Number",
            "value": 3.141592653589793
          },
          "normals": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex normals"
          },
          "uvs": {
            "type": "Boolean",
            "value": true,
            "desc": "True if the resulting geometry should include vertex texture coordinates. If false and parameter closed is null, then it will also affet the mesh which will be fully connected and closed."
          },
          "closed": {
            "type": "Boolean",
            "value": null,
            "desc": "Decides if the resulting mesh is closed. If true, all vertices will be connected to form a consistant shell. Note that uvs may be broken in this case. If false, the resulting geometry will be open on a line from the top to the bottom, which can be necessary for texture coordinates(uvs). If null, the geometry will be closed if uvs is false, and open if uvs is true."
          }
        },
        "output": {
          "result": {
            "type": "Geometry"
          }
        }
      },
      "hash": "caf528b5eda5a84c8faab8fb36e4cc963f65c7dc"
    }
  },
  "@dualbox/dualbox-module-spherical": {
    "hash": "97b36eb9e3a165496f97a9773ad44f47379887c3",
    "pkg": {
      "name": "@dualbox/dualbox-module-spherical",
      "version": "1.0.61",
      "description": "Build a Spherical from 3 coordinate values.",
      "main": "spherical.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "radius": {
            "type": "Number",
            "value": 0
          },
          "phi": {
            "type": "Number",
            "value": 0,
            "desc": "In 0,Math.PI."
          },
          "theta": {
            "type": "Number",
            "value": 0,
            "desc": "In 0,2*Math.PI."
          }
        },
        "output": {
          "s": {
            "type": "Spherical"
          }
        }
      },
      "hash": "97b36eb9e3a165496f97a9773ad44f47379887c3"
    }
  },
  "@dualbox/dualbox-module-spherical-decompose": {
    "hash": "c521a792353db190d58f92d2286ad35091a1e274",
    "pkg": {
      "name": "@dualbox/dualbox-module-spherical-decompose",
      "version": "1.0.61",
      "description": "decompose a spherical.",
      "main": "spherical-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-spherical": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "Spherical",
            "const": true
          }
        },
        "output": {
          "radius": {
            "type": "Number"
          },
          "phi": {
            "type": "Number"
          },
          "theta": {
            "type": "Number"
          }
        }
      },
      "hash": "c521a792353db190d58f92d2286ad35091a1e274"
    }
  },
  "@dualbox/dualbox-module-spherical-to-vector3": {
    "hash": "172122340814ce6fe1955501eab6953be1f5cfd5",
    "pkg": {
      "name": "@dualbox/dualbox-module-spherical-to-vector3",
      "version": "1.0.61",
      "description": "Build a Vector3 from a spherical coordinates object.",
      "main": "spherical-to-vector3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-spherical": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "s": {
            "type": "Spherical",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "172122340814ce6fe1955501eab6953be1f5cfd5"
    }
  },
  "@dualbox/dualbox-module-texture": {
    "hash": "5f43e72afc0cd77c5a88bf8679322782c1caa8c9",
    "pkg": {
      "name": "@dualbox/dualbox-module-texture",
      "version": "1.0.61",
      "description": "Simple module to create a Texture.",
      "main": "Texture.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-mapping": "^1.0.20",
        "@dualbox/dualbox-type-wrapping": "^1.0.20",
        "@dualbox/dualbox-type-texturefilter": "^1.0.20",
        "@dualbox/dualbox-type-pixelformat": "^1.0.20",
        "@dualbox/dualbox-type-pixeldatatype": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "url": {
            "type": "String",
            "desc": "The url of the image to set in this texture.",
            "const": true
          },
          "mapping": {
            "type": "Mapping",
            "desc": "How the image is applied to the object. An object type of UVMapping is the default, where the U,V coordinates are used to apply the map.",
            "const": true,
            "value": "UVMapping"
          },
          "wrapS": {
            "type": "Wrapping",
            "value": "ClampToEdgeWrapping",
            "const": true,
            "desc": "This defines how the texture is wrapped horizontally and corresponds to U in UV mapping. The default is ClampToEdgeWrapping, where the edge is clamped to the outer edge texels."
          },
          "wrapT": {
            "type": "Wrapping",
            "value": "ClampToEdgeWrapping",
            "const": true,
            "desc": "This defines how the texture is wrapped vertically and corresponds to V in UV mapping. The default is ClampToEdgeWrapping, where the edge is clamped to the outer edge texels."
          },
          "magFilter": {
            "type": "TextureFilter",
            "value": "LinearFilter",
            "const": true,
            "desc": "How the texture is sampled when a texel covers more than one pixel. The default is LinearFilter, which takes the four closest texels and bilinearly interpolates among them. The other option is NearestFilter, which uses the value of the closest texel."
          },
          "minFilter": {
            "type": "TextureFilter",
            "value": "LinearFilter",
            "const": true,
            "desc": "How the texture is sampled when a texel covers less than one pixel. The default is LinearMipMapLinearFilter, which uses mipmapping and a trilinear filter."
          },
          "anisotropy": {
            "type": "Number",
            "value": 1,
            "const": true,
            "desc": "The number of samples taken along the axis through the pixel that has the highest density of texels. By default, this value is 1. A higher value gives a less blurry result than a basic mipmap, at the cost of more texture samples being used. Use renderer.getMaxAnisotropy() to find the maximum valid anisotropy value for the GPU; this value is usually a power of 2."
          },
          "format": {
            "type": "PixelFormat",
            "value": "RGBAFormat",
            "const": true,
            "desc": "The default is RGBAFormat, although this module will automatically set this to RGBFormat for JPG images. "
          },
          "type": {
            "type": "PixelDataType",
            "value": "UnsignedByteType",
            "const": true,
            "desc": "This must correspond to the .format. The default is UnsignedByteType, which will be used for most texture formats."
          }
        },
        "output": {
          "texture": {
            "type": "Texture"
          }
        }
      },
      "hash": "5f43e72afc0cd77c5a88bf8679322782c1caa8c9"
    }
  },
  "@dualbox/dualbox-module-texture-cube": {
    "hash": "173239742346b05708fe52c436082afe36a7cf55",
    "pkg": {
      "name": "@dualbox/dualbox-module-texture-cube",
      "version": "1.0.61",
      "description": "Simple module to create a CubeTexture from 6 images.",
      "main": "texture-cube.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "up": {
            "type": "String",
            "desc": "Upper face URL",
            "const": true
          },
          "down": {
            "type": "String",
            "desc": "Lower face URL",
            "const": true
          },
          "front": {
            "type": "String",
            "desc": "front face URL",
            "const": true
          },
          "back": {
            "type": "String",
            "desc": "back face URL",
            "const": true
          },
          "right": {
            "type": "String",
            "desc": "right face URL",
            "const": true
          },
          "left": {
            "type": "String",
            "desc": "left face URL",
            "const": true
          }
        },
        "output": {
          "ct": {
            "type": "cubetexture"
          }
        }
      },
      "hash": "173239742346b05708fe52c436082afe36a7cf55"
    }
  },
  "@dualbox/dualbox-module-triangle": {
    "hash": "498315309f25d5274c702ea4c839b4c73904db76",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle",
      "version": "1.0.61",
      "description": "A geometric triangle",
      "main": "triangle.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          },
          "v3": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "triangle": {
            "type": "Triangle"
          }
        }
      },
      "hash": "498315309f25d5274c702ea4c839b4c73904db76"
    }
  },
  "@dualbox/dualbox-module-triangle-barycoord-from-point": {
    "hash": "7332a82745ab038f97caf60764d60ca7c59316ff",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-barycoord-from-point",
      "version": "1.0.61",
      "description": "Return a barycentric coordinate from the given vector",
      "main": "triangle-barycoord-from-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "7332a82745ab038f97caf60764d60ca7c59316ff"
    }
  },
  "@dualbox/dualbox-module-triangle-area": {
    "hash": "52a65de8637f878b3136d5a3eec6c96427ca8888",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-area",
      "version": "1.0.61",
      "description": "Return the area of the triangle",
      "main": "triangle-area.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "52a65de8637f878b3136d5a3eec6c96427ca8888"
    }
  },
  "@dualbox/dualbox-module-triangle-closest-point-to-point": {
    "hash": "818068ad92c4218782ba86d8ae76d10b20207cf9",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-closest-point-to-point",
      "version": "1.0.61",
      "description": "Returns the closest point on the triangle to point.",
      "main": "triangle-closest-point-to-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "818068ad92c4218782ba86d8ae76d10b20207cf9"
    }
  },
  "@dualbox/dualbox-module-triangle-contains-point": {
    "hash": "249f98eca24516882088a209488e0b452e8aeca4",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-contains-point",
      "version": "1.0.61",
      "description": "Returns true if the passed vector is within the triangle.",
      "main": "triangle-contains-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          },
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "b": {
            "type": "Boolean"
          }
        }
      },
      "hash": "249f98eca24516882088a209488e0b452e8aeca4"
    }
  },
  "@dualbox/dualbox-module-triangle-decompose": {
    "hash": "c2cd737e90e13a2c0d9e477760a58fbcef4c2741",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-decompose",
      "version": "1.0.61",
      "description": "Decompose a triangle into 3 vector3 values.",
      "main": "triangle-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          }
        },
        "output": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3"
          },
          "v3": {
            "type": "Vector3"
          }
        }
      },
      "hash": "c2cd737e90e13a2c0d9e477760a58fbcef4c2741"
    }
  },
  "@dualbox/dualbox-module-triangle-normal": {
    "hash": "43d6384c4e1e4e907934613010d30668a654effa",
    "pkg": {
      "name": "@dualbox/dualbox-module-triangle-normal",
      "version": "1.0.61",
      "description": "Calculate the normal vector of the triangle.",
      "main": "triangle-normal.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "triangle": {
            "type": "Triangle",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "43d6384c4e1e4e907934613010d30668a654effa"
    }
  },
  "@dualbox/dualbox-module-vector2": {
    "hash": "751b1310561ab3ad0c2d1830f25b07fd292577aa",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2",
      "version": "1.0.62",
      "description": "Build a Vector2 from 2 coordinate values.",
      "main": "vector2.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "value": 0
          },
          "y": {
            "type": "Number",
            "value": 0
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "751b1310561ab3ad0c2d1830f25b07fd292577aa"
    }
  },
  "@dualbox/dualbox-module-vector2-add": {
    "hash": "bd032cee279b82af14353ac9b00723320946bcdd",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-add",
      "version": "1.0.61",
      "description": "Add 2 vectors.",
      "main": "vector2-add.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2"
          },
          "v2": {
            "type": "Vector2"
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "bd032cee279b82af14353ac9b00723320946bcdd"
    }
  },
  "@dualbox/dualbox-module-vector2-addnumber": {
    "hash": "f4248bb505da026842e35dbc2eb5b9e9c3c3db4a",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-addnumber",
      "version": "1.0.61",
      "description": "Add all vector coordinates by the given scalar value.",
      "main": "vector2-addnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          },
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "f4248bb505da026842e35dbc2eb5b9e9c3c3db4a"
    }
  },
  "@dualbox/dualbox-module-vector2-angle": {
    "hash": "15b117ddfb575e625d3f0330719ec5b2eccdafcc",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-angle",
      "version": "1.0.61",
      "description": "Computes the angle in radians of this vector with respect to the positive x-axis.",
      "main": "vector2-angle.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2"
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "15b117ddfb575e625d3f0330719ec5b2eccdafcc"
    }
  },
  "@dualbox/dualbox-module-vector2-decompose": {
    "hash": "1da54654792518310d27bb2fc8df4ed59d3750f2",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-decompose",
      "version": "1.0.61",
      "description": "Decompose a Vector2 into 2 coordinate values.",
      "main": "vector2-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          }
        }
      },
      "hash": "1da54654792518310d27bb2fc8df4ed59d3750f2"
    }
  },
  "@dualbox/dualbox-module-vector2-distanceto": {
    "hash": "da1009f6072412e639842914903e5fb3f07d0464",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-distanceto",
      "version": "1.0.61",
      "description": "Computes the distance from this vector to another one.",
      "main": "vector2-distanceto.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2",
            "const": true
          },
          "v2": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "da1009f6072412e639842914903e5fb3f07d0464"
    }
  },
  "@dualbox/dualbox-module-vector2-divide": {
    "hash": "ebbcad18e1cdfe85edaf8e3bc2a81043af0b2d93",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-divide",
      "version": "1.0.61",
      "description": "Divide a vectors by another one.",
      "main": "vector2-divide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2"
          },
          "v2": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "ebbcad18e1cdfe85edaf8e3bc2a81043af0b2d93"
    }
  },
  "@dualbox/dualbox-module-vector2-dot": {
    "hash": "17818b0cbc89f59fae3a9069028644799f456b32",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-dot",
      "version": "1.0.61",
      "description": "Calculate the dot product of two vectors.",
      "main": "vector2-dot.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2",
            "const": true
          },
          "v2": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "17818b0cbc89f59fae3a9069028644799f456b32"
    }
  },
  "@dualbox/dualbox-module-vector2-dividenumber": {
    "hash": "1124408e00a0c3728c488c1d6defbd6fbaef80e4",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-dividenumber",
      "version": "1.0.61",
      "description": "Divide all vector coordinates by the given scalar value.",
      "main": "vector2-dividenumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "1124408e00a0c3728c488c1d6defbd6fbaef80e4"
    }
  },
  "@dualbox/dualbox-module-vector2-length": {
    "hash": "53d819e92b4ee882dbdb26f5cd3fb2a36c715eaa",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-length",
      "version": "1.0.61",
      "description": "Computes the length from (0, 0) to v",
      "main": "vector2-length.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "53d819e92b4ee882dbdb26f5cd3fb2a36c715eaa"
    }
  },
  "@dualbox/dualbox-module-vector2-multiply": {
    "hash": "46861895172de53d7c2151b5121318bf4900fe47",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-multiply",
      "version": "1.0.61",
      "description": "Multiply 2 vectors.",
      "main": "vector2-multiply.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2"
          },
          "v2": {
            "type": "Vector2"
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "46861895172de53d7c2151b5121318bf4900fe47"
    }
  },
  "@dualbox/dualbox-module-vector2-multiplynumber": {
    "hash": "39d16474ae84fe13fa53396d34cc443cc171246f",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-multiplynumber",
      "version": "1.0.61",
      "description": "Multiply a vectors by a number.",
      "main": "vector2-multiplynumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "39d16474ae84fe13fa53396d34cc443cc171246f"
    }
  },
  "@dualbox/dualbox-module-vector2-normalize": {
    "hash": "f5b67e79e3e4795ceeab4cdce951539bdb5aaa62",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-normalize",
      "version": "1.0.61",
      "description": "Normalize a vector.",
      "main": "vector2-normalize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2"
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "f5b67e79e3e4795ceeab4cdce951539bdb5aaa62"
    }
  },
  "@dualbox/dualbox-module-vector2-setx": {
    "hash": "dd29c3b708186b3d78ac3752de3d3ea501a550ab",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-setx",
      "version": "1.0.61",
      "description": "Replace the first components of a vector.",
      "main": "vector2-setx.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          },
          "x": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "dd29c3b708186b3d78ac3752de3d3ea501a550ab"
    }
  },
  "@dualbox/dualbox-module-vector2-sety": {
    "hash": "302cfaaf75747fd2e6d768232da2208de8a5d86b",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-sety",
      "version": "1.0.61",
      "description": "Replace the second components of a vector.",
      "main": "vector2-sety.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "302cfaaf75747fd2e6d768232da2208de8a5d86b"
    }
  },
  "@dualbox/dualbox-module-vector2-sub": {
    "hash": "82fe74030118b414af7e9d438de716641e57bb96",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-sub",
      "version": "1.0.61",
      "description": "Substraction of 2 vectors.",
      "main": "vector2-sub.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector2": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector2",
            "const": true
          },
          "v2": {
            "type": "Vector2",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "82fe74030118b414af7e9d438de716641e57bb96"
    }
  },
  "@dualbox/dualbox-module-vector2-subnumber": {
    "hash": "67f283f6a3917e32d7bc6c2970198c154ac88b5e",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector2-subnumber",
      "version": "1.0.61",
      "description": "Substraction of a vectors by a scalar.",
      "main": "vector2-subnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector2": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector2",
            "const": true
          },
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector2"
          }
        }
      },
      "hash": "67f283f6a3917e32d7bc6c2970198c154ac88b5e"
    }
  },
  "@dualbox/dualbox-module-vector3": {
    "hash": "0ff9304c035122fb42b52ff114e6a142487463cc",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3",
      "version": "1.0.61",
      "description": "Build a Vector3 from 3 coordinate values.",
      "main": "vector3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "value": 0
          },
          "y": {
            "type": "Number",
            "value": 0
          },
          "z": {
            "type": "Number",
            "value": 0
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "0ff9304c035122fb42b52ff114e6a142487463cc"
    }
  },
  "@dualbox/dualbox-module-vector3-add": {
    "hash": "c1d8bc90e61b236e146478876377d13c0d01f38b",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-add",
      "version": "1.0.61",
      "description": "Add 2 vectors.",
      "main": "vector3-add.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "c1d8bc90e61b236e146478876377d13c0d01f38b"
    }
  },
  "@dualbox/dualbox-module-vector3-addnumber": {
    "hash": "1c38650602a9839a8d5544496a307a578d04b68e",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-addnumber",
      "version": "1.0.61",
      "description": "Add all vector coordinates by the given scalar value.",
      "main": "vector3-addnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "1c38650602a9839a8d5544496a307a578d04b68e"
    }
  },
  "@dualbox/dualbox-module-vector3-applyeuler": {
    "hash": "6f5336b4ff63287a8d2e013908ac4aba64ed8d8d",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-applyeuler",
      "version": "1.0.61",
      "description": "Multiplies euler transform to a vector3.",
      "main": "vector3-applyeuler.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-euler": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "euler": {
            "type": "Euler",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "6f5336b4ff63287a8d2e013908ac4aba64ed8d8d"
    }
  },
  "@dualbox/dualbox-module-vector3-angle-to": {
    "hash": "3a30283061fce626806620ea360c165b611c84fc",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-angle-to",
      "version": "1.0.60",
      "description": "Compute the minimum absolute angle between 2 vectors, in radians.",
      "main": "vector3-angle-to.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "3a30283061fce626806620ea360c165b611c84fc"
    }
  },
  "@dualbox/dualbox-module-vector3-applymatrix3": {
    "hash": "abfecc73e2a7f0f9f331e3331916953eeaa6fe86",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-applymatrix3",
      "version": "1.0.61",
      "description": "Multiplies a vector3 by a matrix3.",
      "main": "vector3-applymatrix3.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-matrix3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "m": {
            "type": "Matrix3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "abfecc73e2a7f0f9f331e3331916953eeaa6fe86"
    }
  },
  "@dualbox/dualbox-module-vector3-applymatrix4": {
    "hash": "e02d98f0c58ed7928d761df4d76f0ff5f17ce7fe",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-applymatrix4",
      "version": "1.0.38",
      "description": "Multiplies a vector3 by a matrix4.",
      "main": "vector3-applymatrix4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "e02d98f0c58ed7928d761df4d76f0ff5f17ce7fe"
    }
  },
  "@dualbox/dualbox-module-vector3-cross": {
    "hash": "7a441b8e51a427764e4b8c0b4a7914db5eb21a92",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-cross",
      "version": "1.0.61",
      "description": "Crossproduct of 2 vectors",
      "main": "vector3-cross.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "7a441b8e51a427764e4b8c0b4a7914db5eb21a92"
    }
  },
  "@dualbox/dualbox-module-vector3-decompose": {
    "hash": "c18cd9e1e8343f36e8d69938dc13526df70078fb",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-decompose",
      "version": "1.0.61",
      "description": "Decompose a Vector3 into 3 coordinate values.",
      "main": "vector3-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          },
          "z": {
            "type": "Number"
          }
        }
      },
      "hash": "c18cd9e1e8343f36e8d69938dc13526df70078fb"
    }
  },
  "@dualbox/dualbox-module-vector3-distanceto": {
    "hash": "30e4e238317df6fda92f11d1f9641edff8d3cc78",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-distanceto",
      "version": "1.0.61",
      "description": "Computes the distance from a vector to another.",
      "main": "vector3-distanceto.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "30e4e238317df6fda92f11d1f9641edff8d3cc78"
    }
  },
  "@dualbox/dualbox-module-vector3-divide": {
    "hash": "a1839e193e06546fc4f70762a55b815367cebc14",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-divide",
      "version": "1.0.61",
      "description": "Divide 2 vectors.",
      "main": "vector3-divide.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "a1839e193e06546fc4f70762a55b815367cebc14"
    }
  },
  "@dualbox/dualbox-module-vector3-dividenumber": {
    "hash": "bc7c9d2a3eb2605462d4b70ce66f362e3cebcfdb",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-dividenumber",
      "version": "1.0.61",
      "description": "Divide all vector coordinates by the given scalar value.",
      "main": "vector3-dividenumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "bc7c9d2a3eb2605462d4b70ce66f362e3cebcfdb"
    }
  },
  "@dualbox/dualbox-module-vector3-dot": {
    "hash": "6d2ce75067d38d259ced9bb78072d24d3a4138e3",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-dot",
      "version": "1.0.61",
      "description": "Calculate the dot product of two vectors.",
      "main": "vector3-dot.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3",
            "const": true
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "6d2ce75067d38d259ced9bb78072d24d3a4138e3"
    }
  },
  "@dualbox/dualbox-module-vector3-from-json": {
    "hash": "d45bd37923a757f385a0fa1973a6f8169c33eccd",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-from-json",
      "version": "1.0.61",
      "description": "Build a Vector3 Object from a JSON description.",
      "main": "vector3-from-json.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "d45bd37923a757f385a0fa1973a6f8169c33eccd"
    }
  },
  "@dualbox/dualbox-module-vector3-length": {
    "hash": "7bcc08dd25d8dfbe71b7d5a7035059a34ff1b6d7",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-length",
      "version": "1.0.61",
      "description": "Computes the length of a vector.",
      "main": "vector3-length.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "7bcc08dd25d8dfbe71b7d5a7035059a34ff1b6d7"
    }
  },
  "@dualbox/dualbox-module-vector3-multiply": {
    "hash": "57f8a70ca641b3fa9bb7b337fb9870fbbce5b5d5",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-multiply",
      "version": "1.0.61",
      "description": "Multiply 2 vectors.",
      "main": "vector3-multiply.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "57f8a70ca641b3fa9bb7b337fb9870fbbce5b5d5"
    }
  },
  "@dualbox/dualbox-module-vector3-normalize": {
    "hash": "aaf65d63d821d0e86d28c6b650cba77825fa6bea",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-normalize",
      "version": "1.0.61",
      "description": "Convert this vector to a unit vector.",
      "main": "vector3-normalize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "aaf65d63d821d0e86d28c6b650cba77825fa6bea"
    }
  },
  "@dualbox/dualbox-module-vector3-multiplynumber": {
    "hash": "cc69da6b2af105a94a77936b5fb363ffcea094ff",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-multiplynumber",
      "version": "1.0.61",
      "description": "Multiply all vector coordinates by the given scalar value.",
      "main": "vector3-multiplynumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "cc69da6b2af105a94a77936b5fb363ffcea094ff"
    }
  },
  "@dualbox/dualbox-module-vector3-reflect": {
    "hash": "979064aa2c203451f300f33332d0a2c86ccdb6e9",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-reflect",
      "version": "1.0.61",
      "description": "Reflect the vector off of plane orthogonal to normal. Normal is assumed to have unit length.",
      "main": "vector3-reflect.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "979064aa2c203451f300f33332d0a2c86ccdb6e9"
    }
  },
  "@dualbox/dualbox-module-vector3-rotation": {
    "hash": "ab816672c8dd5230fd3ae2c646cc37fa59e662ca",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-rotation",
      "version": "1.0.61",
      "description": "Applies a rotation specified by an axis and an angle to this vector.",
      "main": "vector3-rotation.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3",
            "const": true
          },
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "ab816672c8dd5230fd3ae2c646cc37fa59e662ca"
    }
  },
  "@dualbox/dualbox-module-vector3-setfrommatrixcolumn": {
    "hash": "92a8dbff539981fffc42b7c43b4fb285a61883ab",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-setfrommatrixcolumn",
      "version": "1.0.61",
      "description": "Sets this vector's x, y and z equal to the column of the matrix specified by the index.",
      "main": "vector3-setfrommatrixcolumn.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-matrix3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "m": {
            "type": "Matrix3",
            "const": true
          },
          "i": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "92a8dbff539981fffc42b7c43b4fb285a61883ab"
    }
  },
  "@dualbox/dualbox-module-vector3-setx": {
    "hash": "511504de206e1be7f2b8fde2d7370566812ce101",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-setx",
      "version": "1.0.61",
      "description": "Replace this vector's x value with x.",
      "main": "vector3-setx.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "x": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "511504de206e1be7f2b8fde2d7370566812ce101"
    }
  },
  "@dualbox/dualbox-module-vector3-sety": {
    "hash": "c4aa0a1226b46b9e556aca2b36d0c763e403d2a5",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-sety",
      "version": "1.0.61",
      "description": "Replace this vector's y value with y.",
      "main": "vector3-sety.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "c4aa0a1226b46b9e556aca2b36d0c763e403d2a5"
    }
  },
  "@dualbox/dualbox-module-vector3-setz": {
    "hash": "2074da6097bbb131b657c6b7930e8fc0cb7c10f0",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-setz",
      "version": "1.0.61",
      "description": "Replace this vector's z value with z.",
      "main": "vector3-setz.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "2074da6097bbb131b657c6b7930e8fc0cb7c10f0"
    }
  },
  "@dualbox/dualbox-module-vector3-sub": {
    "hash": "57660785a7c1d009ad152608f77e7653f83b9023",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-sub",
      "version": "1.0.61",
      "description": "Substract 2 vectors v1 - v2.",
      "main": "vector3-sub.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector3"
          },
          "v2": {
            "type": "Vector3"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "57660785a7c1d009ad152608f77e7653f83b9023"
    }
  },
  "@dualbox/dualbox-module-vector3-subnumber": {
    "hash": "df6014c9aac094e7ac47aaf592cee68150179af8",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-subnumber",
      "version": "1.0.61",
      "description": "Sub all vector coordinates by the given scalar value.",
      "main": "vector3-subnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "df6014c9aac094e7ac47aaf592cee68150179af8"
    }
  },
  "@dualbox/dualbox-module-vector3-to-cylindrical": {
    "hash": "c2cf33a55802e3c62d7ffb2e738a6d8991b5ff0b",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-to-cylindrical",
      "version": "1.0.61",
      "description": "Build a cylindrical coordinates from a Vector3 object.",
      "main": "vector3-to-cylindrical.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "cyl": {
            "type": "Cylindrical"
          }
        }
      },
      "hash": "c2cf33a55802e3c62d7ffb2e738a6d8991b5ff0b"
    }
  },
  "@dualbox/dualbox-module-vector3-to-spherical": {
    "hash": "d3dde7a8b043f2474a1e24aafacdf770805966f7",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-to-spherical",
      "version": "1.0.61",
      "description": "Build a spherical coordinates from a Vector3 object.",
      "main": "vector3-to-spherical.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "s": {
            "type": "Spherical"
          }
        }
      },
      "hash": "d3dde7a8b043f2474a1e24aafacdf770805966f7"
    }
  },
  "@dualbox/dualbox-module-vector3-tojson": {
    "hash": "a9b809346a52a598daab95f9033e9f2d10e1cde0",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-tojson",
      "version": "1.0.61",
      "description": "Compute the union between two given box2.",
      "main": "vector3-tojson.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-json": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3",
            "const": true
          }
        },
        "output": {
          "json": {
            "type": "json"
          }
        }
      },
      "hash": "a9b809346a52a598daab95f9033e9f2d10e1cde0"
    }
  },
  "@dualbox/dualbox-module-vector3-transformdirection": {
    "hash": "7bb9d3c6d6e404004b0a98fde497cfd03de62837",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-transformdirection",
      "version": "1.0.61",
      "description": "Transforms the direction of this vector by a matrix and then normalizes the result.",
      "main": "vector3-transformdirection.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector3"
          },
          "m": {
            "type": "Matrix4",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "7bb9d3c6d6e404004b0a98fde497cfd03de62837"
    }
  },
  "@dualbox/dualbox-module-vector4": {
    "hash": "b51a5cbc7a023b659f224a2916d265f1472e25cc",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4",
      "version": "1.0.61",
      "description": "Build a Vector4 from 4 coordinate values.",
      "main": "vector4.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "x": {
            "type": "Number",
            "value": 0
          },
          "y": {
            "type": "Number",
            "value": 0
          },
          "z": {
            "type": "Number",
            "value": 0
          },
          "w": {
            "type": "Number",
            "value": 1
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "b51a5cbc7a023b659f224a2916d265f1472e25cc"
    }
  },
  "@dualbox/dualbox-module-vector4-add": {
    "hash": "9bb34eaa65e944a887aa0e1de5d3ab92d989d4bf",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-add",
      "version": "1.0.61",
      "description": "Add 2 vectors.",
      "main": "vector4-add.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector4",
            "const": true
          },
          "v2": {
            "type": "Vector4",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "9bb34eaa65e944a887aa0e1de5d3ab92d989d4bf"
    }
  },
  "@dualbox/dualbox-module-vector4-addnumber": {
    "hash": "099a76d6d73afda72ec18f0ca47be9a3a859d66c",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-addnumber",
      "version": "1.0.61",
      "description": "Add all vector coordinates by the given scalar value.",
      "main": "vector4-addnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "099a76d6d73afda72ec18f0ca47be9a3a859d66c"
    }
  },
  "@dualbox/dualbox-module-vector4-decompose": {
    "hash": "44cfb88f6fc0496d57ef62939520acb2563d0653",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-decompose",
      "version": "1.0.61",
      "description": "Decompose a Vector3 into 4 coordinate values.",
      "main": "vector4-decompose.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4",
            "const": true
          }
        },
        "output": {
          "x": {
            "type": "Number"
          },
          "y": {
            "type": "Number"
          },
          "z": {
            "type": "Number"
          },
          "w": {
            "type": "Number"
          }
        }
      },
      "hash": "44cfb88f6fc0496d57ef62939520acb2563d0653"
    }
  },
  "@dualbox/dualbox-module-vector4-dividenumber": {
    "hash": "7bd3d014e91989192d199ee77cd5cec6d4b6f59e",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-dividenumber",
      "version": "1.0.61",
      "description": "Divide all vector coordinates by the given scalar value.",
      "main": "vector4-dividenumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "7bd3d014e91989192d199ee77cd5cec6d4b6f59e"
    }
  },
  "@dualbox/dualbox-module-vector4-dot": {
    "hash": "c4292c1e0a43cb65964e3d7b59792adc69ca4c32",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-dot",
      "version": "1.0.61",
      "description": "Calculate the dot product of two vectors.",
      "main": "vector4-dot.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector4",
            "const": true
          },
          "v2": {
            "type": "Vector4",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "c4292c1e0a43cb65964e3d7b59792adc69ca4c32"
    }
  },
  "@dualbox/dualbox-module-tj-double-textring-completion": {
    "hash": "7a5f759f02aab6863e0ee5875ddf1252bcae80dc",
    "pkg": {
      "name": "@dualbox/dualbox-module-tj-double-textring-completion",
      "version": "1.0.60",
      "description": "Build the link between the start and end points of a textring geometry.",
      "main": "tj-double-textring-completion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g1": {
            "type": "Geometry",
            "desc": "Supposed to be the geometry of all the letters of the first word, centered at origin, to be rolled and linked. Must be set along x, and will be rolled around y."
          },
          "gems1": {
            "type": "Array<Geometry>",
            "desc": "Supposed to be the geometry of all the gems of the first word, centered at origin, to be rolled and linked. Must be set along x, and will be rolled around y."
          },
          "multigems1": {
            "type": "Array<Array<Geometry>>",
            "desc": "Set of gems for multicolor option on gems."
          },
          "start1": {
            "type": "Vector3"
          },
          "end1": {
            "type": "Vector3"
          },
          "ring_start1": {
            "type": "Vector3"
          },
          "ring_end1": {
            "type": "Vector3"
          },
          "g2": {
            "type": "Geometry",
            "desc": "Supposed to be the geometry of all the letters of the second word. Must be set along x, and will be rolled around y."
          },
          "gems2": {
            "type": "Array<Geometry>",
            "desc": "Supposed to be the geometry of all the gems of the second word. Must be set along x, and will be rolled around y."
          },
          "multigems2": {
            "type": "Array<Array<Geometry>>",
            "desc": "Set of gems for multicolor option on gems."
          },
          "ring_start2": {
            "type": "Vector3"
          },
          "start2": {
            "type": "Vector3"
          },
          "ring_end2": {
            "type": "Vector3"
          },
          "end2": {
            "type": "Vector3"
          },
          "radius": {
            "type": "Number",
            "desc": "The size of the expected ring",
            "value": 8.5
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          },
          "gems": {
            "type": "Array<Geometry>"
          },
          "multigems": {
            "type": "Array<Array<Geometry>>"
          }
        },
        "object": "Module"
      },
      "hash": "7a5f759f02aab6863e0ee5875ddf1252bcae80dc"
    }
  },
  "@dualbox/dualbox-module-tj-textring-completion": {
    "hash": "236b902fbd3893bfaf409f17cdd3756e6da0f828",
    "pkg": {
      "name": "@dualbox/dualbox-module-tj-textring-completion",
      "version": "1.0.60",
      "description": "Build the link between the start and end points of a textring geometry.",
      "main": "tj-textring-completion.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "desc": "Supposed to be the geometry of all the letters, centered at origin, to be rolled and linked. Must be set along x, and will be rolled around y."
          },
          "start": {
            "type": "Vector3"
          },
          "end": {
            "type": "Vector3"
          },
          "radius": {
            "type": "Number",
            "desc": "The radius of the expected ring",
            "value": 8.5
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "236b902fbd3893bfaf409f17cdd3756e6da0f828"
    }
  },
  "@dualbox/dualbox-module-vector4-length": {
    "hash": "9e6ce4f9f43beb9abbe73d3e1d121a7b64733acb",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-length",
      "version": "1.0.61",
      "description": "Computes the length of a vector.",
      "main": "vector4-length.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "9e6ce4f9f43beb9abbe73d3e1d121a7b64733acb"
    }
  },
  "@dualbox/dualbox-module-darboux-surface": {
    "hash": "0a7e39e88f857cf4adebd45aa8e57e9e3e9417c1",
    "pkg": {
      "name": "@dualbox/dualbox-module-darboux-surface",
      "version": "1.0.58",
      "description": "Build a Darboux surface from a 3D line and a set of transformation.",
      "main": "darboux-surface.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "lg": {
            "type": "LineGeometry",
            "const": true,
            "desc": "The line to transform, it is the Darboux generator."
          },
          "m": {
            "type": "Array<Matrix4>",
            "const": true,
            "desc": "The set of transformations making the discrete surface"
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The darboux surface"
          },
          "gen": {
            "type": "LineGeometry",
            "desc": "The generator for the surface as line geometry."
          }
        },
        "object": "Module"
      },
      "hash": "0a7e39e88f857cf4adebd45aa8e57e9e3e9417c1"
    }
  },
  "@dualbox/dualbox-module-vector4-multiplynumber": {
    "hash": "3e049b6ae60155c8bd1577efc7dad0c5568ca07f",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-multiplynumber",
      "version": "1.0.61",
      "description": "Multiply all vector coordinates by the given scalar value.",
      "main": "vector4-multiplynumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "3e049b6ae60155c8bd1577efc7dad0c5568ca07f"
    }
  },
  "@dualbox/dualbox-module-vector4-normalize": {
    "hash": "63b895c7a20c3ae9a2cc458f46693d76c779a757",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-normalize",
      "version": "1.0.61",
      "description": "Convert this vector to a unit vector.",
      "main": "vector4-normalize.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "63b895c7a20c3ae9a2cc458f46693d76c779a757"
    }
  },
  "@dualbox/dualbox-module-scientifeet-adjust-arch": {
    "hash": "cc111eb6a57eef7087f2a708712d2d05169da46e",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-adjust-arch",
      "version": "1.0.68",
      "description": "Adjust the arch height.",
      "main": "adjust-arch.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-array": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "insole": {
            "type": "Geometry",
            "const": true,
            "desc": "The insole mesh to adjust."
          },
          "arch": {
            "type": "Geometry",
            "const": true,
            "desc": "The arch adjustment reference mesh, positionned and scaled accoding to the insole mesh."
          },
          "height": {
            "type": "Number",
            "const": true,
            "desc": "The adjustment to the arch height."
          },
          "border": {
            "type": "Array<Number>",
            "desc": "DEPRECATED USELESS // Indices of the border vertices in the original insole 2D pattern. Important note : this modulerelies on the fact that those indices did not change in the insole building process. If they did, this module won't work.",
            "const": true
          },
          "maxHeight": {
            "type": "Number",
            "desc": "The maximum height authorized for the insole arch. Default to 23mm.",
            "value": 23,
            "const": true
          }
        },
        "output": {
          "insole": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "cc111eb6a57eef7087f2a708712d2d05169da46e"
    }
  },
  "@dualbox/dualbox-module-vector4-setw": {
    "hash": "90b36e481a41bed75b374bdca5e62398e9c59cd2",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-setw",
      "version": "1.0.61",
      "description": "Replace this vector's w value with w.",
      "main": "vector4-setw.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "w": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "90b36e481a41bed75b374bdca5e62398e9c59cd2"
    }
  },
  "@dualbox/dualbox-module-scientifeet-analyze-ref-points": {
    "hash": "b8e1bb386d722d814d2a2b71e1755bc8ef14ea59",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-analyze-ref-points",
      "version": "1.0.68",
      "description": "This module will analyze 3 points positionned on a mesh to determine which one is heel, meta1 and meta5.",
      "main": "AnalyzeRefPoints.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footG": {
            "type": "Geometry",
            "const": true,
            "desc": "The scanned foot geometry."
          },
          "footSide": {
            "type": "String",
            "const": true,
            "desc": "Either left or Right."
          },
          "points": {
            "type": "Array<Vector3>",
            "desc": "The reference points to sort.",
            "const": true
          }
        },
        "output": {
          "heel": {
            "type": "Vector3"
          },
          "meta1": {
            "type": "Vector3"
          },
          "meta5": {
            "type": "Vector3"
          },
          "up": {
            "type": "Vector3"
          }
        },
        "object": "Module"
      },
      "hash": "b8e1bb386d722d814d2a2b71e1755bc8ef14ea59"
    }
  },
  "@dualbox/dualbox-module-vector4-setx": {
    "hash": "34fd03deec28f9ca80d0329f5fe158a747bde353",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-setx",
      "version": "1.0.61",
      "description": "Replace this vector's x value with x.",
      "main": "vector4-setx.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "x": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "34fd03deec28f9ca80d0329f5fe158a747bde353"
    }
  },
  "@dualbox/dualbox-module-scientifeet-antero": {
    "hash": "ac7c8f6a015b993633927bab04cd427906e1e9d4",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-antero",
      "version": "1.0.68",
      "description": "Given 3 bezier path, and 5 position parameters, build the closed 2D shape defining the antero design.",
      "main": "scientifeet-antero.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "bezierHeads": {
            "type": "BezierPath",
            "desc": "Bezier path along the heads line, in the foot front."
          },
          "bezierUp": {
            "type": "Array<BezierPath>"
          },
          "bezierDown": {
            "type": "Array<BezierPath>"
          },
          "pos1": {
            "type": "Number",
            "desc": "Position of the first antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos2": {
            "type": "Number",
            "desc": "Position of the second antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos3": {
            "type": "Number",
            "desc": "Position of the third antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos4": {
            "type": "Number",
            "desc": "Position of the fourth antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos5": {
            "type": "Number",
            "desc": "Position of the fifth antero element (in % with respect to the up and down positions).",
            "value": 1
          }
        },
        "output": {
          "bezier": {
            "type": "BezierPath",
            "desc": "A closed bezier path in place XY, ready to be triangulated."
          },
          "bbox": {
            "type": "Box3",
            "desc": "Bounding box of the maximum size of the element (ie all parameters at 100%). This can be useful for some estimation, or visualization setup."
          }
        },
        "object": "Module"
      },
      "hash": "ac7c8f6a015b993633927bab04cd427906e1e9d4"
    }
  },
  "@dualbox/dualbox-module-vector4-sety": {
    "hash": "7e9d78f86326aae61fec58c96858ada99a8bedeb",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-sety",
      "version": "1.0.61",
      "description": "Replace this vector's y value with y.",
      "main": "vector4-sety.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "y": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "7e9d78f86326aae61fec58c96858ada99a8bedeb"
    }
  },
  "@dualbox/dualbox-module-vector4-sub": {
    "hash": "0abb739665fc1da47613d6b2f9023fa1357699c3",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-sub",
      "version": "1.0.61",
      "description": "Substract 2 vectors v1 - v2.",
      "main": "vector4-sub.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-vector4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v1": {
            "type": "Vector4"
          },
          "v2": {
            "type": "Vector4"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "0abb739665fc1da47613d6b2f9023fa1357699c3"
    }
  },
  "@dualbox/dualbox-module-vector4-setz": {
    "hash": "5010ec776143b91b68da1793317e6e2ce206affd",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-setz",
      "version": "1.0.61",
      "description": "Replace this vector's z value with z.",
      "main": "vector4-setz.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "z": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "5010ec776143b91b68da1793317e6e2ce206affd"
    }
  },
  "@dualbox/dualbox-module-vector4-subnumber": {
    "hash": "45c807c20f4d7158445bb9f896bfe8362d755e1e",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector4-subnumber",
      "version": "1.0.61",
      "description": "Sub all vector coordinates by the given scalar value.",
      "main": "vector4-subnumber.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector4": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "v": {
            "type": "Vector4"
          },
          "t": {
            "type": "Number"
          }
        },
        "output": {
          "v": {
            "type": "Vector4"
          }
        }
      },
      "hash": "45c807c20f4d7158445bb9f896bfe8362d755e1e"
    }
  },
  "@dualbox/dualbox-module-scientifeet-build-antero-geometry": {
    "hash": "9f6e7ecede09524d20f30b237b44621b2fb6ad18",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-build-antero-geometry",
      "version": "1.0.68",
      "description": "Given 3 bezier path, and 5 position parameters, build the closed 2D shape defining the antero design.",
      "main": "scientifeet-antero.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-bezierpath": "^1.0.20",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "heads": {
            "type": "BezierPath",
            "desc": "Bezier path along the heads line, in the foot front.",
            "const": false
          },
          "up": {
            "type": "Array<BezierPath>",
            "const": false
          },
          "down": {
            "type": "Array<BezierPath>",
            "const": false
          },
          "pos1": {
            "type": "Number",
            "desc": "Position of the first antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos2": {
            "type": "Number",
            "desc": "Position of the second antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos3": {
            "type": "Number",
            "desc": "Position of the third antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos4": {
            "type": "Number",
            "desc": "Position of the fourth antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "pos5": {
            "type": "Number",
            "desc": "Position of the fifth antero element (in % with respect to the up and down positions).",
            "value": 1
          },
          "borderRes": {
            "type": "Number",
            "desc": "Minimal detail captured on the border, in mm",
            "value": 2
          },
          "insideRes": {
            "type": "Number",
            "desc": "Minimal detail captured inside the shape, in mm",
            "value": 4
          },
          "soleFrontThick": {
            "type": "Number",
            "const": true,
            "desc": "Thickness in front of the insole. Only used if anteroThick is not null.",
            "value": null
          },
          "anteroThick": {
            "type": "Number",
            "const": true,
            "desc": "Thickness of the antero. This will add attribute extrudeDist to the resulting geometry indicating how much the 2D geometry must be extruded to match the required thickness.",
            "value": null
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "A closed 2D evenly triangulated shape."
          }
        },
        "object": "Module"
      },
      "hash": "9f6e7ecede09524d20f30b237b44621b2fb6ad18"
    }
  },
  "@dualbox/dualbox-module-scientifeet-build-complete-insole": {
    "hash": "27792a29665d146ca279a6a2dcb2d053f1e1a65e",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-build-complete-insole",
      "version": "1.0.72",
      "description": "Given JSON pattern data, this module will extract all static elements necessary for insole generation.",
      "main": "./build-complete-insole.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-imagedata": "^1.0.17",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-matrix4": "^1.0.20",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "pattern": {
            "type": "Geometry",
            "const": true,
            "desc": "The pattern to generate the sole from. Holes must already be resized according to rigidities."
          },
          "patZones": {
            "type": "Map<String,Geometry>",
            "const": true
          },
          "recessHole": {
            "type": "Array<Number>",
            "value": null,
            "const": true
          },
          "txtzones": {
            "type": "Map<String,Geometry>",
            "const": true
          },
          "patContour": {
            "type": "LineGeometry"
          },
          "patContourCover": {
            "type": "Geometry",
            "const": true
          },
          "soleRefPts": {
            "type": "Map<String,Vector3>",
            "const": true
          },
          "antero": {
            "type": "Geometry",
            "value": null,
            "const": true,
            "desc": "The 2D pattern for antero geometry. If this geometry defines extrudeDist attribute, it will be used to determine the antero thickness."
          },
          "thickness": {
            "type": "Number",
            "const": true,
            "desc": "The sole thickness in main parts"
          },
          "frontThickness": {
            "type": "Number",
            "const": true,
            "value": 1,
            "desc": "The sole thickness in front of the insole, including antero elements."
          },
          "footscan": {
            "type": "Geometry",
            "const": false
          },
          "footsize": {
            "type": "Number"
          },
          "footwidth": {
            "type": "String"
          },
          "footside": {
            "type": "String"
          },
          "footRefPts": {
            "type": "Map<String,Vector3>",
            "const": true
          },
          "productionId": {
            "type": "String",
            "value": "PRODUCTION/ID",
            "const": true
          },
          "prodIdImgData": {
            "type": "ImageData",
            "value": null,
            "const": true,
            "desc": "The image corresponding to the production ID. Must be built externaly."
          },
          "flatheel": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry used to compute the ratio of height at each point in order to adjsut the sole when a flatheel is wanted. set to null if no flat heel is wanted."
          },
          "element": {
            "type": "Geometry",
            "value": null,
            "const": true
          },
          "coverframe": {
            "type": "json",
            "value": null,
            "const": true,
            "desc": "2D image data to position the tubes used to stick the cover on the insole."
          },
          "matrix": {
            "type": "Matrix4",
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "const": true,
            "desc": "Matrix to adjust the position on the insole with respect to the foot."
          },
          "initials": {
            "type": "String",
            "value": "XX",
            "const": true,
            "desc": "The patient initials to be engraved on the sole heel"
          },
          "initialsImgData": {
            "type": "ImageData",
            "value": null,
            "const": true,
            "desc": "The image corresponding to the initials to engrave. Must be built externaly."
          }
        },
        "output": {
          "insole": {
            "type": "Geometry"
          },
          "border": {
            "type": "Geometry",
            "desc": "The border represented as a 3Dtube. Thickness is 1.4mm."
          },
          "heelHeight": {
            "type": "Number",
            "desc": "Height of border points surounding the heel"
          },
          "archextHeight": {
            "type": "Number",
            "desc": "Height of border points surounding the external arch."
          },
          "hmap": {
            "type": "HeightMap",
            "desc": "The height map built from the footscan."
          }
        },
        "object": "Module"
      },
      "hash": "27792a29665d146ca279a6a2dcb2d053f1e1a65e"
    }
  },
  "@dualbox/dualbox-module-scientifeet-build-complete-insole-tests": {
    "hash": "903eecb97de6949a1f1a94f52fe1b2edb62997da",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-build-complete-insole-tests",
      "version": "1.0.69",
      "description": "Given JSON pattern data, this module will extract all static elements necessary for insole generation.",
      "main": "./build-complete-insole-tests.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-linegeometry": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-matrix4": "^1.0.20",
        "@dualbox/dualbox-type-boolean": "^1.0.13",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "pattern": {
            "type": "Geometry",
            "const": true,
            "desc": "The pattern to generate the sole from. Holes must already be resized according to rigidities."
          },
          "patZones": {
            "type": "Map<String,Geometry>",
            "const": true
          },
          "txtzones": {
            "type": "Map<String,Geometry>",
            "const": true
          },
          "patContour": {
            "type": "LineGeometry"
          },
          "patContourCover": {
            "type": "Geometry",
            "const": true
          },
          "soleRefPts": {
            "type": "Map<String,Vector3>",
            "const": true
          },
          "antero": {
            "type": "Geometry",
            "value": null,
            "const": true,
            "desc": "The 2D pattern for antero geometry. If this geometry defines extrudeDist attribute, it will be used to determine the antero thickness."
          },
          "thickness": {
            "type": "Number",
            "const": true,
            "desc": "The sole thickness in main parts"
          },
          "frontThickness": {
            "type": "Number",
            "const": true,
            "value": 1,
            "desc": "The sole thickness in front of the insole, including antero elements."
          },
          "footscan": {
            "type": "Geometry",
            "const": false
          },
          "footsize": {
            "type": "Number"
          },
          "footwidth": {
            "type": "String"
          },
          "footside": {
            "type": "String"
          },
          "footRefPts": {
            "type": "Map<String,Vector3>",
            "const": true
          },
          "productionId": {
            "type": "String",
            "value": "PRODUCTION/ID",
            "const": true
          },
          "flatheel": {
            "type": "Geometry",
            "const": true,
            "desc": "The geometry used to compute the ratio of height at each point in order to adjsut the sole when a flatheel is wanted. set to null if no flat heel is wanted."
          },
          "element": {
            "type": "Geometry",
            "value": null,
            "const": true
          },
          "coverframe": {
            "type": "json",
            "value": null,
            "const": true,
            "desc": "2D image data to position the tubes used to stick the cover on the insole."
          },
          "matrix": {
            "type": "Matrix4",
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "const": true,
            "desc": "Matrix to adjust the position on the insole with respect to the foot."
          },
          "initials": {
            "type": "String",
            "value": "XX",
            "const": true,
            "desc": "The patient initials to be engraved on the sole heel"
          },
          "gravBold": {
            "type": "Boolean",
            "value": false,
            "const": true
          },
          "gravLetterDepth": {
            "type": "Number",
            "value": 0.5,
            "const": true
          }
        },
        "output": {
          "insole": {
            "type": "Geometry"
          },
          "border": {
            "type": "Geometry",
            "desc": "The border represented as a 3Dtube. Thickness is 1.4mm."
          }
        },
        "object": "Module"
      },
      "hash": "903eecb97de6949a1f1a94f52fe1b2edb62997da"
    }
  },
  "@dualbox/dualbox-module-scientifeet-build-rotation-widget": {
    "hash": "d7c46462766aaa6a32caef1e2bdbc64cfa96c43c",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-build-rotation-widget",
      "version": "1.0.68",
      "description": "Given the 3 reference points of the insole, build the little rotation widget.",
      "main": "scientifeet-rot-widget.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "refPoints": {
            "type": "Map<String,Vector3>"
          }
        },
        "output": {
          "g": {
            "type": "Geometry",
            "desc": "The shape for the widget."
          }
        },
        "object": "Module"
      },
      "hash": "d7c46462766aaa6a32caef1e2bdbc64cfa96c43c"
    }
  },
  "@dualbox/dualbox-module-scientifeet-build-stability-element": {
    "hash": "c5cdb934a8aad4d94b22d8a8ee0d8b5ca68a669d",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-build-stability-element",
      "version": "1.0.68",
      "description": "Given JSON pattern data, this module will extract all static elements necessary for insole generation.",
      "main": "./build-stability-element.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-matrix4": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "stabPattern": {
            "type": "Geometry",
            "const": true,
            "desc": "The 2D pattern from which the stabiliser will be extruded."
          },
          "angle": {
            "type": "Number",
            "const": true,
            "desc": "Angle of the stabiliser, in degree."
          },
          "thickness": {
            "type": "Number",
            "const": true,
            "desc": "The sole thickness in main parts"
          },
          "footscan": {
            "type": "Geometry",
            "const": false
          },
          "footsize": {
            "type": "Number"
          },
          "footwidth": {
            "type": "String"
          },
          "footside": {
            "type": "String"
          },
          "adMat": {
            "type": "Matrix4",
            "const": true,
            "value": [
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              1
            ],
            "desc": "Adjustment matrix."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "c5cdb934a8aad4d94b22d8a8ee0d8b5ca68a669d"
    }
  },
  "@dualbox/dualbox-module-scientifeet-data-from-pattern": {
    "hash": "53f0dae816c3f63edabe5d184d454a06c617f89c",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-data-from-pattern",
      "version": "1.0.69",
      "description": "Given JSON pattern data, this module will extract all static elements necessary for insole generation.",
      "main": "./data-from-pattern.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "json": {
            "type": "json",
            "const": true,
            "desc": "The data base JSON containing all pattern informations."
          },
          "side": {
            "type": "String",
            "const": true,
            "desc": "Side of the foot (left or right)."
          }
        },
        "output": {
          "holes": {
            "type": "json"
          },
          "recessHole": {
            "type": "Array<Number>",
            "desc": "The vertices index list forming a polyline along the edge of the recess in the insole pattern."
          },
          "contour": {
            "type": "LineGeometry"
          },
          "zones": {
            "type": "Map<String,Geometry>"
          },
          "txtzones": {
            "type": "Map<String,Geometry>"
          },
          "contourCover": {
            "type": "Geometry"
          },
          "pattern": {
            "type": "Geometry"
          },
          "refPoints": {
            "type": "Map<String,Vector3>"
          },
          "oMatrix": {
            "type": "Matrix4",
            "desc": "The orientation Matrix used to move the data in the normalized position (heel at 0,0,0; sole directed in x)"
          }
        },
        "object": "Module"
      },
      "hash": "53f0dae816c3f63edabe5d184d454a06c617f89c"
    }
  },
  "@dualbox/dualbox-module-scientifeet-get-gabarit-scale": {
    "hash": "909759d2dd281950232b51cdb4b989d40545d16d",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-get-gabarit-scale",
      "version": "1.0.68",
      "description": "Get the gabarit scale, ie the database scale applied to get the pattern at the wanted size.",
      "main": "./get-gabarit-scale.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-string": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footsize": {
            "type": "Number",
            "const": true
          },
          "footwidth": {
            "type": "String",
            "const": true
          }
        },
        "output": {
          "scale": {
            "type": "Vector3"
          }
        },
        "object": "Module"
      },
      "hash": "909759d2dd281950232b51cdb4b989d40545d16d"
    }
  },
  "@dualbox/dualbox-module-scientifeet-guess-z-orientation": {
    "hash": "5f4ef854c373d729671ea344d860d2a2064a76f2",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-guess-z-orientation",
      "version": "1.0.68",
      "description": "Try to guess the Z orientation of the given foot geometry and reorient it as good s possible.",
      "main": "./GuessZOrientation.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footG": {
            "type": "Geometry",
            "const": true,
            "desc": "The scanned foot geometry."
          }
        },
        "output": {
          "g": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "5f4ef854c373d729671ea344d860d2a2064a76f2"
    }
  },
  "@dualbox/dualbox-module-scientifeet-material-plane-gradient": {
    "hash": "a3218f2196665f006acb57f2d89beb47f585f800",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-material-plane-gradient",
      "version": "1.0.61",
      "description": "Shading material to set a color gradient depending on the distance to a plane.",
      "main": "MaterialPlaneGradient.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20",
        "@dualbox/dualbox-type-number": "^1.0.12",
        "@dualbox/dualbox-type-side": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "planeO": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 0
            },
            "const": true,
            "desc": "Origin point of the plane (a point on the plane)"
          },
          "planeDir": {
            "type": "Vector3",
            "value": {
              "x": 0,
              "y": 0,
              "z": 1
            },
            "desc": "Plane normal.",
            "const": true
          },
          "side": {
            "type": "Side",
            "value": "DoubleSide",
            "desc": "Decide to draw front facing faces or backfacing faces. Default to Doublefaces.",
            "const": true
          },
          "transparency": {
            "type": "Number",
            "value": 0,
            "desc": "Transparency value in 0 1. 0 meaning complete opacity.",
            "const": true
          }
        },
        "output": {
          "mat": {
            "type": "Material"
          }
        },
        "object": "Module"
      },
      "hash": "a3218f2196665f006acb57f2d89beb47f585f800"
    }
  },
  "@dualbox/dualbox-module-scientifeet-reorient-scan": {
    "hash": "1a1f84dcc41569007b72a9de576045f31919173d",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-reorient-scan",
      "version": "1.0.68",
      "description": "Given 3 points, this module will reorient the foot scan to have it oriented along X axis, with Z positive in upward direction. The 3 points are also reoriented.",
      "main": "./ReorientScan.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-array": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footG": {
            "type": "Geometry",
            "const": true,
            "desc": "The scanned foot geometry."
          },
          "footSide": {
            "type": "String",
            "const": true,
            "desc": "Either left or Right."
          },
          "points": {
            "type": "Array<Vector3>",
            "desc": "The reference points to sort.",
            "const": true
          }
        },
        "output": {
          "heel": {
            "type": "Vector3"
          },
          "meta1": {
            "type": "Vector3"
          },
          "meta5": {
            "type": "Vector3"
          },
          "g": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "1a1f84dcc41569007b72a9de576045f31919173d"
    }
  },
  "@dualbox/dualbox-module-scientifeet-resize-pattern-holes": {
    "hash": "059516e1e083a0146d6cb43967800f63ecb58163",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-resize-pattern-holes",
      "version": "1.0.68",
      "description": "Resize the pattern holes according to rigidities set for each zone.",
      "main": "./resize-pattern-holes.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "pattern": {
            "type": "Geometry",
            "const": false,
            "desc": "The 2D pattern for the insole."
          },
          "rigidities": {
            "type": "json",
            "const": true
          },
          "holes": {
            "type": "json",
            "const": true
          }
        },
        "output": {
          "pattern": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "059516e1e083a0146d6cb43967800f63ecb58163"
    }
  },
  "@dualbox/dualbox-module-scientifeet-set-footscan-above-zero": {
    "hash": "ba2f97564836866ddc0e912dad9223f608998cb4",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-set-footscan-above-zero",
      "version": "1.0.68",
      "description": "Translate the foot scan so that all points in the triangle heel-meta1-meta5 are above the plane z=0.",
      "main": "./set-footscan-above-zero.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-map": "^1.0.13",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footscan": {
            "type": "Geometry",
            "const": false
          },
          "footRefPts": {
            "type": "Map<String,Vector3>",
            "const": true
          }
        },
        "output": {
          "footscan": {
            "type": "Geometry"
          }
        },
        "object": "Module"
      },
      "hash": "ba2f97564836866ddc0e912dad9223f608998cb4"
    }
  },
  "@dualbox/dualbox-module-math-abs": {
    "hash": "5136c966161715b85ae51300125d60d4e9ac0147",
    "pkg": {
      "name": "@dualbox/dualbox-module-math-abs",
      "version": "1.0.57",
      "description": "Return absolute value of the given number.",
      "main": "math-abs.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "t": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "t": {
            "type": "Number"
          }
        }
      },
      "hash": "5136c966161715b85ae51300125d60d4e9ac0147"
    }
  },
  "dualbox-core-switch": {
    "hash": null,
    "pkg": {
      "name": "dualbox-core-switch",
      "version": "*",
      "description": "Resolve the condition value, then retrieve and respond with the matching value. If no match, respond with value value",
      "dualbox": {
        "input": {
          "cond": {
            "type": "*",
            "typeLink": "condition",
            "const": true
          },
          "case1": {
            "type": "*",
            "typeLink": "condition",
            "const": true
          },
          "ifCase1": {
            "type": "*",
            "typeLink": "value",
            "const": true
          },
          "case2": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase2": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case3": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase3": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case4": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase4": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case5": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase5": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case6": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase6": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case7": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase7": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "case8": {
            "type": "*",
            "typeLink": "condition",
            "const": true,
            "value": null
          },
          "ifCase8": {
            "type": "*",
            "typeLink": "value",
            "const": true,
            "value": null
          },
          "default": {
            "type": "*",
            "typeLink": "value",
            "const": true
          }
        },
        "output": {
          "result": {
            "type": "*",
            "typeLink": "value"
          }
        }
      }
    }
  },
  "@dualbox/dualbox-module-array-sort-numbers": {
    "hash": "4ec517ffcdb21d3678b4b5eb505ebebdd84f1c28",
    "pkg": {
      "name": "@dualbox/dualbox-module-array-sort-numbers",
      "version": "1.0.58",
      "description": "Sort the given array of elements according to the corresponding numbers array. The returned array is a new array.",
      "main": "array-sort-numbers.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<*>",
            "const": true
          },
          "numbers": {
            "type": "Array<Number>",
            "const": true,
            "desc": "The value according to which we want to sort the array."
          },
          "descend": {
            "type": "Boolean",
            "const": false,
            "value": false,
            "desc": "If true, the returned array will be sorted in descending order. Default is false : returned array is sorted in ascending order."
          }
        },
        "output": {
          "arr": {
            "type": "Array<*>",
            "desc": "The sorted array"
          }
        }
      },
      "hash": "4ec517ffcdb21d3678b4b5eb505ebebdd84f1c28"
    }
  },
  "@dualbox/dualbox-module-number-array-sort": {
    "hash": "6f75658bd34c3ee681927516bc85cb2145666748",
    "pkg": {
      "name": "@dualbox/dualbox-module-number-array-sort",
      "version": "1.0.58",
      "description": "Sort the given array of numbers in ascending or decending order.",
      "main": "number-array-sort.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-number": "^1.0.12"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "arr": {
            "type": "Array<Number>",
            "const": false
          },
          "descend": {
            "type": "Boolean",
            "value": false,
            "desc": "If true, the returned array will be sorted in descending order. Default is false : returned array is sorted in ascending order."
          }
        },
        "output": {
          "arr": {
            "type": "Array<Number>",
            "desc": "The sorted array"
          }
        }
      },
      "hash": "6f75658bd34c3ee681927516bc85cb2145666748"
    }
  },
  "@dualbox/dualbox-module-plane": {
    "hash": "1367ad3c953e20cb32762b522376abe649471fab",
    "pkg": {
      "name": "@dualbox/dualbox-module-plane",
      "version": "1.0.37",
      "description": "Create a plane from a normal vector and a constant.",
      "main": "plane.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-plane": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "n": {
            "type": "Vector3",
            "const": true,
            "desc": "A normal vector, should be normalized, if not, will be."
          },
          "c": {
            "type": "Number",
            "const": true,
            "desc": "The constant."
          }
        },
        "output": {
          "plane": {
            "type": "Plane"
          }
        }
      },
      "hash": "1367ad3c953e20cb32762b522376abe649471fab"
    }
  },
  "@dualbox/dualbox-module-geometry-faces-normals": {
    "hash": "bc0fd26253a2d6c369ede5ca730357eea017963f",
    "pkg": {
      "name": "@dualbox/dualbox-module-geometry-faces-normals",
      "version": "1.0.3",
      "description": "Get an array containing all faces normals of the given geometry.",
      "main": "geometry-faces-normals.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-geometry": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "g": {
            "type": "Geometry",
            "const": true
          }
        },
        "output": {
          "ns": {
            "type": "Array<Vector3>"
          }
        }
      },
      "hash": "bc0fd26253a2d6c369ede5ca730357eea017963f"
    }
  },
  "@dualbox/dualbox-module-vector3-array-density-select": {
    "hash": "75444cf39e3097d1298f107cca27b84043788cf7",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-array-density-select",
      "version": "1.0.3",
      "description": "Given a set of Vector3 and an angle, this module will select all vertices belonging to the cone of the given angle and showing the maximum density aong the set of vector3.",
      "main": "vector3-array-density-select.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "vs": {
            "type": "Array<Vector3>",
            "const": true
          },
          "angle": {
            "type": "Number",
            "const": true
          }
        },
        "output": {
          "vs": {
            "type": "Array<Vector3>"
          }
        }
      },
      "hash": "75444cf39e3097d1298f107cca27b84043788cf7"
    }
  },
  "@dualbox/dualbox-module-vector3-array-average": {
    "hash": "d19fc0b22013fa113ca710b7917e4dc542fc0046",
    "pkg": {
      "name": "@dualbox/dualbox-module-vector3-array-average",
      "version": "1.0.3",
      "description": "Return average value of a Vector3 array.",
      "main": "vector3-array-average.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "vs": {
            "type": "Array<Vector3>",
            "const": true
          },
          "weights": {
            "type": "Array<Number>",
            "const": true,
            "value": null,
            "desc": "Weights for each of the Vector3, if null uniform weighting will be used. Default to null"
          },
          "ifEmpty": {
            "type": "Vector3",
            "const": true,
            "value": {
              "metadata": {
                "type": "Vector3"
              },
              "data": {
                "x": 1,
                "y": 0,
                "z": 0
              }
            },
            "desc": "If vs is empty, this default value will be returned. Default to unit vector 1,0,0."
          }
        },
        "output": {
          "v": {
            "type": "Vector3"
          }
        }
      },
      "hash": "d19fc0b22013fa113ca710b7917e4dc542fc0046"
    }
  },
  "@dualbox/dualbox-module-plane-distance-to-point": {
    "hash": "415064211b2ffe9d7464068986f0034a717d247b",
    "pkg": {
      "name": "@dualbox/dualbox-module-plane-distance-to-point",
      "version": "1.0.38",
      "description": "Compute distance from the given point to the given plane.",
      "main": "plane-distance-to-point.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-plane": "^1.0.20",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "plane": {
            "type": "Plane",
            "const": true,
            "desc": "A plane object."
          },
          "point": {
            "type": "Vector3",
            "const": true,
            "desc": "The point"
          }
        },
        "output": {
          "x": {
            "type": "Number"
          }
        }
      },
      "hash": "415064211b2ffe9d7464068986f0034a717d247b"
    }
  },
  "@dualbox/dualbox-module-scientifeet-find-ref-points": {
    "hash": "996954ec4ba209b45fee50429ae1a67e2fada2b0",
    "pkg": {
      "name": "@dualbox/dualbox-module-scientifeet-find-ref-points",
      "version": "1.0.68",
      "description": "Gven a foot geometry approximatively oriented, this process will find the 3 reference points : center if the heel, meta1 and meta5.",
      "main": "./FindRefPoints.js",
      "scripts": {
        "lint": "eslint --env node --env browser **.js"
      },
      "dependencies": {
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-lib-scientifeet-podo3d": "^1.0.59",
        "@dualbox/dualbox-type-all3d": "^1.0.55",
        "@dualbox/dualbox-type-geometry": "^1.0.20",
        "@dualbox/dualbox-type-string": "^1.0.13",
        "@dualbox/dualbox-type-vector3": "^1.0.20"
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "input": {
          "footG": {
            "type": "Geometry",
            "const": false,
            "desc": "The scanned foot geometry."
          },
          "footSide": {
            "type": "String",
            "const": true,
            "desc": "Either left or Right."
          }
        },
        "output": {
          "refPts": {
            "type": "Array<Vector3>"
          }
        },
        "object": "Module"
      },
      "hash": "996954ec4ba209b45fee50429ae1a67e2fada2b0"
    }
  },
  "@dualbox/dualbox-ui-widget3d-material-edit": {
    "hash": "2a57603125e4479bc2cc98624d02ebe3bfaa193b",
    "pkg": {
      "name": "@dualbox/dualbox-ui-widget3d-material-edit",
      "version": "1.0.2",
      "description": "Implements a selector for meshes in the scene and UI to output a mapping between the mesh name and the material parameters.",
      "main": "dist/widget3d-material-edit.js",
      "scripts": {
        "test": "node test.js",
        "lint": "eslint --env node --env browser --env es6 **.js",
        "build": "babel src --presets babel-preset-env --out-dir dist --copy-files"
      },
      "dependencies": {
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "rollupify": "^0.4.0",
        "@dualbox/dualbox": "^1.0.62",
        "@dualbox/dualbox-lib-xthree": "^1.0.15",
        "@dualbox/dualbox-type-json": "^1.0.13"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "eslint": "^2.13.1"
      },
      "browserify": {
        "transform": [
          [
            "rollupify"
          ],
          [
            "babelify",
            {
              "presets": [
                "env"
              ]
            }
          ]
        ]
      },
      "author": "Maxime Quiblier <maximequiblier@gmail.com>",
      "license": "ISC",
      "dualbox": {
        "type": "Widget",
        "registerTo": "Canvas3D",
        "attr": {
          "mouse": {
            "type": "JSON",
            "value": {},
            "desc": "Description of mouse and touch events handling for this widget"
          },
          "triggerOnSlide": {
            "desc": "If true, sliders will trigger on slide. Else, will only trigger when a point has been moved and the position released.",
            "type": "Boolean",
            "value": true
          }
        },
        "input": {},
        "output": {
          "materials": {
            "desc": "Return a map from a mesh name to a JSON description of material parameters. To be used later in the app to set material.",
            "type": "Map<String,JSON>"
          }
        },
        "events": {
          "hide": {
            "desc": "Hide the widget"
          },
          "show": {
            "desc": "Show the widget"
          },
          "enable": {
            "desc": "Enable the widget"
          },
          "disable": {
            "desc": "Disable the widget"
          }
        }
      },
      "hash": "2a57603125e4479bc2cc98624d02ebe3bfaa193b"
    }
  },
  "@dualbox/dualbox-lib-jsoneditor": {
    "hash": "61a5b85fd8cffe2eaf1ef3b074400c6cc1ba97bc",
    "pkg": {
      "name": "@dualbox/dualbox-lib-jsoneditor",
      "version": "5.27.3",
      "description": "A library to include the excellent jsoneditor library",
      "main": "import.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "node inline-icon",
        "lint": "eslint --env node --env browser --env es6 **.js"
      },
      "files": [
        "package.json",
        "import.js",
        "dist/*"
      ],
      "author": "",
      "license": "ISC",
      "hash": "61a5b85fd8cffe2eaf1ef3b074400c6cc1ba97bc",
      "dependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "babel-preset-env": "^1.6.1",
        "babelify": "^8.0.0",
        "browserify-css": "^0.14.0",
        "css": "^2.2.1",
        "jsoneditor": "^5.27.0"
      },
      "devDependencies": {
        "babel": "^6.23.0",
        "babel-cli": "^6.26.0",
        "css": "^2.2.1",
        "fs-extra": "^4.0.2"
      },
      "browserify-css": {
        "inlineImages": true
      }
    }
  }
}
