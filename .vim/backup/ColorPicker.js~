import { $, env, UIComponent } from '@dualbox/dualbox';
import { Color }  from '@dualbox/dualbox-lib-xthree';
import { _ } from '@dualbox/dualbox-lib-lodash';

var DualboxTypesAll3D = require('@dualbox/dualbox-type-all3d');

var pkgDesc = require('../package.json');

if( env.browser ) {
    require('./ColorPicker.css'); // for bundle compilation
}


class ColorPicker extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.val = null;
        this.div = null;

        this.attr = {};

        var that = this;
        Object.keys(pkgDesc.dualbox.attr).forEach(function (key) {
            that.attr[key] = appDesc.attr[key] !== undefined ? appDesc.attr[key]  : pkgDesc.dualbox.attr[key].value;
        });
    }

    onReady() {
        var color = new Color(0,0,0);
        color.set(this.val);
        this.emit('data', { "result" : color });
    }

    disable() {
        $(this.div).prop('disabled', true);
    }

    enable() {
        $(this.div).prop('disabled', false);
    }

    hide(){
        $(this.div).hide();
    }

    show(){
        $(this.div).show();
    }

    onChange(e) {
        this.val = $(this.div).find('input[type="color"]').val();

        var color = new Color(0,0,0);
        color.set(this.val);
        this.trigger({ "result" : color });
    }

    static attachTo(appDesc, attrs, container) {

        // build slider from package.json desc
        var uiElement = new ColorPicker(pkgDesc, appDesc, attrs);

        // build the select div from app.json parameters and bind events
        var div = $('<input/>', { type: 'color' , value : uiElement.attr.value });
        div.on('input', function() {
            uiElement.onChange();
        });

        // build the container
        uiElement.div = $('<div/>', {class:"dualbox form-group db-colorpicker"}).append(
            $('<label/>', { text: uiElement.attr.label, style: 'margin-right: 15px;' }),
            div
        );

        uiElement.val = uiElement.attr.value;
        if( uiElement.attr.hidden ) {
            $(uiElement.div).hide();
        }

        // append to param div and return the element
        $(container).append(uiElement.div);
        return uiElement;
    }
}

module.exports = ColorPicker;
