var pjson = require('../package.json');
var colors = require('colors');
var request = require('request');
var path = require('path');
var fs = require('fs-extra');

var handleCommand = function(args) {
    var args = require('minimist')(args);

    // Get component name and version from package.json file
    try {
        var pkg = require(path.join(process.cwd(), './package.json'));
        var componentName = pkg.name;
        var componentVersion = pkg.version;
    }
    catch(e) {
        console.error(('Error while reading package.json : ' + e).red);
        return -1;
    }

    // Read the script file
    try {
        var scriptFile = path.join(process.cwd(), args.debug ? "./dist/browser/browser.js" : "./dist/browser/browser.min.js");
        var script = fs.readFileSync(scriptFile, "utf-8");
    }
    catch(e) {
        console.error(('Error while reading file ' + scriptFile + ': ' + e).red);
        return -1;
    }

    // Send all this to the dualbox.com upload API
    var url = (args.local ? pjson.localDualboxEndpoint : pjson.dualboxEndpoint) + "/api/component/upload/";
    var options = {
        uri: url,
        method: 'POST',
        json: true,
        body: {
            componentName: componentName,
            componentVersion: componentVersion,
            debug: args.debug === true,
            script: script,
            description: pkg.description,
            dualboxDescription: pkg.dualbox
        }
    }

    return new Promise( (resolve, reject ) => {
        console.log('[*] Uploading script for ' + componentName.green + ' version ' + componentVersion.green + '...');
        request(options, function(err, r, body) {
            if( err ) {
                console.error(("Error white uploading script: " + err).red);
                reject(err);
            }
            else {
                var json = body;
                if( json.Uploaded && json.Inserted ) {
                    console.log("[*] Script correctly uploaded to: " + json.CdnLocation);
                    resolve(0);
                }
                else {
                    if( json.Error ) {
                        console.error("Script was not uploaded correctly: " + json.Error.red);
                    }
                    else {
                        console.error('Unknown error:\n');
                        console.log( require('util').inspect( body ) );
                    }
                    reject(-1);
                    return;
                }
            }
        });
    });
};

exports.handle = handleCommand;
exports.description = "Upload a script corresponding to a dualbox component";
exports.help =
`
Upload a component's script from the current directory:
{0} upload

Upload a component's debug script from the current directory:
{0} upload --debug
`.format(pjson.name);
