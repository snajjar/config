var fs = require('fs-extra');
var path = require('path');
var _ = require('lodash');
var colors = require('colors');

// rollup stuff
var rollup = require('rollup');
var async = require('rollup-plugin-async');    // require
var commonjs = require('rollup-plugin-commonjs');    // require
var noderesolve = require('rollup-plugin-node-resolve'); // require from node_modules
var terser = require('rollup-plugin-terser').terser; // minify
var json = require('rollup-plugin-json'); // parse json file
var nodeGlobals = require('rollup-plugin-node-globals'); // node globals
var builtins = require('rollup-plugin-node-builtins'); // node builtins
var postcss = require('rollup-plugin-postcss'); // node builtins
var babel = require('rollup-plugin-babel');

//console.log('Memory available: ' + (require('v8').getHeapStatistics().heap_size_limit / 1024 / 1024 / 1024).toFixed(0) + "G");

var bundle = async function(inputOptions, outputOptions) {
    try {
        // create a bundle
        const bundle = await rollup.rollup(inputOptions);

        //console.log(bundle.imports); // an array of external dependencies
        //console.log(bundle.exports); // an array of names exported by the entry point
        //console.log(bundle.modules); // an array of module objects

        // generate code and a sourcemap
        const { output } = await bundle.generate(outputOptions);

        // or write the bundle to disk
        await bundle.write(outputOptions);
    }
    catch(e) {
        console.error(('[*] ' + e).red);
    }
}


var build = async function(args, app, deps, cwd, cb) {
    return new Promise( async (resolve, reject) => {
        var fileName = args['_'][0];
        var outputFile = path.join(cwd, args['o']);
        var requireFileName = "require.js";
        var requireFileContent = "";

        var clean = function() {
            try { fs.removeSync(fileName); } catch(e) {}
            try { fs.removeSync(requireFileName); } catch(e) {}
        }

        // build globals object from deps
        var globals = {};

        _.each(deps, function(depList, listName) {
            _.each(depList, (version, component) => {
                if( component.startsWith('@dualbox') ) {
                    globals[component] = require.resolve(component);
                    requireFileContent += '    require("' + component + '");\n';
                }
            });
        });
        //globals["app.json"] = app;
        requireFileContent = '/* This code is added by the dpm bundling procedure */\n' +
            "function neverCalled() {\n" + requireFileContent + "}\n\n\n";
        requireFileContent += fs.readFileSync('./_dualbox_init.js', 'utf-8');
        fs.writeFileSync('./_dualbox_init.js', requireFileContent, "utf-8");

        if( args.debug ) {
            try {
                /*
                await bundle({
                    input: ['_dualbox_init.js', 'require.js'],
                    plugins:  [
                        async(),
                        json(),
                        nodeGlobals(),
                        builtins(),
                        noderesolve({
                            //browser: true,
                            //preferBuiltins: true,
                            //jsnext: true,
                            //main: true,
                            //module: true
                        }),
                        commonjs({
                            browser: true,
                            ignoreGlobals: false,
                            preferBuiltins: false,
                            sourceMap: true
                        }),


                        postcss({
                            extensions: ['.css'],
                        })
                    ],
                    // remove circular dependency warnings
                    onwarn: function(warning, warn) {
                        if(warning.code === 'CIRCULAR_DEPENDENCY') return;
                        warn(warning);
                    },
                    treeshake: false
                }, {
                    format: 'iife',
                    name: 'DualBox',
                    file: outputFile,
                    strict: false,
                    sourcemap: true
                });

                clean();
                resolve();
                */
            }
            catch(e) {
                clean();
                reject(e);
            }
        }
        else {
            try {
                await bundle({
                    input: '_dualbox_init.js',
                    plugins:  [
                        nodeGlobals(),
                        builtins(),
                        noderesolve({
                            browser: true,
                            preferBuiltins: false,
                            jsnext: true,
                            main: true,
                            module: true
                        }),
                        commonjs({
                            exclude: 'node_modules/@dualbox/**',
                            browser: true,
                            //ignoreGlobals: false,
                            preferBuiltins: false,
                            sourceMap: false,
                            //include: 'node_modules/**'
                            extensions: ['.js']
                        }),
                        async(),
                        babel(),
                        postcss({
                            extensions: ['.css'],
                        }),
                        json(),
                        //terser()
                    ],
                    // remove circular dependency warnings
                    onwarn: function(warning, warn) {
                        if(warning.code === 'CIRCULAR_DEPENDENCY') return;
                        warn(warning);
                    },
                    treeshake : true
                }, {
                    format: 'cjs',
                    name: 'DualBox',
                    strict: false,
                    file: outputFile,
                    sourcemap: false
                });

                clean();
                resolve();
            }
            catch(e) {
                clean();
                reject(e);
            }
        }
    });
}

process.on('message', async message => {
    try {
        await build(message.args, message.app, message.deps, message.cwd );
        process.send("");
    }
    catch(e) {
        throw e;
    }
});

