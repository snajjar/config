import { $, env, UIComponent } from '@dualbox/dualbox';
var pkgDesc = require('../package.json');

// for bundle compilation
if( env.browser ) {
    require('./loader.css'); // for bundle compilation
}

class Loader extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)

        this.attr = appDesc.attr || {};
        this.defaultText = null;
    }

    onReady() {
    }

    initialize() {
        super.initialize();
    }

    registerEvents() {
        super.registerEvents();

        // register some custom behaviors
        this.registerUIEvent("hide",     this.hide.bind(this));
        this.registerUIEvent("show",     this.show.bind(this));
    }

    hide() {
        $(this.div).hide();
    }

    show( data ) {
        // if the event define a loader text, set it
        if( data.args ) {
            $(this.div).attr('data-text', data.args);
        }
        else {
            $(this.div).data('text', this.defaultText);
        }
        $(this.div).show();
    }

    static attachTo(appDesc, attrs, div) {
        // get default loader text
        var loaderText = (appDesc.attr.text) || "Loading...";
        var loaderClass = (appDesc.attr.class) || "loader-default";

        // build slider from package.json desc
        var loader = new Loader(pkgDesc, appDesc, attrs);
        loader.div = $('<div/>', { "class":"dualbox dualbox-loader loader " + loaderClass + " is-active", "data-text": loaderText });
        loader.defaultText = loaderText;

        // append to param div and return the slider
        $(div).append(loader.div);
        return loader;
    }
}

module.exports = Loader;
