import { _ } from 'lodash';
import swal from 'sweetalert2'

Template.AdminPage.onCreated(function() {
    this.template = new ReactiveVar('AdminUsers');
});

Template.AdminPage.onRendered(function() {
    // load the tab that is set right now
    if( window.location.hash ) {
        setSelectedNav();
    }
});

Template.AdminPage.helpers({
    getActiveTemplate : function() {
        return Template.instance().template.get();
    }
});

Template.AdminPage.events({
    "click a.nav-link" : function(e, t) {
        e.preventDefault();

        // set the tab to active
        $(t.findAll('.nav-link')).removeClass('active');
        $(e.target).addClass('active');

        // show the right template
        var target = $(e.target).attr("href") // activated tab
        var tab = target.substr(1);
        t.template.set(tab);

        // set the hash in url
        window.location.hash = target;
    },
});


Template.AdminEmailTemplates.onCreated(function() {
    this.defaultTemplateData = {
        "verifyEmail" : {
            url: "http://dualbox.com/fake/link/"
        },
        "resetPassword" : {
            url: "http://dualbox.com/fake/link/"
        },
        "invoiceNotification" : {
            monthStr : "February 2018",
            url: "http://dualbox.com/billing/"
        },
    }

    this.emailTemplate = new ReactiveVar('verifyEmail');
    this.emailType = new ReactiveVar('html');
    this.emailData = new ReactiveVar(this.defaultTemplateData['verifyEmail']);
});

Template.AdminEmailTemplates.onRendered(function() {
    this.autorun(() => {
        var div = $(this.find('.show-email')).contents().find('body');
        Meteor.call('renderEmailTemplate', this.emailTemplate.get(), this.emailType.get(), this.emailData.get(), (err, data) => {
            if( err ) {
                div.empty().append('<p style="color: red;">' + err + '</p>');
            }
            else {
                div.empty().html(data);
            }
        });
    });
});

/*
 *   Template to manage users
 */
Template.AdminUsers.onCreated(function() {
    this.autorun(() => {
        Meteor.subscribe('select_users');
    });
});

Template.AdminUsers.helpers({
    getUsers : function() {
        return Meteor.users.find({}, { sort: { createdAt: 1 }});
    }
});

/*
 *   User Configuration Page
 */
Template.AdminUserConfigurationPage.onCreated(function() {
    this.userId = this.data.userId;

    this.autorun(() => {
        Meteor.subscribe('select_users', { _id: this.userId });
    });
});

Template.AdminUserConfigurationPage.helpers({
    getUser: function() {
        return Meteor.users.findOne({ _id: Template.instance().userId });
    },

    hasCustomPlan : function() {
        var user = Meteor.users.findOne({ _id: Template.instance().userId });
        return user && user.plan === "custom";
    }
});

/*
 *   Template to manage invoices
 */
Template.AdminInvoices.onCreated(function() {
    this.selectedMonth = new ReactiveVar( moment().startOf('month') );

    this.autorun(() => {
        Meteor.subscribe('select_users', {
            'validated': true, // only validated users
            'createdAt' : { $lte : this.selectedMonth.get().clone().add(1, "month").toDate() } // users that were created before the end of this month
        });

        Meteor.subscribe('select_Invoices', {
            year  : this.selectedMonth.get().year(),
            month : this.selectedMonth.get().month()
        });
    });
});

Template.AdminInvoices.helpers({
    getMonths : function() {
        var r = [];
        var startDate = moment('2017-11-01');
        var endDate = moment();

        var d = startDate;
        while( d.isBefore(endDate) ) {
            r.push( d.clone() );
            d.add(1, "month");
        }

        return r.reverse();
    },

    getCurrentMonth() {
        return Template.instance().selectedMonth.get().format('YYYY-MM');
    },

    getUsers : function() {
        return Meteor.users.find({
            'validated': true,
            'createdAt' : { $lte : Template.instance().selectedMonth.get().clone().add(1, "month").toDate() }
        });
    },

    invoiceExists() {
        var t = Template.instance();
        var invoice = Invoices.findOne({
            ownerId : this._id,
            year  : t.selectedMonth.get().year(),
            month : t.selectedMonth.get().month()
        });
        return invoice !== undefined;
    },

    invoicePublished() {
        var t = Template.instance();
        var invoice = Invoices.findOne({
            ownerId : this._id,
            year  : t.selectedMonth.get().year(),
            month : t.selectedMonth.get().month()
        });
        return invoice !== undefined && invoice.published;
    },
});

Template.AdminInvoices.events({
    "change .select-month" : function(e, t) {
        var monthStr = $(e.target).val();
        t.selectedMonth.set( moment(monthStr + "-01") );
    }
});

/*
 *  Template to edit/build the invoice for a user
 */
Template.AdminEditInvoicePage.onCreated(function() {
    this.userId = this.data.userId;
    this.monthStr = this.data.month;
    this.month  = moment(this.data.month + "-01");

    this.instanciations = new ReactiveVar({});

    this.autorun(() => {
        this.subscribe('select_users', { _id: this.userId });
        this.subscribe('select_Invoices', { ownerId: this.userId, year: this.month.year(), month: this.month.month() });
        this.subscribe('all_InvoicesCount');

        // two ways of building:
        //     - before march 01 (with in-appversions statistics)
        //     - after march 01 (with instanciations collections)
        if( Template.instance().month.isBefore( moment("2018-05-01") ) ) {
            this.subscribe('select_AppVersions', { ownerId : this.userId, createdAt: { $lte: this.month.toDate() } }, {
                onReady: () => { this.buildInstanciationsFromInAppStatistics(); },
                onError: (err) => { console.log(err); }
            });
        }
        else {
            this.subscribe('select_InstanciationsMonth', { ownerId : this.userId , year: this.month.year(), month: this.month.month() }, () => {
                this.buildInstanciationsFromCollections();
            });
        }
    });

    this.getVAT = function() {
        var user = Meteor.users.findOne(this.userId);
        return user && user.VAT || 0.2;
    }

    this.buildInstanciationsFromInAppStatistics = function() {
        var versions = AppVersions.find({ ownerId : this.userId, createdAt: { $lte: this.month.toDate() } }).fetch();
        var r = {};
        _.each(versions, (version) => {
            if( r[version.appName] === undefined ) {
                r[version.appName] = {};
            }

            if( r[version.appName][version.appVersion] === undefined ) {
                r[version.appName][version.appVersion] = version.instanciations && version.instanciations[this.monthStr] || 0;
            }
        });

        this.instanciations.set(r);
    };

    this.buildInstanciationsFromCollections = function() {
        var instanciations = InstanciationsMonth.find({ ownerId : this.userId , year: this.month.year(), month: this.month.month() }).fetch();
        var r = {};
        _.each(instanciations, (i) => {
            if( r[i.appName] === undefined ) {
                r[i.appName] = {};
            }

            if( r[i.appName][i.appVersion] === undefined ) {
                r[i.appName][i.appVersion] = i.count || 0;
            }
        });

        this.instanciations.set(r);
    };

    this.getUserPlan = function() {
        var user = Meteor.users.findOne(this.userId);
        switch( user.plan ) {
            case "startup"    : return { base: 19, instanciationUnitPrice: 0.03 };
            case "pro"        : return { base: 99, instanciationUnitPrice: 0.02 };
            case "enterprise" : return { base: 399, instanciationUnitPrice: 0.01 };
            case "custom"     : return user.customPlan;
            case "no plan"    :
            default :
                swal("The user has no plan!", "go set a plan in admin user view", "error");
                return null;
        }
    },

    this.getTotalInstanciations = function() {
        var s = 0;
        _.each( this.instanciations.get(), (app, appName) => {
            _.each(app, (instanciations, versionName) => {
                s += instanciations;
            });
        });
        return s;
    };

    this.getInstanciationsPrices = function() {
        var userPlan = this.getUserPlan();
        var inst = this.getTotalInstanciations();

        var priceTF    = round(inst * userPlan.instanciationUnitPrice, 2);
        var VAT        = round(priceTF * this.getVAT(), 2);
        var priceTotal = round(priceTF + VAT, 2);
        return { priceTF : priceTF, VAT : VAT, priceTotal : priceTotal }
    }

    this.getPlanPrices = function() {
        var plan = this.getUserPlan();

        var priceTF    = round(plan.base, 2);
        var VAT        = round(priceTF * this.getVAT(), 2);
        var priceTotal = round(priceTF + VAT, 2);
        return { priceTF : priceTF, VAT : VAT, priceTotal : priceTotal }
    }

    this.getTotalPrices = function() {
        var planPrices = this.getPlanPrices();
        var instPrices = this.getInstanciationsPrices();

        var priceTF    = round(planPrices.priceTF + instPrices.priceTF, 2);
        var VAT        = round(priceTF * this.getVAT(), 2);
        var priceTotal = round(priceTF + VAT, 2);
        return { priceTF : priceTF, VAT : VAT, priceTotal : priceTotal };
    }

    this.getInvoice = function() {
        return Invoices.findOne({ ownerId: this.userId, year: this.month.year(), month: this.month.month() })
    };
});

Template.AdminEditInvoicePage.helpers({
    getMonth : function() {
        return Template.instance().month;
    },

    getUser : function() {
        return Meteor.users.findOne({ _id: Template.instance().userId });
    },

    getUserId : function() {
        return Template.instance().userId;
    },

    getUserPlanName: function() {
        var user = Meteor.users.findOne({ _id: Template.instance().userId });
        if( user ) {
            return user.plan || "<span class='text-danger'>[PLEASE SET A PLAN]</span>";
        }
        else {
            return "[user not found]";
        }
    },

    getUserPlan : function() {
        return Template.instance().getUserPlan();
    },

    getVAT : function() {
        return Template.instance().getVAT();
    },

    getPlanPriceTF: function() {
        return this.base;
    },

    getPlanPriceVAT: function() {
        var t = Template.instance();
        return Math.ceil(this.base * t.getVAT() * 100) / 100;
    },

    getPlanPriceTotal: function() {
        var t = Template.instance();
        return Math.ceil( this.base * (1+t.getVAT()) * 100) / 100;
    },

    getApps : function() {
        return Object.keys( Template.instance().instanciations.get() );
    },

    getVersions : function(app) {
        return Object.keys( Template.instance().instanciations.get()[app] );
    },

    getInstanciations : function(app, version) {
        return Template.instance().instanciations.get()[app][version];
    },

    hasInstanciations : function(app, version) {
        return Template.instance().instanciations.get()[app][version] > 0;
    },

    getTotalInstanciations : function () {
        return Template.instance().getTotalInstanciations();
    },

    getInstanciationsPricesTF : function() {
        return Template.instance().getInstanciationsPrices().priceTF;
    },

    getInstanciationsPricesVAT : function() {
        return Template.instance().getInstanciationsPrices().VAT;
    },

    getInstanciationsPricesTotal : function() {
        return Template.instance().getInstanciationsPrices().priceTotal;
    },

    getTotalPriceTF : function() {
        return Template.instance().getTotalPrices().priceTF;
    },

    getTotalPriceVAT : function() {
        return Template.instance().getTotalPrices().VAT;
    },

    getTotalPriceTotal : function() {
        return Template.instance().getTotalPrices().priceTotal;
    },

    isInvoicePeriodFinished : function() {
        return moment() > Template.instance().month.clone().endOf('month');
    },

    getFormType : function() {
        var t = Template.instance();
        var previousInvoice = Invoices.findOne({ ownerId: t.userId, year: t.month.year(), month: t.month.month() });
        return previousInvoice ? "update" : "insert";
    },

    hasInvoice : function() {
        var t = Template.instance();
        var previousInvoice = Invoices.findOne({ ownerId: t.userId, year: t.month.year(), month: t.month.month() });
        return previousInvoice !== undefined;
    },

    getInvoiceLink: function() {
        var t = Template.instance();
        var previousInvoice = Invoices.findOne({ ownerId: t.userId, year: t.month.year(), month: t.month.month() });
        return Meteor.absoluteUrl('invoice/' + previousInvoice._id);
    },

    getInvoice: function() {
        // if edit, just get the existing invoice
        // if insert, pre-fill invoice with values
        var t = Template.instance();

        var previousInvoice = Invoices.findOne({ ownerId: t.userId, year: t.month.year(), month: t.month.month() });
        if( previousInvoice ) {
            return previousInvoice;
        }
        else {
            // build a pre-filled doc
            var doc = {};
            doc.ownerId = t.userId;
            doc.invoiceBase = "DB";

            var invoiceCounter = Counter.get("all_Invoices");
            if( invoiceCounter !== undefined ) {
                doc.invoiceNumber = invoiceCounter + 1;
            }

            var userPlan = t.getUserPlan();
            doc.planPriceTF = userPlan.base;
            doc.instanciationUnitPriceTF = userPlan.instanciationUnitPrice;

            doc.instanciationsNumber = t.getTotalInstanciations();

            var year = t.month.get().year();
            var month = t.month.get().month();

            var user = Meteor.users.findOne({ _id: t.userId });
            if( user ) {
                doc.year = year;
                doc.month = month;
                doc.date = moment({ year: year, month: month }).endOf('month').toDate();
                doc.plan = user.plan;
                doc.customPlan = user.customPlan;
                doc.VATIntracomm = user.VATIntracomm;
                doc.VATPolicy = user.VATPolicy;
                doc.VAT = t.getVAT();
                doc.billingAddress = user.billingAddress;
            }
            return doc;
        }
    },

    isInvoicePublished : function() {
        var invoice = Template.instance().getInvoice();
        return invoice && invoice.published;
    },

    isInvoiceNotified : function() {
        var invoice = Template.instance().getInvoice();
        return invoice && invoice.notificationSent;
    },
});


Template.AdminEditInvoicePage.events({
    "click .btn-publish-invoice" : function(e, t) {
        e.preventDefault();

        var invoice = t.getInvoice();
        if( !invoice ) {
            console.error('Could not find invoice');
            return;
        }

        Invoices.update(invoice._id, { $set: { published: true }});
    },

    "click .btn-send-invoice-notification" : function(e, t) {
        e.preventDefault();

        var invoice = t.getInvoice();
        if( !invoice ) {
            console.error('Could not find invoice');
            return;
        }

        Meteor.call('notifyInvoiceAvailable', invoice._id, function(err) {
            if( err ) {
                swal('Error notifying invoice', err, 'error');
            }
            else {
                Invoices.update(invoice._id, { $set : { notificationSent: true }});
            }
        });
    },
});

AutoForm.addHooks('user-plan-form', {
    before: {
        insert: function(doc){
            this.result(doc);
        },
        update: function(doc){
            this.result(doc);
        },
    },
    onSuccess : function(formType, result) {
        return false;
    },
    onError : function(formType, result, err) {
        console.log(err);
    }
});

AutoForm.addHooks('invoice-form', {
    before: {
        insert: function(doc){
            // insert statistics
            var pricePlanTF = this.template.findParent('AdminEditInvoicePage').getPlanPrices().priceTF;
            var priceInstanciationsTF = this.template.findParent('AdminEditInvoicePage').getInstanciationsPrices().priceTF;
            var totalPrices = this.template.findParent('AdminEditInvoicePage').getTotalPrices();
            doc.prices = {
                pricePlanTF: pricePlanTF,
                priceInstanciationsTF: priceInstanciationsTF,
                priceTF: totalPrices.priceTF,
                priceVAT: totalPrices.VAT,
                price: totalPrices.priceTotal,
            };
            this.result(doc);
        },
        update: function(doc){
            // insert statistics
            var pricePlanTF = this.template.findParent('AdminEditInvoicePage').getPlanPrices().priceTF;
            var priceInstanciationsTF = this.template.findParent('AdminEditInvoicePage').getInstanciationsPrices().priceTF;
            var totalPrices = this.template.findParent('AdminEditInvoicePage').getTotalPrices();
            doc.$set.prices = {
                pricePlanTF: pricePlanTF,
                priceInstanciationsTF: priceInstanciationsTF,
                priceTF: totalPrices.priceTF,
                priceVAT: totalPrices.VAT,
                price: totalPrices.priceTotal,
            };
            this.result(doc);
        },
    },
    onSuccess : function(formType, result) {
        swal('Invoice saved', '', 'success');
        return false;
    },
    onError : function(formType, result, err) {
        console.log(err);
    }
});


/*
 *   Template for editing mails
 */
Template.AdminEmailTemplates.helpers({
    getTemplateData : function() {
        return JSON.stringify(Template.instance().emailData.get(), null, 2);
    }
});

Template.AdminEmailTemplates.events({
    "change .select-template": function(e, t) {
        var val = $(e.target).val();
        t.emailTemplate.set(val);
        t.emailData.set( t.defaultTemplateData[val] );
    },

    "change .select-email": function(e, t) {
        var val = $(e.target).val();
        t.emailTemplate.set(val);
    },

    "click .template-data-button" : function(e, t) {
        var val = JSON.parse($('.template-data').val());
        t.emailData.set( val );
    }
});
