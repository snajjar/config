import { $, env, UIComponent, Type} from '@dualbox/dualbox';
var pkgDesc = require('../package.json');
import { _ } from '@dualbox/dualbox-lib-lodash';

if( env.browser ) {
    require('./RadioImages.css'); // for bundle compilation
}

function guidGenerator() {
    var S4 = function() {
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    };
    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}

class RadioImages extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.val = null;
        this.valDef = null;
        this.div = null;

        this.valuesMap = {};
        this.resultType = null;
        this.name = guidGenerator();
    }

    registerEvents() {
        super.registerEvents();

        // Register events
        this.registerUIEvent("hide",          this.hide.bind(this));
        this.registerUIEvent("show",          this.show.bind(this));
        this.registerUIEvent("enable",        this.enable.bind(this));
        this.registerUIEvent("disable",       this.disable.bind(this));
        this.registerUIEvent("setValue",      this.setValue.bind(this));
    }

    setValue(e) {
        var value = this.resultType.toLowerCase() === "string" ? e.args : JSON.stringify(data.args);
        $(this.div).find('select').val( value );
        this.onChange();
    }

    onReady() {
        this.emit('data', { "result" : this.val });
    }

    disable() {
        $(this.div).prop('disabled', true);
        $(this.div).css("opacity", "0.5");
        $(this.div).css("pointer-events", "none");
    }

    enable() {
        $(this.div).prop('disabled', false);
        $(this.div).css("opacity", "");
        $(this.div).css("pointer-events", "");
    }

    hide() {
        $(this.div).hide();
    }

    show() {
        $(this.div).show();
    }

    import( value ) {
        this.val = Type.fromJSON(value);
        this.setValue(
            this.resultType.toLowerCase() === "string" ? value : JSON.stringify(value)
        );
        this.trigger( { "result" : this.val } );
    }

    setValue(v) {
        var radio = $(this.div).find('radio[data-value="' + v + '"]');
        radio.prop("checked", true);
    }

    getValue() {
        var val = $(this.div).find('input[type="radio"]:checked').attr('data-value');
        return this.valuesMap[val];
    }

    onChange(e) {
        this.val = this.getValue();
        this.trigger( { "result" : this.val } );
    }

    static attachTo(appDesc, attrs, div) {
        var uiElement = new RadioImages(pkgDesc, appDesc, attrs);

        var attr = uiElement.attr;

        // build the select div from app.json parameters
        var radioDiv = $('<div/>', {
            class: 'dualbox dualbox-radio-div' + (attr.class || ''),
        });

        if( !attr.options ) {
            throw "Can not instanciate radio-image without any options defined in the application!";
        }
        _.each( attr.options, function(o) {
            if(uiElement.resultType === null && o.value !== null){
                uiElement.resultType = Type.detectType(o.value);
            }else{
                if(uiElement.resultType !== Type.detectType(o.value)){
                    throw "Error : some values of the radio-image do not have the same type : found "+uiElement.resultType+" and "+Type.detectType(o.value)+".";
                }
            }
            var strval = uiElement.resultType.toLowerCase() === "string" ? o.value : JSON.stringify(o.value);
            uiElement.valuesMap[strval] = Type.fromJSON(o.value);

            // build style object
            var styleObject = {};
            if( attr.imgStyle ) {
                var rules = attr.imgStyle.split(';');
                _.each(rules, (rule) => {
                    if( rule ) {
                        var { ruleKey, ruleValue } = rule.split(':');
                        styleObject[ruleKey] = ruleValue;
                    }
                });
            }

            radioDiv.append(
                $('<label/>', {
                    class: "dualbox-radio-imgcontainer"
                }).append(
                    $('<input/>', {
                        type: "radio",
                        name: uiElement.name,
                        "data-value": strval
                    }),
                    $('<img/>', {
                        src: o.imgUrl,
                        style : attr.imgStyle
                    })
                )
            );
        });

        // build the container
        uiElement.div = $('<div/>', { class : "dualbox form-group dualbox-radio-container" }).append(
            $('<label/>', { class: "dualbox", text: attr.label }),
            radioDiv
        );
        uiElement.val = uiElement.valuesMap[
            uiElement.resultType.toLowerCase() === "string" ?
                attr.options[0].value :
                JSON.stringify(attr.options[0].value)
        ];

        var init_value = attr.value;
        if( init_value ) {
            uiElement.valDef = Type.fromJSON(init_value);
            uiElement.val = uiElement.valDef ;
        }else{
            uiElement.valDef = uiElement.val;
            init_value = attr.options[0].value;
        }
        $(radioDiv).val(
            uiElement.resultType.toLowerCase() === "string" ? init_value : JSON.stringify(init_value)
        );


        // This option is such that selecting twice the same option in the select
        // will still trigger this element.
        // Can be useful when you want to react to the clic even if the current value has been emitted before.
        if( attr.triggerOnClick ){
            radioDiv.click(function () {
                if ($(this).data('click')) {
                    uiElement.onChange();
                    $(this).data('click', false);
                } else {
                    $(this).data('click', true);
                }
            });
        }
        else {
            // bind events
            radioDiv.change(uiElement.onChange.bind(uiElement));
        }

        // append to param div and return the element
        $(div).append(uiElement.div);
        if( attr.hidden ) {
            $(uiElement.div).hide();
        }

        return uiElement;
    }
}

module.exports = RadioImages;
