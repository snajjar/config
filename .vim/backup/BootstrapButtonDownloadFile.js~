import { $, env, UIComponent } from '@dualbox/dualbox';
var pkgDesc = require('../package.json');

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('./BootstrapButtonDownloadFile.css'); // for bundle compilation
}

var downloadFile = function( filename, blob ) {
    var a = document.createElement('a');
    a.href = window.URL.createObjectURL(blob);
    a.download = filename;

    // simulate a click on the link
    if (document.createEvent) {
        var event = document.createEvent("MouseEvents");
        event.initEvent("click", true, true);
        a.dispatchEvent(event);
    } else {
        a.click();
    }
};

/**
 *  Attributes in appDesc :
 *  text : text of the button
 *  id : html id
 */
class BootstrapButtonDownloadFile extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.geometry = null;
    }

    onClick(e) {
        this.disable();
        this.div.text(this.attr.processingText);
        this.triggerRead();
    }

    disable() {
        $(this.div).prop('disabled', true);
    }

    enable() {
        $(this.div).prop('disabled', false);
    }

    hide(){
        $(this.div).hide();
    }

    show(){
        $(this.div).show();
    }

    // when all the data is there, display it in the scene
    onReady() {
        var inkeys = Object.keys(this.inputValid);
        var valid = true;
        for(var i=0; i<inkeys.length; ++i){
            if( !this.inputValid[inkeys[i]] ){
                valid = false;
            }
        }

        if(!valid){
            throw new DualBox.Error("OnReady called on a not ready output...?");
        }else{
            var f = this.inputValue["file"];
            f.download();
        }
        this.enable();
        this.div.text(this.attr.text);

        // We're done, trigger all UI events
        this.trigger({});
    }

    onTrigger() {
        this.disable();
        super.onTrigger();
    }

    static attachTo(appDesc, attrs, div) {
        // build slider from package.json desc
        var component = new BootstrapButtonDownloadFile(pkgDesc, appDesc, attrs);

        var attr = component.attr;

        var buttonHTML = attr.text;
        if( attr.glyphicon ) {
            buttonHTML = "<i class='glyphicon " + attr.glyphicon + "'></i> " + buttonHTML;
        }
        if( attr.fontawesomeIcon ) {
            buttonHTML = "<i class='fa " + attr.fontawesomeIcon + "'></i> " + buttonHTML;
        }

        // instanciate div from app.json parameters
        component.div = $('<button/>', {
                id:    component.id,
                type:  'text',
                class: 'dualbox btn ' + attr.class + ' db-button-download-file',
            }).append(buttonHTML)
            .click(component.onClick.bind(component))

        // append to param div and return the slider
        $(div).append(component.div);
        if( component.attr.hidden ) {
            $(component.div).hide();
        }
        return component;
    }
}

module.exports = BootstrapButtonDownloadFile;
