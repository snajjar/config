import { $, env, UIComponent } from '@dualbox/dualbox';
var pkgDesc = require('../package.json');
import { _ } from '@dualbox/dualbox-lib-lodash';

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('./BootstrapCheckbox.css'); // for bundle compilation
}


class BootstrapCheckbox extends UIComponent {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options)
        this.val = null;
        this.div = null;
    }

    registerEvents() {
        super.registerEvents();

        this.registerUIEvent("setValue", this.setValue.bind(this));
    }

    setValue(e) {
        if(e.args !== this.val){
            $(this.div).find('input[type="checkbox"]').prop('checked', e.args);
            this.onChange();
        }
    }

    onReady() {
        this.emit('data', { "result" : this.val });
    }

    disable() {
        $(this.div).prop('disabled', true);
        $(this.div).css("opacity", "0.5");
        $(this.div).css("pointer-events", "none");
    }

    enable() {
        $(this.div).prop('disabled', false);
        $(this.div).css("opacity", "");
        $(this.div).css("pointer-events", "");
    }

    hide(){
        $(this.div).hide();
    }

    show(){
        $(this.div).show();
    }

    import( value ) {
        this.val = value;
        $(this.div).find('input[type="checkbox"]').prop('checked', value);
        this.trigger({ "result" : this.val });
    }

    onChange(e) {
        this.val = $('#'+this.id + "-checkbox").prop('checked');
        this.trigger({ "result" : this.val });
    }

    static attachTo(appDesc, attrs, div) {
        // build slider from package.json desc
        var uiElement = new BootstrapCheckbox(pkgDesc, appDesc, attrs);

        uiElement.val = uiElement.attr.checked === undefined ? false : uiElement.attr.checked

        // build the container
        uiElement.div = $('<div/>', { class : "dualbox form-group db-checkbox-div" }).append(
            $('<input/>', {
                class: "dualbox",
                id:appDesc.id + "-checkbox",
                type: "checkbox",
                checked:uiElement.val
             }).change(uiElement.onChange.bind(uiElement)),
             $('<label/>', { class: "dualbox", text: uiElement.attr.label })
        );

        // append to param div and return the element
        $(div).append(uiElement.div);
        if( uiElement.attr.hidden ) {
            $(uiElement.div).hide();
        }
        return uiElement;
    }
}

module.exports = BootstrapCheckbox;
