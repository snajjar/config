
var DualBox = require('@dualbox/dualbox');
DualBox.PBRCubemapLoader = require("./PBRCubemapLoader.js");

var XTHREE = require('@dualbox/dualbox-lib-xthree');
var DualboxTypesAll3D = require('@dualbox/dualbox-type-all3d');
 

var ftp = require('ftp-get');

var PBRCubemapLoaderTester = function(){
    this.logger = new DualBox.LoggerObject("PBRCubemapLoaderTester", { userOrigin: true });
};
PBRCubemapLoaderTester.prototype.constructor = PBRCubemapLoaderTester;

PBRCubemapLoaderTester.prototype.test = function(){
    var that = this;

    ftp.get(
        {url:"",bufferType:'buffer'},
        function (error, zip_buffer) {
            if (error) {
                console.log("Error in FtpLoader : " +error);
            } else {
                // Note : DualBox.Module is pure abstract, cannot be tested on its own.
                //        Here we use the Conditional module to test the abstract Module class.
                that.logger.info("  Instantiating DualBox.PBRCubemapLoader...");
                var test_pbrcml = new DualBox.PBRCubemapLoader({ id: "test001", tag: "Module:(test001)", rootApp: (new DualBox.App({ nodes: [] }, "")) });
                test_pbrcml.setDefaultInput("zip", zip_buffer);
                test_pbrcml.setDefaultInput("imageFormat", "png");

                that.logger.info("    Testing computeOutput...");
                that.logger.warn("    Impossible to test PBRCubemapLoader : this module require a browser environment.")
                /*
                test_pbrcml.once('data',function(data){
                    var out = data.output;
                    if(      out.specular.length !== 6
                        || !(out.diffuse instanceof XTHREE.CubeTexture)
                        || !(out.specular[0] instanceof XTHREE.CubeTexture)
                        || !(out.specular[1] instanceof XTHREE.CubeTexture)
                        || !(out.specular[2] instanceof XTHREE.CubeTexture)
                        || !(out.specular[3] instanceof XTHREE.CubeTexture)
                        || !(out.specular[4] instanceof XTHREE.CubeTexture)
                        || !(out.specular[5] instanceof XTHREE.CubeTexture)
                    ){
                        that.logger.error("    PBR cubemap loading failed. Bad number of specular cubemap, or bad types.");
                    }
                    that.logger.info("  Test for DualBox.PBRCubemapLoader DONE.");
                });

                test_pbrcml.startCompute();
                */
                that.logger.info("  Test for DualBox.PBRCubemapLoader DONE.");

            }
        }
    );
};

var tester = new PBRCubemapLoaderTester();
tester.test();




