var inNode = function() {
    try {
        return module.exports && typeof module == "object" && !inBrowser();
    }
    catch( e ) {
        if( e instanceof ReferenceError ) {
            return false;
        }
        else {
            throw e;
        }
    }
}

var inWorker = function() {
    try {
        importScripts;
        return true;
    }
    catch( e ) {
        if( e instanceof ReferenceError ) {
            return false;
        }
        else {
            throw e;
        }
    }
};

var inBrowser = function() {
    try {
        window;
        return !inWorker(); // return true if we're in a browser but not in a worker
    }
    catch( e ) {
        if( e instanceof ReferenceError ) {
            return false;
        }
        else {
            throw e;
        }
    }
};

var node = inNode();
var worker = inWorker();
var browser = inBrowser();


class Config {
    constructor() {
        this.ui = null;
        this.profiler = null;
        this.logLevel = null;
        this.theme = "dark";
        this.div = null;
        this.options = {
            noVersionCheck : false,
            debug: {
                removeTryCatch: false, // if true, there will be no try/catch
                record: false,         // if true, nothing will be recorded (for snapshot)
                makeSynchrone: false,      // if true, asynchrone procedures will be made synchrones
            }
        },
        this.logOptions = {
            codeLocation: false, // don't display the code location of the log
            fileLocation: false  // don't display the file location of the log
        };
    }

    /**************************************************************************
     * Options
     *************************************************************************/
    setOptions( opt ) {
        if( opt.debug ) {
            if( typeof opt.debug == "boolean" ) {
                // debug: true is a shortcut for all debug options to true
                this.options.debug = {
                    removeTryCatch: true,
                    record: true,
                    makeSynchrone: false 
                }
            }
            else {
                this.options.debug.removeTryCatch = opt.debug.removeTryCatch || false;
                this.options.debug.record = opt.debug.record || false;
                this.options.debug.makeSynchrone = opt.debug.makeSynchrone || false;
            }
        }

        this.options.noVersionCheck = opt.noVersionCheck;
    }

    getOptions() {
        return this.options;
    }

    // return record flag
    getRecord() {
        return this.options.debug.record;
    }

    getRemoveTryCatch() {
        return this.options.debug.removeTryCatch;
    }

    getMakeSynchrone() {
        return this.options.debug.makeSynchrone;
    }

    getNoVersionCheck() {
        return this.options.noVersionCheck;
    }

    /**************************************************************************
     * Logs
     *************************************************************************/

    setLogLevel( logLevel ) {
        this.logLevel = logLevel;
    }

    getLogLevel() {
        if( this.logLevel === null ) {
            this.logLevel = "warn";
        }
        return this.logLevel;
    }

    // see this.logOptions above
    setLogOptions(opt) {
        this.logOptions = opt;
    }

    getLogOptions() {
        return this.logOptions;
    }

    /**************************************************************************
     * Profiler
     *************************************************************************/
    setProfiler( b ) {
        this.profiler = b;
    }

    getProfiler() {
        if( this.profiler === null ) {
            this.profiler = false;
        }

        return this.profiler;
    }

    /**************************************************************************
     * Theme
     *************************************************************************/
    setTheme( theme ) {
        this.theme = theme;
    }

    getTheme() {
        return this.theme;
    }


    /**************************************************************************
     * UI
     *************************************************************************/
    setDiv( div ) {
        this.div = div === false ? false : $(div);
    }

    getDiv( div ) {
        return this.div;
    }

    setUI( o ) {
        this.ui = o;
        if( this.ui === undefined ) this.ui = {};
    }

    getUI() {
        if( this.ui === null ) {
            console.info("DualBox ui hasn't been set nor unset, please use DualBox.setUI() to set it. Defaulting to {}");
            this.ui = {};
        }

        if( node || worker ) return {};
        else return this.ui;
    }

    static getInstance() {
        if( Config.__instance === null ) {
            Config.__instance = new Config();
        }

        return Config.__instance;
    }
}
Config.__instance = null;

module.exports = {
    browser : browser,
    node    : node,
    worker  : worker,
    setTheme      : Config.getInstance().setTheme.bind(Config.getInstance()),
    getTheme      : Config.getInstance().getTheme.bind(Config.getInstance()),
    setOptions    : Config.getInstance().setOptions.bind(Config.getInstance()),
    getOptions    : Config.getInstance().getOptions.bind(Config.getInstance()),
    setProfiler   : Config.getInstance().setProfiler.bind(Config.getInstance()),
    getProfiler   : Config.getInstance().getProfiler.bind(Config.getInstance()),
    setLogLevel   : Config.getInstance().setLogLevel.bind(Config.getInstance()),
    getLogLevel   : Config.getInstance().getLogLevel.bind(Config.getInstance()),
    setLogOptions : Config.getInstance().setLogOptions.bind(Config.getInstance()),
    getLogOptions : Config.getInstance().getLogOptions.bind(Config.getInstance()),
    setUI : Config.getInstance().setUI.bind(Config.getInstance()),
    getUI : Config.getInstance().getUI.bind(Config.getInstance()),
    setDiv : Config.getInstance().setDiv.bind(Config.getInstance()),
    getDiv : Config.getInstance().getDiv.bind(Config.getInstance()),
    getNoVersionCheck : Config.getInstance().getNoVersionCheck.bind(Config.getInstance()),
    getMakeSynchrone : Config.getInstance().getMakeSynchrone.bind(Config.getInstance()),
    getRecord : Config.getInstance().getRecord.bind(Config.getInstance()),
    getRemoveTryCatch : Config.getInstance().getRemoveTryCatch.bind(Config.getInstance()),
}

