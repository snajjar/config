import { $, env, Widget3D, Type } from '@dualbox/dualbox';
import { SphereBufferGeometry, BufferTriGeometry, BufferGeometry, Geometry, Mesh, MeshBasicMaterial, Object3D, Vector3, Plane} from '@dualbox/dualbox-lib-xthree';

var pkgDesc = require('../package.json');
var JSONObject = require('@dualbox/dualbox-type-json');

if( env.browser ) {
    require('@dualbox/dualbox-lib-bootstrap');  // require bootstrap to work
    require('@dualbox/dualbox-lib-bootstrap-slider');
    require('./widget3d-material-edit.css');
}

var specialBindings = {
    selectMesh:true,
    unselectMesh:true
};

var pAOV = Widget3D.pushArrObjVal;
var rmIAO = Widget3D.rmIdxInArrObj;

/**
 */
class Widget3DMaterialEdit extends Widget3D {
    constructor(pkgDesc, appDesc, options) {
        super(pkgDesc, appDesc, options);

        // clone appDesc to be able to redefine the special events.
        this.appDesc = JSON.parse(JSON.stringify(this.appDesc));
        var evts = this.appDesc.attr && this.appDesc.attr.mouse || {};
        var to_rm = {};
        var that = this;
        Object.keys(evts).forEach(function (key) {
            for(var i=0; i<evts[key].length; ++i){
                var bind = evts[key][i];
                var buffered = key.search("buffered") === 0;
                var buff_tag = "";
                if(buffered){
                    var seq = key.split("_");
                    buff_tag = seq[0]+"_";
                    key = key.replace(buff_tag,"");
                }
                if(specialBindings[bind]){
                    var touch = key.search("touchstart") !== -1;
                    var butt = touch || key[9] === ":" || key[9] === undefined ? "" : key[9];
                    // Number of touches, if relevant
                    var nt = touch && key.length > 10 ? key[10] : "";
                    if( (key.search("mousedown") === -1 ||  (butt !== "0" && butt !== "1" && butt !=="2")) && !touch){
                        throw "Error : Widget3DMaterialEdit special binding '"+bind+"' has not been made to handle something else than mousedown0, mousdown1 or mousdown2, touchstart, touchstartX with X in 1 9. Please refer to documentation.";
                    }
                    var evt = buff_tag+(touch ? "touchstart" : "mousedown") + nt;

                    pAOV(to_rm,buff_tag+key,i);

                    switch(bind){
                        case "selectMesh":
                            {
                                pAOV(evts,evt+butt+":scene","selectMesh");
                                pAOV(evts,evt+butt+":background","unselectMesh");
                                pAOV(evts,evt+butt+":widget","unselectMesh");
                            }
                        break;
                        case "unselectMesh":
                            {
                                pAOV(evts,evt+butt+":background","unselectMesh");
                                pAOV(evts,evt+butt+":widget","unselectMesh");
                            }
                        break;
                        default:
                            throw "Error : bind "+bind+" is in the special binding list but is not recognized in the constructor.";
                        break;
                    }
                }
                key = buff_tag + key;
            }
        });
        // remove all the special bindings that have been found
        Object.keys(to_rm).forEach(function (key) {
            var arr = to_rm[key];
            for(var i=0; i<arr.length; ++i){
                rmIAO(evts, key, i);
            }
        });


        this.selected = null;
        this.materials = new Map();
    }


    // protected
    doTrigger(){
        var json_obj = new Map();
        this.materials.forEach(
            function(value, key, map){
                json_obj.set(key, new JSONObject(value));
            }
        );
        this.trigger({ "materials" : json_obj });
    }

    registerEvents() {
        super.registerEvents();
        this.registerUIEvent("clearValue", this.clearValue.bind(this));
    }

    // Not really clean. The initializing condition is repeated here and in the
    // parent class.
    initialize() {
        if(!this.initialized && this.canvas3d && this.canvas3d.isInitialized()){
            super.initialize();
        }
    }

    init3D(){
        // Nothing to do.
    }

    import( materials ) {
        this.materials = Type.deserialize( materials );
        this.doTrigger();
    }

    clearValue(){
        this.selected = null;
        this.materials = new Map();
        this.doTrigger();
    }

    // API Function
    selectMesh(event){
        var obj = event.cvs3dEvent.mouseData.underMouse.first.object;
        if(obj.name && obj.name !== ""){
            this.selected = event.cvs3dEvent.mouseData.underMouse.first.object;
            this.divMetalness.show();
            this.divRoughness.show();
            this.divOpacity.show();
            this.divColor.show();
            this.inputMetalness.bootstrapSlider('setValue', this.selected.material.metalness);
            this.inputRoughness.bootstrapSlider('setValue', this.selected.material.roughness);
            this.inputOpacity.bootstrapSlider('setValue', this.selected.material.opacity);
            $(this.div).find('.slider-val-metalness').text( this.selected.material.metalness.toString() );
            $(this.div).find('.slider-val-roughness').text( this.selected.material.roughness.toString() );
            $(this.div).find('.slider-val-opacity').text( this.selected.material.opacity.toString() );
            this.inputColor.val('#'+this.selected.material.color.getHexString());
            this.selectedSpan.text("Selected : " + obj.name);
        }
    }

    unselectMesh(event){
        this.selected = null;
        this.selectedSpan.text("No mesh selected.");
        this.divMetalness.hide();
        this.divRoughness.hide();
        this.divOpacity.hide();
        this.divColor.hide();
        event.cvs3dEvent.doPropagate();
    }

    onChange(e, ui, key) {
        if(this.selected){
            var mat = this.materials.get(this.selected.name);
            var defined = mat !== undefined;
            if(!defined){
                mat = {type:'MeshStandardMaterial'};
            }
            var old_val = this.val;
            if(ui){
                switch(key){
                    case "metalness":
                        mat.metalness = parseFloat(ui.value);
                        mat.roughness = parseFloat(this.inputMetalness.bootstrapSlider('getValue'));
                        mat.opacity = parseFloat(this.inputOpacity.bootstrapSlider('getValue'));
                    break;
                    case "roughness":
                        mat.metalness = parseFloat(this.inputMetalness.bootstrapSlider('getValue'));
                        mat.roughness = parseFloat(ui.value);
                        mat.opacity = parseFloat(this.inputOpacity.bootstrapSlider('getValue'));
                    break;
                    case "opacity":
                        mat.metalness = parseFloat(this.inputMetalness.bootstrapSlider('getValue'));
                        mat.roughness = parseFloat(this.inputMetalness.bootstrapSlider('getValue'));
                        mat.opacity = parseFloat(ui.value);
                    break;
                }
                this.val = parseFloat(ui.value);
            }else{
                mat.metalness = parseFloat(this.inputMetalness.bootstrapSlider('getValue'));
                mat.roughness = parseFloat(this.inputRoughness.bootstrapSlider('getValue'));
                mat.opacity = parseFloat(this.inputOpacity.bootstrapSlider('getValue'));
            }
            mat.color = $(this.divColor).find('input[type="color"]').val();

            $(this.div).find('.slider-val-metalness').text( mat.metalness.toString() );
            $(this.div).find('.slider-val-roughness').text( mat.roughness.toString() );
            $(this.div).find('.slider-val-opacity').text( mat.opacity.toString() );

            // We only validate the selection if the user has changed the value, or if the material had already been user defined
            if(defined ||
                mat.metalness !== this.selected.material.metalness ||
                mat.roughness !== this.selected.material.roughness ||
                mat.color !== "#"+this.selected.material.color.getHexString() ||
                mat.opacity !== this.selected.material.opacity)
            {
               this.materials.set(this.selected.name, mat);
               this.doTrigger();
            }
        }else{

        }
    }

    onChangeMetalness(e,ui){
        this.onChange(e,ui,"metalness");
    }

    onChangeRoughness(e,ui){
        this.onChange(e,ui,"roughness");
    }

    onChangeOpacity(e,ui){
        this.onChange(e,ui,"opacity");
    }

    onChangeColor(e,ui){
        this.onChange(e,ui,"color");
    }

    // protected
    emitData(){
        var json_obj = new Map();
        this.materials.forEach(
            function(value, key, map){
                json_obj.set(key, new JSONObject(value));
            }
        );
        this.emit('data', { "materials" : json_obj });
    }

    onReady() {
        this.emitData();
    }

    static attachTo(appDesc, attrs, div) {
        var widget = new Widget3DMaterialEdit(pkgDesc, appDesc, attrs);

        widget.selectedSpan = $('<span/>', {class:"dualbox form-group", text:"No mesh selected"});
        widget.inputMetalness = $('<input/>', {});
        widget.divMetalness = $('<div/>', { class : "dualbox form-group db-mat-edit-slider-div" }).append(
            $('<label/>', { class: "dualbox", style: "width: 100%;" }).append(
                $('<span/>', { class: "dualbox", text: "Metalness" }),
                $('<span/>', { class: 'dualbox slider-val-metalness', text: "1.0", style: "float: right;" })
            ),
            widget.inputMetalness
        );
        widget.inputRoughness = $('<input/>', {});
        widget.divRoughness = $('<div/>', { class : "dualbox form-group db-mat-edit-slider-div" }).append(
            $('<label/>', { class: "dualbox", style: "width: 100%;" }).append(
                $('<span/>', { class: "dualbox", text: "Roughness" }),
                $('<span/>', { class: 'dualbox slider-val-roughness', text: "1.0", style: "float: right;" })
            ),
            widget.inputRoughness
        );
        widget.inputOpacity = $('<input/>', {});
        widget.divOpacity = $('<div/>', { class : "dualbox form-group db-mat-edit-slider-div" }).append(
            $('<label/>', { class: "dualbox", style: "width: 100%;" }).append(
                $('<span/>', { class: "dualbox", text: "Opacity" }),
                $('<span/>', { class: 'dualbox slider-val-opacity', text: "1.0", style: "float: right;" })
            ),
            widget.inputOpacity
        );

        // build the select div from app.json parameters and bind events
        widget.inputColor = $('<input/>', { type: 'color' , value : "#ffffff" });
        widget.inputColor.on('input', function() {
            widget.onChangeColor();
        });

        // build the container
        widget.divColor = $('<div/>', {class:"dualbox form-group db-mat-edit-colorpicker"}).append(
            $('<label/>', { text: "Color", style: 'margin-right: 15px;' }),
            widget.inputColor
        );


        // instanciate div from app.json parameters
        widget.div =
            $('<div/>', { class : "dualbox form-group" }).append(
                $('<label/>', { class: "dualbox", style: "width: 100%;" }).append(
                    widget.selectedSpan
                ),
                widget.divColor,
                widget.divMetalness,
                widget.divRoughness,
                widget.divOpacity
            );

        widget.inputMetalness.bootstrapSlider({
            min:   0,
            max:   1,
            step:  0.05,
            formatter: function(value) {
                return value;
            }
        }).on('slideStop', widget.onChangeMetalness.bind(widget));
        widget.inputRoughness.bootstrapSlider({
            min:   0,
            max:   1,
            step:  0.05,
            formatter: function(value) {
                return value;
            }
        }).on('slideStop', widget.onChangeRoughness.bind(widget));
        widget.inputOpacity.bootstrapSlider({
            min:   0,
            max:   1,
            step:  0.05,
            formatter: function(value) {
                return value;
            }
        }).on('slideStop', widget.onChangeOpacity.bind(widget));


        if(widget.attr.triggerOnSlide){
            widget.inputMetalness.on('slide', widget.onChangeMetalness.bind(widget));
            widget.inputRoughness.on('slide', widget.onChangeRoughness.bind(widget));
            widget.inputOpacity.on('slide', widget.onChangeOpacity.bind(widget));
        }
        widget.inputMetalness.bootstrapSlider('setValue', 1.0);
        widget.inputRoughness.bootstrapSlider('setValue', 1.0);
        widget.inputOpacity.bootstrapSlider('setValue', 1.0);

        // append to param div and return the slider
        $(div).append(widget.div);
        if( widget.attr.hidden ) {
            widget.div.hide();
        }
        widget.divColor.hide();
        widget.divMetalness.hide();
        widget.divRoughness.hide();
        widget.divOpacity.hide();

        return widget;
    }
}

module.exports = Widget3DMaterialEdit;
