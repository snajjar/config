/**
 *   Object to manage ctrl-z/ctrl-y
 *   Manages the different states of the model and is able to restore them
 */

import { _ } from 'lodash';

class History {
    constructor(model) {
        this.m = model;

        this.states = [];    // all saved states

        this._holdSaving = false; // if true, save() will have no effect
        this.maxStates = 30; // to be changed accordingly

        // info needed if we cycle through the array
        this.reachedMaxStates = false;
        this.oldestStateIndex = 0; // pointer to the oldest state

        this.current = -1;
    }

    // clean all states and set this one as a start
    reset() {
        this.states = [];
        this.current = -1;
        this.save();
    }

    pushState( state ) {
        this.states.push(state);
        if( this.states.length > this.maxStates ) {
            this.states.shift();
            this.current--;
        }
    }

    save() {
        if( !this._holdSaving ) {
            var state = _.cloneDeep(this.m.data); // deep clone
            state.metadata = { savedAt : new Date() };
            this.pushState(state);
            this.current++;
            console.log("state saved");
        }
    }

    undo() {
        if( this.current > 0 ) {
            this.current--;
        }

        if( this.current >= 0 ) {
            console.log('undo');
            this.setState( this.states[this.current] );
        }
    }

    redo() {
        if( this.current < this.states.length - 1 ) {
            this.current++;
        }

        if( this.current >= 0 ) {
            console.log('redo');
            this.setState( this.states[this.current] );
        }
    }

    setState(state) {
        this.m.data = state;
    }

    holdSaving(b) {
        this._holdSaving = b;
    }

    // execute the callback and save the history as 1 change
    batch( cb ) {
        this.holdSaving(true);
        cb();
        this.holdSaving(false);
        this.save();
    }

    ignore( cb ) {
        this.holdSaving(true);
        cb();
        this.holdSaving(false);
    }
}

export default History;
